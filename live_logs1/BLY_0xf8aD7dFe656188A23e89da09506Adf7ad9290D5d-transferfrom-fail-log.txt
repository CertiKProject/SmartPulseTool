This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:06:35,676 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:06:35,677 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:06:35,689 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:06:35,689 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:06:35,690 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:06:35,691 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:06:35,692 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:06:35,694 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:06:35,694 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:06:35,695 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:06:35,695 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:06:35,696 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:06:35,697 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:06:35,698 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:06:35,698 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:06:35,699 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:06:35,700 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:06:35,702 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:06:35,703 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:06:35,704 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:06:35,704 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:06:35,707 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:06:35,707 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:06:35,707 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:06:35,708 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:06:35,708 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:06:35,708 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:06:35,709 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:06:35,709 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:06:35,709 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:06:35,710 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:06:35,710 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:06:35,711 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:06:35,712 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:06:35,712 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:06:35,712 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:06:35,712 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:06:35,713 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:06:35,713 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:06:35,714 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:06:35,714 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:06:35,722 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:06:35,722 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:06:35,723 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:06:35,723 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:06:35,723 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:06:35,723 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:06:35,723 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:06:35,723 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:06:35,724 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:06:35,724 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:06:35,724 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:06:35,724 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:06:35,724 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:06:35,724 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:06:35,724 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:06:35,724 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:06:35,724 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:06:35,725 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:06:35,725 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:06:35,749 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:06:35,761 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:06:35,763 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:06:35,765 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:06:35,765 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:06:35,765 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl
[2020-11-25 01:06:35,766 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl'
[2020-11-25 01:06:35,895 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:06:35,896 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:06:35,897 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:06:35,897 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:06:35,897 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:06:35,914 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:35,916 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:35,968 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:35,968 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:36,007 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:36,031 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:36,047 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:36,070 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:06:36,071 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:06:36,071 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:06:36,073 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:06:36,077 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/1) ...
[2020-11-25 01:06:36,104 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BLY.transferFrom(from, to, value), from != to && (value > _balances_HxERC20[this][from] || value > _allowed_HxERC20[this][from][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transferFrom)))
[2020-11-25 01:06:36,110 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BLY.transferFrom(from, to, value), from != to && (value > _balances_HxERC20[this][from] || value > _allowed_HxERC20[this][from][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transferFrom)))
[2020-11-25 01:06:36,118 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BLY.transferFrom(from, to, value), from != to && (value > _balances_HxERC20[this][from] || value > _allowed_HxERC20[this][from][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transferFrom)))
[2020-11-25 01:06:36,132 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s1322!=to_s1322 && ( ( value_s1322>_balances_HxERC20[this][from_s1322] || value_s1322>_allowed_HxERC20[this][from_s1322][msg.sender] ) || ( _balances_HxERC20[this][to_s1322] + value_s1322 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s1322>=0 ) && value_s1322<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][to_s1322]>=0 ) && _balances_HxERC20[this][to_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][from_s1322]>=0 ) && _balances_HxERC20[this][from_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_HxERC20[this][from_s1322][msg.sender]>=0 ) && _allowed_HxERC20[this][from_s1322][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:06:36,141 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BLY.transferFrom(from, to, value), from != to && (value > _balances_HxERC20[this][from] || value > _allowed_HxERC20[this][from][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transferFrom)))
[2020-11-25 01:06:36,141 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_BLY0) ==> ( <>AP(fail_transferFrom_BLY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:06:36,163 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:06:36 PropertyContainer
[2020-11-25 01:06:36,163 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:06:36,164 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:06:36,164 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:06:36,164 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:06:36,165 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/2) ...
[2020-11-25 01:06:36,165 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:06:36,165 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:06:36,195 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:06:36" (2/2) ...
[2020-11-25 01:06:36,195 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:06:36,196 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:06:36,196 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:06:36,196 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:06:36,197 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/2) ...
[2020-11-25 01:06:36,254 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:06:36,254 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:06:36,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:06:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 01:06:36,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 01:06:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 01:06:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 01:06:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 01:06:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:06:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 01:06:36,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 01:06:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 01:06:36,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 01:06:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:06:36,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:06:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 01:06:36,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 01:06:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 01:06:36,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 01:06:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 01:06:36,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 01:06:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:06:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 01:06:36,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 01:06:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 01:06:36,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 01:06:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 01:06:36,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 01:06:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 01:06:36,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 01:06:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 01:06:36,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 01:06:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:06:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:06:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:06:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 01:06:36,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 01:06:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 01:06:36,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 01:06:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 01:06:36,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 01:06:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 01:06:36,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 01:06:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:06:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:06:36,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:06:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:06:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:06:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:06:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:06:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:06:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:06:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:06:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 01:06:36,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 01:06:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 01:06:36,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 01:06:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 01:06:36,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 01:06:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 01:06:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 01:06:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:06:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:06:36,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:06:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:06:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:06:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:06:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:06:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:06:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:06:36,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:06:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:06:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:06:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:06:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:06:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:06:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:06:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:06:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 01:06:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 01:06:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 01:06:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 01:06:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 01:06:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 01:06:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:06:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 01:06:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 01:06:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 01:06:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 01:06:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 01:06:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 01:06:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:06:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:06:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 01:06:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 01:06:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 01:06:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 01:06:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:06:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:06:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:06:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:06:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 01:06:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 01:06:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 01:06:36,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 01:06:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:06:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:06:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:06:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 01:06:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 01:06:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 01:06:36,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 01:06:36,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 01:06:36,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 01:06:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 01:06:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 01:06:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:06:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 01:06:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:06:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:06:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 01:06:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 01:06:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:06:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:06:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:06:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:06:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:06:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:06:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:06:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:06:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:06:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:06:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:06:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:06:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:06:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:06:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:06:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:06:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 01:06:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:06:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:06:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:06:36,284 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:06:36,284 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:06:36,284 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 01:06:36,284 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:06:36,284 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:06:36,284 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:06:36,284 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:06:36,285 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:06:36,285 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 01:06:36,285 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 01:06:36,285 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 01:06:36,285 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:06:36,285 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:06:36,285 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 01:06:36,286 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 01:06:36,287 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 01:06:36,287 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 01:06:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:06:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:06:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 01:06:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 01:06:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:06:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:06:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 01:06:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:06:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 01:06:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 01:06:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 01:06:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:06:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:06:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:06:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:06:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:06:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:06:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:06:36,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 01:06:36,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 01:06:36,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:06:36,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:06:36,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:06:36,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:06:36,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 01:06:36,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:06:36,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:06:36,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:06:36,696 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:06:36,696 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:06:37,715 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:06:37,715 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 01:06:37,718 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:06:37 BoogieIcfgContainer
[2020-11-25 01:06:37,718 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:06:36" (2/2) ...
[2020-11-25 01:06:37,718 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:06:37,718 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@531ab5af and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:06:37, skipping insertion in model container
[2020-11-25 01:06:37,718 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:06:37,718 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:06:37,718 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:06:37,719 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:06:37,719 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/3) ...
[2020-11-25 01:06:37,720 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5601e48e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:06:37, skipping insertion in model container
[2020-11-25 01:06:37,720 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:06:36" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:06:37,752 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:06:37 NWAContainer
[2020-11-25 01:06:37,753 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:06:37,753 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:06:37,753 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:06:37,754 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:06:37,756 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:06:37" (3/4) ...
[2020-11-25 01:06:37,757 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@48427bf3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:06:37, skipping insertion in model container
[2020-11-25 01:06:37,758 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:06:37" (4/4) ...
[2020-11-25 01:06:37,764 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:06:37,772 INFO  L110   BuchiProductObserver]: Initial RCFG 4604 locations, 6366 edges
[2020-11-25 01:06:37,773 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:06:37,789 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:06:41,053 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:06:41,066 INFO  L110   BuchiProductObserver]: BuchiProgram size 11432 locations, 20712 edges
[2020-11-25 01:06:41,066 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:06:41 BoogieIcfgContainer
[2020-11-25 01:06:41,066 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:06:41,066 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:06:41,066 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:06:41,068 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:06:41,068 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:06:41" (1/1) ...
[2020-11-25 01:06:41,250 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:06:41,254 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:06:41,272 INFO  L313           BlockEncoder]: Initial Icfg 11432 locations, 20712 edges
[2020-11-25 01:06:41,272 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:06:41,273 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:06:41,273 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:06:41,273 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:06:41,298 INFO  L70    emoveInfeasibleEdges]: Removed 213 edges and 23 locations because of local infeasibility
[2020-11-25 01:06:41,323 INFO  L70        RemoveSinkStates]: Removed 166 edges and 99 locations by removing sink states
[2020-11-25 01:06:41,355 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:06:41,365 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:06:41,375 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:06:41,376 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:06:41,382 INFO  L313           BlockEncoder]: Encoded RCFG 11256 locations, 20253 edges
[2020-11-25 01:06:41,383 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:06:41 BasicIcfg
[2020-11-25 01:06:41,383 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:06:41,383 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:06:41,383 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:06:41,385 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:06:41,386 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:06:41,386 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:06:35" (1/6) ...
[2020-11-25 01:06:41,387 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a69a677 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:06:41, skipping insertion in model container
[2020-11-25 01:06:41,388 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:06:41,388 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:06:36" (2/6) ...
[2020-11-25 01:06:41,388 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a69a677 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:06:41, skipping insertion in model container
[2020-11-25 01:06:41,389 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:06:41,389 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:06:37" (3/6) ...
[2020-11-25 01:06:41,389 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a69a677 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:06:41, skipping insertion in model container
[2020-11-25 01:06:41,389 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:06:41,389 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:06:37" (4/6) ...
[2020-11-25 01:06:41,390 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a69a677 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:06:41, skipping insertion in model container
[2020-11-25 01:06:41,390 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:06:41,390 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:06:41" (5/6) ...
[2020-11-25 01:06:41,390 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4a69a677 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:06:41, skipping insertion in model container
[2020-11-25 01:06:41,390 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:06:41,390 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:06:41" (6/6) ...
[2020-11-25 01:06:41,391 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-fail.bpl_BEv2
[2020-11-25 01:06:41,432 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:06:41,432 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:06:41,432 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:06:41,432 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:06:41,432 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:06:41,432 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:06:41,432 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:06:41,433 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:06:41,433 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:06:41,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11256 states.
[2020-11-25 01:06:41,684 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:41,684 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:41,684 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:41,694 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:41,695 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:41,695 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:06:41,695 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11256 states.
[2020-11-25 01:06:41,741 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:41,741 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:41,741 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:41,743 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:41,743 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:41,761 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:41,761 INFO  L82        PathProgramCache]: Analyzing trace with hash 1444727124, now seen corresponding path program 1 times
[2020-11-25 01:06:41,767 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:41,794 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:41,834 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:06:41,837 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:06:41,837 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:06:42,309 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:42,318 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:06:42,318 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:06:42,319 INFO  L87              Difference]: Start difference. First operand 11256 states. Second operand 3 states.
[2020-11-25 01:06:42,768 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:42,768 INFO  L93              Difference]: Finished difference Result 9692 states and 15977 transitions.
[2020-11-25 01:06:42,769 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:06:42,770 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9692 states and 15977 transitions.
[2020-11-25 01:06:42,824 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:42,893 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9692 states to 9692 states and 15977 transitions.
[2020-11-25 01:06:42,893 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 01:06:42,899 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1893
[2020-11-25 01:06:42,900 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9692 states and 15977 transitions.
[2020-11-25 01:06:42,927 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:42,927 INFO  L728         BuchiCegarLoop]: Abstraction has 9692 states and 15977 transitions.
[2020-11-25 01:06:42,949 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9692 states and 15977 transitions.
[2020-11-25 01:06:43,085 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9692 to 8537.
[2020-11-25 01:06:43,086 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8537 states.
[2020-11-25 01:06:43,106 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8537 states to 8537 states and 13988 transitions.
[2020-11-25 01:06:43,107 INFO  L751         BuchiCegarLoop]: Abstraction has 8537 states and 13988 transitions.
[2020-11-25 01:06:43,107 INFO  L631         BuchiCegarLoop]: Abstraction has 8537 states and 13988 transitions.
[2020-11-25 01:06:43,107 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:06:43,107 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8537 states and 13988 transitions.
[2020-11-25 01:06:43,124 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:43,124 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:43,125 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:43,126 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:43,126 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND TRUE   !(account_s164 != null)
[L5739]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:43,131 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:43,131 INFO  L82        PathProgramCache]: Analyzing trace with hash -999514621, now seen corresponding path program 1 times
[2020-11-25 01:06:43,133 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:43,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:43,172 INFO  L134       CoverageAnalysis]: Checked inductivity of 25 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 01:06:43,172 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:43,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 01:06:43,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:43,173 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:06:43,173 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:06:43,173 INFO  L87              Difference]: Start difference. First operand 8537 states and 13988 transitions. cyclomatic complexity: 5461 Second operand 4 states.
[2020-11-25 01:06:44,057 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:44,057 INFO  L93              Difference]: Finished difference Result 7837 states and 9094 transitions.
[2020-11-25 01:06:44,057 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:06:44,058 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7837 states and 9094 transitions.
[2020-11-25 01:06:44,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:44,095 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7837 states to 7837 states and 9094 transitions.
[2020-11-25 01:06:44,095 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1453
[2020-11-25 01:06:44,096 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1494
[2020-11-25 01:06:44,096 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7837 states and 9094 transitions.
[2020-11-25 01:06:44,102 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:44,102 INFO  L728         BuchiCegarLoop]: Abstraction has 7837 states and 9094 transitions.
[2020-11-25 01:06:44,108 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7837 states and 9094 transitions.
[2020-11-25 01:06:44,158 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7837 to 7832.
[2020-11-25 01:06:44,158 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7832 states.
[2020-11-25 01:06:44,174 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7832 states to 7832 states and 9089 transitions.
[2020-11-25 01:06:44,174 INFO  L751         BuchiCegarLoop]: Abstraction has 7832 states and 9089 transitions.
[2020-11-25 01:06:44,174 INFO  L631         BuchiCegarLoop]: Abstraction has 7832 states and 9089 transitions.
[2020-11-25 01:06:44,174 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:06:44,174 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7832 states and 9089 transitions.
[2020-11-25 01:06:44,183 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:44,184 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:44,184 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:44,186 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:44,186 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND TRUE   !(account_s164 != null)
[L5739]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:44,190 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:44,190 INFO  L82        PathProgramCache]: Analyzing trace with hash 976473150, now seen corresponding path program 1 times
[2020-11-25 01:06:44,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:44,202 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:44,276 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:06:44,276 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:44,276 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 01:06:44,277 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:44,277 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:06:44,277 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:06:44,277 INFO  L87              Difference]: Start difference. First operand 7832 states and 9089 transitions. cyclomatic complexity: 1267 Second operand 9 states.
[2020-11-25 01:06:44,433 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:44,433 INFO  L93              Difference]: Finished difference Result 7878 states and 9164 transitions.
[2020-11-25 01:06:44,433 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:06:44,434 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7878 states and 9164 transitions.
[2020-11-25 01:06:44,452 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:44,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7878 states to 7878 states and 9164 transitions.
[2020-11-25 01:06:44,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1503
[2020-11-25 01:06:44,475 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1503
[2020-11-25 01:06:44,475 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7878 states and 9164 transitions.
[2020-11-25 01:06:44,481 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:44,481 INFO  L728         BuchiCegarLoop]: Abstraction has 7878 states and 9164 transitions.
[2020-11-25 01:06:44,488 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7878 states and 9164 transitions.
[2020-11-25 01:06:44,537 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7878 to 7869.
[2020-11-25 01:06:44,537 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7869 states.
[2020-11-25 01:06:44,547 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7869 states to 7869 states and 9148 transitions.
[2020-11-25 01:06:44,547 INFO  L751         BuchiCegarLoop]: Abstraction has 7869 states and 9148 transitions.
[2020-11-25 01:06:44,547 INFO  L631         BuchiCegarLoop]: Abstraction has 7869 states and 9148 transitions.
[2020-11-25 01:06:44,547 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:06:44,547 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7869 states and 9148 transitions.
[2020-11-25 01:06:44,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:44,558 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:44,558 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:44,559 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:44,560 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND TRUE   !(account_s218 != null)
[L5810]               revert := true;
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND TRUE   revert
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:44,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:44,564 INFO  L82        PathProgramCache]: Analyzing trace with hash -338222303, now seen corresponding path program 1 times
[2020-11-25 01:06:44,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:44,576 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:44,667 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:06:44,667 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:44,667 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 01:06:44,667 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:44,667 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 01:06:44,668 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 01:06:44,668 INFO  L87              Difference]: Start difference. First operand 7869 states and 9148 transitions. cyclomatic complexity: 1289 Second operand 10 states.
[2020-11-25 01:06:44,765 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:44,765 INFO  L93              Difference]: Finished difference Result 7929 states and 9239 transitions.
[2020-11-25 01:06:44,765 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:06:44,765 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7929 states and 9239 transitions.
[2020-11-25 01:06:44,779 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:44,795 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7929 states to 7929 states and 9239 transitions.
[2020-11-25 01:06:44,795 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1510
[2020-11-25 01:06:44,796 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1510
[2020-11-25 01:06:44,796 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7929 states and 9239 transitions.
[2020-11-25 01:06:44,801 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:44,801 INFO  L728         BuchiCegarLoop]: Abstraction has 7929 states and 9239 transitions.
[2020-11-25 01:06:44,808 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7929 states and 9239 transitions.
[2020-11-25 01:06:44,848 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7929 to 7876.
[2020-11-25 01:06:44,849 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7876 states.
[2020-11-25 01:06:44,856 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7876 states to 7876 states and 9156 transitions.
[2020-11-25 01:06:44,856 INFO  L751         BuchiCegarLoop]: Abstraction has 7876 states and 9156 transitions.
[2020-11-25 01:06:44,856 INFO  L631         BuchiCegarLoop]: Abstraction has 7876 states and 9156 transitions.
[2020-11-25 01:06:44,856 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:06:44,856 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7876 states and 9156 transitions.
[2020-11-25 01:06:44,864 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:44,864 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:44,864 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:44,865 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:44,865 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND TRUE   !!__var_2
[L5747]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:44,869 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:44,869 INFO  L82        PathProgramCache]: Analyzing trace with hash 1410545826, now seen corresponding path program 1 times
[2020-11-25 01:06:44,870 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:44,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:44,914 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 01:06:44,914 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:06:44,914 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:06:44,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:44,914 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:06:44,915 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:06:44,915 INFO  L87              Difference]: Start difference. First operand 7876 states and 9156 transitions. cyclomatic complexity: 1290 Second operand 3 states.
[2020-11-25 01:06:45,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:45,023 INFO  L93              Difference]: Finished difference Result 9001 states and 10174 transitions.
[2020-11-25 01:06:45,023 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:06:45,023 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9001 states and 10174 transitions.
[2020-11-25 01:06:45,040 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:45,059 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9001 states to 8323 states and 9370 transitions.
[2020-11-25 01:06:45,059 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1602
[2020-11-25 01:06:45,060 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1676
[2020-11-25 01:06:45,060 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8323 states and 9370 transitions.
[2020-11-25 01:06:45,065 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:45,065 INFO  L728         BuchiCegarLoop]: Abstraction has 8323 states and 9370 transitions.
[2020-11-25 01:06:45,071 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8323 states and 9370 transitions.
[2020-11-25 01:06:45,107 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8323 to 7660.
[2020-11-25 01:06:45,107 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7660 states.
[2020-11-25 01:06:45,115 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7660 states to 7660 states and 8536 transitions.
[2020-11-25 01:06:45,115 INFO  L751         BuchiCegarLoop]: Abstraction has 7660 states and 8536 transitions.
[2020-11-25 01:06:45,115 INFO  L631         BuchiCegarLoop]: Abstraction has 7660 states and 8536 transitions.
[2020-11-25 01:06:45,115 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:06:45,115 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7660 states and 8536 transitions.
[2020-11-25 01:06:45,123 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:45,123 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:45,123 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:45,126 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:45,126 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND TRUE   DType[this] == ERC20Pausable
[L6663]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6663]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6664]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND TRUE   DType[this] == ERC20Pausable
[L6663]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6663]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6664]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:45,132 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:45,133 INFO  L82        PathProgramCache]: Analyzing trace with hash 710080110, now seen corresponding path program 1 times
[2020-11-25 01:06:45,133 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:45,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:45,363 INFO  L134       CoverageAnalysis]: Checked inductivity of 935 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 935 trivial. 0 not checked.
[2020-11-25 01:06:45,363 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:06:45,364 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:06:45,364 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:45,364 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:06:45,364 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:06:45,364 INFO  L87              Difference]: Start difference. First operand 7660 states and 8536 transitions. cyclomatic complexity: 886 Second operand 8 states.
[2020-11-25 01:06:45,511 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:45,511 INFO  L93              Difference]: Finished difference Result 7718 states and 8595 transitions.
[2020-11-25 01:06:45,511 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:06:45,511 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7718 states and 8595 transitions.
[2020-11-25 01:06:45,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:45,542 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7718 states to 7642 states and 8510 transitions.
[2020-11-25 01:06:45,542 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1605
[2020-11-25 01:06:45,542 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1605
[2020-11-25 01:06:45,543 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7642 states and 8510 transitions.
[2020-11-25 01:06:45,547 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:45,547 INFO  L728         BuchiCegarLoop]: Abstraction has 7642 states and 8510 transitions.
[2020-11-25 01:06:45,554 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7642 states and 8510 transitions.
[2020-11-25 01:06:45,587 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7642 to 7642.
[2020-11-25 01:06:45,587 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7642 states.
[2020-11-25 01:06:45,594 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7642 states to 7642 states and 8510 transitions.
[2020-11-25 01:06:45,594 INFO  L751         BuchiCegarLoop]: Abstraction has 7642 states and 8510 transitions.
[2020-11-25 01:06:45,594 INFO  L631         BuchiCegarLoop]: Abstraction has 7642 states and 8510 transitions.
[2020-11-25 01:06:45,594 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:06:45,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7642 states and 8510 transitions.
[2020-11-25 01:06:45,602 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:45,602 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:45,602 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:45,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:45,604 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:45,610 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:45,611 INFO  L82        PathProgramCache]: Analyzing trace with hash 708961811, now seen corresponding path program 1 times
[2020-11-25 01:06:45,611 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:45,624 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:45,843 INFO  L134       CoverageAnalysis]: Checked inductivity of 947 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 920 trivial. 0 not checked.
[2020-11-25 01:06:45,843 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:45,843 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:06:45,844 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:45,844 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:06:45,844 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:06:45,845 INFO  L87              Difference]: Start difference. First operand 7642 states and 8510 transitions. cyclomatic complexity: 878 Second operand 7 states.
[2020-11-25 01:06:45,948 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:45,949 INFO  L93              Difference]: Finished difference Result 7665 states and 8537 transitions.
[2020-11-25 01:06:45,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:06:45,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7665 states and 8537 transitions.
[2020-11-25 01:06:45,960 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:45,974 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7665 states to 7648 states and 8517 transitions.
[2020-11-25 01:06:45,974 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1605
[2020-11-25 01:06:45,975 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1605
[2020-11-25 01:06:45,975 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7648 states and 8517 transitions.
[2020-11-25 01:06:45,979 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:45,979 INFO  L728         BuchiCegarLoop]: Abstraction has 7648 states and 8517 transitions.
[2020-11-25 01:06:45,984 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7648 states and 8517 transitions.
[2020-11-25 01:06:46,018 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7648 to 7648.
[2020-11-25 01:06:46,018 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7648 states.
[2020-11-25 01:06:46,025 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7648 states to 7648 states and 8517 transitions.
[2020-11-25 01:06:46,025 INFO  L751         BuchiCegarLoop]: Abstraction has 7648 states and 8517 transitions.
[2020-11-25 01:06:46,025 INFO  L631         BuchiCegarLoop]: Abstraction has 7648 states and 8517 transitions.
[2020-11-25 01:06:46,025 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:06:46,025 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7648 states and 8517 transitions.
[2020-11-25 01:06:46,033 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:46,033 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:46,033 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:46,035 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:46,035 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:46,041 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:46,041 INFO  L82        PathProgramCache]: Analyzing trace with hash -1937531330, now seen corresponding path program 1 times
[2020-11-25 01:06:46,042 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:46,054 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:46,219 INFO  L134       CoverageAnalysis]: Checked inductivity of 935 backedges. 0 proven. 24 refuted. 0 times theorem prover too weak. 911 trivial. 0 not checked.
[2020-11-25 01:06:46,220 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:46,220 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:06:46,220 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:46,220 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:06:46,220 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:06:46,220 INFO  L87              Difference]: Start difference. First operand 7648 states and 8517 transitions. cyclomatic complexity: 879 Second operand 7 states.
[2020-11-25 01:06:46,327 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:46,327 INFO  L93              Difference]: Finished difference Result 7671 states and 8544 transitions.
[2020-11-25 01:06:46,327 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:06:46,327 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7671 states and 8544 transitions.
[2020-11-25 01:06:46,339 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:46,353 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7671 states to 7654 states and 8524 transitions.
[2020-11-25 01:06:46,353 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1605
[2020-11-25 01:06:46,354 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1605
[2020-11-25 01:06:46,354 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7654 states and 8524 transitions.
[2020-11-25 01:06:46,357 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:46,358 INFO  L728         BuchiCegarLoop]: Abstraction has 7654 states and 8524 transitions.
[2020-11-25 01:06:46,363 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7654 states and 8524 transitions.
[2020-11-25 01:06:46,396 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7654 to 7648.
[2020-11-25 01:06:46,397 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7648 states.
[2020-11-25 01:06:46,404 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7648 states to 7648 states and 8517 transitions.
[2020-11-25 01:06:46,404 INFO  L751         BuchiCegarLoop]: Abstraction has 7648 states and 8517 transitions.
[2020-11-25 01:06:46,404 INFO  L631         BuchiCegarLoop]: Abstraction has 7648 states and 8517 transitions.
[2020-11-25 01:06:46,404 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:06:46,404 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7648 states and 8517 transitions.
[2020-11-25 01:06:46,412 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:46,412 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:46,412 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:46,414 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:46,414 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:46,420 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:46,420 INFO  L82        PathProgramCache]: Analyzing trace with hash 1546946687, now seen corresponding path program 1 times
[2020-11-25 01:06:46,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:46,436 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:46,620 INFO  L134       CoverageAnalysis]: Checked inductivity of 929 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 898 trivial. 0 not checked.
[2020-11-25 01:06:46,621 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:46,621 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:06:46,621 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:46,621 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:06:46,621 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:06:46,621 INFO  L87              Difference]: Start difference. First operand 7648 states and 8517 transitions. cyclomatic complexity: 879 Second operand 8 states.
[2020-11-25 01:06:46,743 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:46,743 INFO  L93              Difference]: Finished difference Result 7675 states and 8548 transitions.
[2020-11-25 01:06:46,743 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:06:46,743 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7675 states and 8548 transitions.
[2020-11-25 01:06:46,755 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:46,769 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7675 states to 7661 states and 8532 transitions.
[2020-11-25 01:06:46,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1605
[2020-11-25 01:06:46,770 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1605
[2020-11-25 01:06:46,770 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7661 states and 8532 transitions.
[2020-11-25 01:06:46,774 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:46,774 INFO  L728         BuchiCegarLoop]: Abstraction has 7661 states and 8532 transitions.
[2020-11-25 01:06:46,780 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7661 states and 8532 transitions.
[2020-11-25 01:06:46,816 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7661 to 7661.
[2020-11-25 01:06:46,816 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7661 states.
[2020-11-25 01:06:46,823 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7661 states to 7661 states and 8532 transitions.
[2020-11-25 01:06:46,823 INFO  L751         BuchiCegarLoop]: Abstraction has 7661 states and 8532 transitions.
[2020-11-25 01:06:46,823 INFO  L631         BuchiCegarLoop]: Abstraction has 7661 states and 8532 transitions.
[2020-11-25 01:06:46,823 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:06:46,823 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7661 states and 8532 transitions.
[2020-11-25 01:06:46,831 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:46,831 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:46,831 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:46,833 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:46,833 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:46,839 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:46,839 INFO  L82        PathProgramCache]: Analyzing trace with hash -1543285468, now seen corresponding path program 1 times
[2020-11-25 01:06:46,840 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:46,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:47,098 INFO  L134       CoverageAnalysis]: Checked inductivity of 899 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 899 trivial. 0 not checked.
[2020-11-25 01:06:47,098 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:06:47,098 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:06:47,098 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:47,098 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:06:47,099 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:06:47,099 INFO  L87              Difference]: Start difference. First operand 7661 states and 8532 transitions. cyclomatic complexity: 881 Second operand 4 states.
[2020-11-25 01:06:47,434 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:47,434 INFO  L93              Difference]: Finished difference Result 9395 states and 10584 transitions.
[2020-11-25 01:06:47,434 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 01:06:47,434 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9395 states and 10584 transitions.
[2020-11-25 01:06:47,455 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:06:47,473 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9395 states to 8869 states and 10015 transitions.
[2020-11-25 01:06:47,473 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1841
[2020-11-25 01:06:47,474 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1898
[2020-11-25 01:06:47,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8869 states and 10015 transitions.
[2020-11-25 01:06:47,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:47,480 INFO  L728         BuchiCegarLoop]: Abstraction has 8869 states and 10015 transitions.
[2020-11-25 01:06:47,485 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8869 states and 10015 transitions.
[2020-11-25 01:06:47,525 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8869 to 7771.
[2020-11-25 01:06:47,525 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7771 states.
[2020-11-25 01:06:47,533 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7771 states to 7771 states and 8659 transitions.
[2020-11-25 01:06:47,533 INFO  L751         BuchiCegarLoop]: Abstraction has 7771 states and 8659 transitions.
[2020-11-25 01:06:47,533 INFO  L631         BuchiCegarLoop]: Abstraction has 7771 states and 8659 transitions.
[2020-11-25 01:06:47,533 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:06:47,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7771 states and 8659 transitions.
[2020-11-25 01:06:47,541 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:47,541 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:47,541 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:47,543 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:47,544 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:47,549 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:47,549 INFO  L82        PathProgramCache]: Analyzing trace with hash 1782666917, now seen corresponding path program 1 times
[2020-11-25 01:06:47,550 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:47,564 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:47,735 INFO  L134       CoverageAnalysis]: Checked inductivity of 922 backedges. 6 proven. 27 refuted. 0 times theorem prover too weak. 889 trivial. 0 not checked.
[2020-11-25 01:06:47,735 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:47,736 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:06:47,736 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:47,736 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:06:47,736 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:06:47,736 INFO  L87              Difference]: Start difference. First operand 7771 states and 8659 transitions. cyclomatic complexity: 898 Second operand 8 states.
[2020-11-25 01:06:47,870 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:47,870 INFO  L93              Difference]: Finished difference Result 7792 states and 8683 transitions.
[2020-11-25 01:06:47,870 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:06:47,870 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7792 states and 8683 transitions.
[2020-11-25 01:06:47,883 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:47,895 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7792 states to 7778 states and 8667 transitions.
[2020-11-25 01:06:47,895 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1805
[2020-11-25 01:06:47,896 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1805
[2020-11-25 01:06:47,896 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7778 states and 8667 transitions.
[2020-11-25 01:06:47,900 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:47,900 INFO  L728         BuchiCegarLoop]: Abstraction has 7778 states and 8667 transitions.
[2020-11-25 01:06:47,905 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7778 states and 8667 transitions.
[2020-11-25 01:06:47,936 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7778 to 7765.
[2020-11-25 01:06:47,936 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7765 states.
[2020-11-25 01:06:47,944 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7765 states to 7765 states and 8652 transitions.
[2020-11-25 01:06:47,944 INFO  L751         BuchiCegarLoop]: Abstraction has 7765 states and 8652 transitions.
[2020-11-25 01:06:47,944 INFO  L631         BuchiCegarLoop]: Abstraction has 7765 states and 8652 transitions.
[2020-11-25 01:06:47,944 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:06:47,944 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7765 states and 8652 transitions.
[2020-11-25 01:06:47,952 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:47,952 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:47,952 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:47,953 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:47,953 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:47,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:47,958 INFO  L82        PathProgramCache]: Analyzing trace with hash -1650253161, now seen corresponding path program 1 times
[2020-11-25 01:06:47,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:47,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:48,164 INFO  L134       CoverageAnalysis]: Checked inductivity of 922 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 898 trivial. 0 not checked.
[2020-11-25 01:06:48,165 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:48,165 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:06:48,165 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:48,165 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:06:48,166 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:06:48,166 INFO  L87              Difference]: Start difference. First operand 7765 states and 8652 transitions. cyclomatic complexity: 897 Second operand 8 states.
[2020-11-25 01:06:48,288 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:48,288 INFO  L93              Difference]: Finished difference Result 7786 states and 8676 transitions.
[2020-11-25 01:06:48,288 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:06:48,288 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7786 states and 8676 transitions.
[2020-11-25 01:06:48,301 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:48,313 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7786 states to 7765 states and 8651 transitions.
[2020-11-25 01:06:48,313 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1805
[2020-11-25 01:06:48,313 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1805
[2020-11-25 01:06:48,313 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7765 states and 8651 transitions.
[2020-11-25 01:06:48,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:48,317 INFO  L728         BuchiCegarLoop]: Abstraction has 7765 states and 8651 transitions.
[2020-11-25 01:06:48,322 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7765 states and 8651 transitions.
[2020-11-25 01:06:48,351 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7765 to 7765.
[2020-11-25 01:06:48,351 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7765 states.
[2020-11-25 01:06:48,358 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7765 states to 7765 states and 8651 transitions.
[2020-11-25 01:06:48,358 INFO  L751         BuchiCegarLoop]: Abstraction has 7765 states and 8651 transitions.
[2020-11-25 01:06:48,358 INFO  L631         BuchiCegarLoop]: Abstraction has 7765 states and 8651 transitions.
[2020-11-25 01:06:48,358 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:06:48,358 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7765 states and 8651 transitions.
[2020-11-25 01:06:48,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:48,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:48,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:48,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:48,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:48,372 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:48,372 INFO  L82        PathProgramCache]: Analyzing trace with hash -623608237, now seen corresponding path program 1 times
[2020-11-25 01:06:48,373 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:48,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:48,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 935 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 935 trivial. 0 not checked.
[2020-11-25 01:06:48,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:06:48,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 01:06:48,675 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:48,675 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 01:06:48,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 01:06:48,676 INFO  L87              Difference]: Start difference. First operand 7765 states and 8651 transitions. cyclomatic complexity: 896 Second operand 14 states.
[2020-11-25 01:06:53,790 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:06:53,790 INFO  L93              Difference]: Finished difference Result 8184 states and 9166 transitions.
[2020-11-25 01:06:53,790 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:06:53,790 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8184 states and 9166 transitions.
[2020-11-25 01:06:53,805 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:06:53,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8184 states to 8184 states and 9166 transitions.
[2020-11-25 01:06:53,819 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1903
[2020-11-25 01:06:53,820 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1903
[2020-11-25 01:06:53,820 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8184 states and 9166 transitions.
[2020-11-25 01:06:53,824 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:06:53,824 INFO  L728         BuchiCegarLoop]: Abstraction has 8184 states and 9166 transitions.
[2020-11-25 01:06:53,829 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8184 states and 9166 transitions.
[2020-11-25 01:06:53,867 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8184 to 7659.
[2020-11-25 01:06:53,867 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7659 states.
[2020-11-25 01:06:53,874 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7659 states to 7659 states and 8549 transitions.
[2020-11-25 01:06:53,874 INFO  L751         BuchiCegarLoop]: Abstraction has 7659 states and 8549 transitions.
[2020-11-25 01:06:53,874 INFO  L631         BuchiCegarLoop]: Abstraction has 7659 states and 8549 transitions.
[2020-11-25 01:06:53,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 01:06:53,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7659 states and 8549 transitions.
[2020-11-25 01:06:53,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:06:53,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:06:53,882 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:06:53,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:06:53,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:06:53,888 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:06:53,888 INFO  L82        PathProgramCache]: Analyzing trace with hash 1051578565, now seen corresponding path program 1 times
[2020-11-25 01:06:53,889 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:06:53,916 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:06:54,280 INFO  L134       CoverageAnalysis]: Checked inductivity of 935 backedges. 8 proven. 4 refuted. 0 times theorem prover too weak. 923 trivial. 0 not checked.
[2020-11-25 01:06:54,280 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:06:54,280 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 01:06:54,281 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:06:54,281 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 01:06:54,281 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 01:06:54,281 INFO  L87              Difference]: Start difference. First operand 7659 states and 8549 transitions. cyclomatic complexity: 905 Second operand 17 states.
[2020-11-25 01:07:00,017 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:00,017 INFO  L93              Difference]: Finished difference Result 7787 states and 8695 transitions.
[2020-11-25 01:07:00,017 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 01:07:00,017 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7787 states and 8695 transitions.
[2020-11-25 01:07:00,031 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:00,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7787 states to 7787 states and 8695 transitions.
[2020-11-25 01:07:00,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1661
[2020-11-25 01:07:00,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1661
[2020-11-25 01:07:00,045 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7787 states and 8695 transitions.
[2020-11-25 01:07:00,049 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:00,049 INFO  L728         BuchiCegarLoop]: Abstraction has 7787 states and 8695 transitions.
[2020-11-25 01:07:00,054 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7787 states and 8695 transitions.
[2020-11-25 01:07:00,087 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7787 to 7597.
[2020-11-25 01:07:00,087 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7597 states.
[2020-11-25 01:07:00,095 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7597 states to 7597 states and 8474 transitions.
[2020-11-25 01:07:00,095 INFO  L751         BuchiCegarLoop]: Abstraction has 7597 states and 8474 transitions.
[2020-11-25 01:07:00,095 INFO  L631         BuchiCegarLoop]: Abstraction has 7597 states and 8474 transitions.
[2020-11-25 01:07:00,095 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 01:07:00,095 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7597 states and 8474 transitions.
[2020-11-25 01:07:00,103 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:00,103 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:00,103 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:00,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:00,106 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:00,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:00,111 INFO  L82        PathProgramCache]: Analyzing trace with hash 1847226064, now seen corresponding path program 1 times
[2020-11-25 01:07:00,112 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:00,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:00,755 INFO  L134       CoverageAnalysis]: Checked inductivity of 1033 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 1023 trivial. 0 not checked.
[2020-11-25 01:07:00,756 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:00,756 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 01:07:00,756 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:00,756 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 01:07:00,756 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=489, Unknown=0, NotChecked=0, Total=552
[2020-11-25 01:07:00,757 INFO  L87              Difference]: Start difference. First operand 7597 states and 8474 transitions. cyclomatic complexity: 892 Second operand 24 states.
[2020-11-25 01:07:10,381 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:10,382 INFO  L93              Difference]: Finished difference Result 7807 states and 8764 transitions.
[2020-11-25 01:07:10,382 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:07:10,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7807 states and 8764 transitions.
[2020-11-25 01:07:10,396 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:10,410 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7807 states to 7807 states and 8764 transitions.
[2020-11-25 01:07:10,410 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1618
[2020-11-25 01:07:10,411 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1618
[2020-11-25 01:07:10,411 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7807 states and 8764 transitions.
[2020-11-25 01:07:10,415 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:10,415 INFO  L728         BuchiCegarLoop]: Abstraction has 7807 states and 8764 transitions.
[2020-11-25 01:07:10,420 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7807 states and 8764 transitions.
[2020-11-25 01:07:10,454 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7807 to 7725.
[2020-11-25 01:07:10,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7725 states.
[2020-11-25 01:07:10,462 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7725 states to 7725 states and 8673 transitions.
[2020-11-25 01:07:10,463 INFO  L751         BuchiCegarLoop]: Abstraction has 7725 states and 8673 transitions.
[2020-11-25 01:07:10,463 INFO  L631         BuchiCegarLoop]: Abstraction has 7725 states and 8673 transitions.
[2020-11-25 01:07:10,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 01:07:10,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7725 states and 8673 transitions.
[2020-11-25 01:07:10,470 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:10,470 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:10,470 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:10,472 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:10,472 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:10,477 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:10,478 INFO  L82        PathProgramCache]: Analyzing trace with hash 942312799, now seen corresponding path program 1 times
[2020-11-25 01:07:10,478 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:10,502 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:10,772 INFO  L134       CoverageAnalysis]: Checked inductivity of 1049 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1049 trivial. 0 not checked.
[2020-11-25 01:07:10,773 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:10,773 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:07:10,773 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:10,773 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:07:10,773 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:07:10,774 INFO  L87              Difference]: Start difference. First operand 7725 states and 8673 transitions. cyclomatic complexity: 970 Second operand 3 states.
[2020-11-25 01:07:10,842 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:10,842 INFO  L93              Difference]: Finished difference Result 7687 states and 8615 transitions.
[2020-11-25 01:07:10,842 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:07:10,842 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7687 states and 8615 transitions.
[2020-11-25 01:07:10,854 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:10,866 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7687 states to 7687 states and 8615 transitions.
[2020-11-25 01:07:10,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1581
[2020-11-25 01:07:10,867 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1581
[2020-11-25 01:07:10,867 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7687 states and 8615 transitions.
[2020-11-25 01:07:10,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:10,871 INFO  L728         BuchiCegarLoop]: Abstraction has 7687 states and 8615 transitions.
[2020-11-25 01:07:10,876 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7687 states and 8615 transitions.
[2020-11-25 01:07:10,905 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7687 to 7687.
[2020-11-25 01:07:10,905 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7687 states.
[2020-11-25 01:07:10,913 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7687 states to 7687 states and 8615 transitions.
[2020-11-25 01:07:10,913 INFO  L751         BuchiCegarLoop]: Abstraction has 7687 states and 8615 transitions.
[2020-11-25 01:07:10,913 INFO  L631         BuchiCegarLoop]: Abstraction has 7687 states and 8615 transitions.
[2020-11-25 01:07:10,913 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 01:07:10,913 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7687 states and 8615 transitions.
[2020-11-25 01:07:10,920 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:10,920 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:10,920 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:10,922 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:10,922 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:10,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:10,928 INFO  L82        PathProgramCache]: Analyzing trace with hash -1080831353, now seen corresponding path program 1 times
[2020-11-25 01:07:10,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:10,949 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:11,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 1094 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1093 trivial. 0 not checked.
[2020-11-25 01:07:11,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:11,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 01:07:11,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:11,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:07:11,202 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:07:11,202 INFO  L87              Difference]: Start difference. First operand 7687 states and 8615 transitions. cyclomatic complexity: 950 Second operand 8 states.
[2020-11-25 01:07:11,323 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:11,324 INFO  L93              Difference]: Finished difference Result 7798 states and 8730 transitions.
[2020-11-25 01:07:11,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:07:11,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7798 states and 8730 transitions.
[2020-11-25 01:07:11,336 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:11,348 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7798 states to 7675 states and 8599 transitions.
[2020-11-25 01:07:11,348 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1579
[2020-11-25 01:07:11,349 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1579
[2020-11-25 01:07:11,349 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7675 states and 8599 transitions.
[2020-11-25 01:07:11,353 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:11,353 INFO  L728         BuchiCegarLoop]: Abstraction has 7675 states and 8599 transitions.
[2020-11-25 01:07:11,358 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7675 states and 8599 transitions.
[2020-11-25 01:07:11,385 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7675 to 7675.
[2020-11-25 01:07:11,386 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7675 states.
[2020-11-25 01:07:11,393 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7675 states to 7675 states and 8599 transitions.
[2020-11-25 01:07:11,393 INFO  L751         BuchiCegarLoop]: Abstraction has 7675 states and 8599 transitions.
[2020-11-25 01:07:11,393 INFO  L631         BuchiCegarLoop]: Abstraction has 7675 states and 8599 transitions.
[2020-11-25 01:07:11,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 01:07:11,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7675 states and 8599 transitions.
[2020-11-25 01:07:11,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:11,400 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:11,400 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:11,402 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:11,402 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:11,407 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:11,408 INFO  L82        PathProgramCache]: Analyzing trace with hash 255251532, now seen corresponding path program 1 times
[2020-11-25 01:07:11,408 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:11,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:11,950 INFO  L134       CoverageAnalysis]: Checked inductivity of 1094 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1092 trivial. 0 not checked.
[2020-11-25 01:07:11,950 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:11,950 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 01:07:11,950 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:11,951 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 01:07:11,951 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=44, Invalid=298, Unknown=0, NotChecked=0, Total=342
[2020-11-25 01:07:11,951 INFO  L87              Difference]: Start difference. First operand 7675 states and 8599 transitions. cyclomatic complexity: 946 Second operand 19 states.
[2020-11-25 01:07:23,403 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:23,403 INFO  L93              Difference]: Finished difference Result 7749 states and 8679 transitions.
[2020-11-25 01:07:23,403 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 01:07:23,403 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7749 states and 8679 transitions.
[2020-11-25 01:07:23,418 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:23,430 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7749 states to 7733 states and 8663 transitions.
[2020-11-25 01:07:23,430 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1592
[2020-11-25 01:07:23,431 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1592
[2020-11-25 01:07:23,431 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7733 states and 8663 transitions.
[2020-11-25 01:07:23,435 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:23,435 INFO  L728         BuchiCegarLoop]: Abstraction has 7733 states and 8663 transitions.
[2020-11-25 01:07:23,440 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7733 states and 8663 transitions.
[2020-11-25 01:07:23,467 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7733 to 7616.
[2020-11-25 01:07:23,468 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7616 states.
[2020-11-25 01:07:23,474 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7616 states to 7616 states and 8495 transitions.
[2020-11-25 01:07:23,475 INFO  L751         BuchiCegarLoop]: Abstraction has 7616 states and 8495 transitions.
[2020-11-25 01:07:23,475 INFO  L631         BuchiCegarLoop]: Abstraction has 7616 states and 8495 transitions.
[2020-11-25 01:07:23,475 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 01:07:23,475 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7616 states and 8495 transitions.
[2020-11-25 01:07:23,482 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:23,482 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:23,482 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:23,483 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:23,484 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:23,489 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:23,490 INFO  L82        PathProgramCache]: Analyzing trace with hash -1438314547, now seen corresponding path program 1 times
[2020-11-25 01:07:23,490 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:23,514 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:23,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 1110 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1109 trivial. 0 not checked.
[2020-11-25 01:07:23,808 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:23,808 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:07:23,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:23,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:07:23,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:07:23,809 INFO  L87              Difference]: Start difference. First operand 7616 states and 8495 transitions. cyclomatic complexity: 897 Second operand 4 states.
[2020-11-25 01:07:23,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:23,851 INFO  L93              Difference]: Finished difference Result 7619 states and 8500 transitions.
[2020-11-25 01:07:23,851 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:07:23,851 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7619 states and 8500 transitions.
[2020-11-25 01:07:23,863 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:23,875 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7619 states to 7619 states and 8500 transitions.
[2020-11-25 01:07:23,875 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1560
[2020-11-25 01:07:23,875 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1560
[2020-11-25 01:07:23,875 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7619 states and 8500 transitions.
[2020-11-25 01:07:23,879 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:23,879 INFO  L728         BuchiCegarLoop]: Abstraction has 7619 states and 8500 transitions.
[2020-11-25 01:07:23,884 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7619 states and 8500 transitions.
[2020-11-25 01:07:23,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7619 to 7616.
[2020-11-25 01:07:23,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7616 states.
[2020-11-25 01:07:23,917 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7616 states to 7616 states and 8492 transitions.
[2020-11-25 01:07:23,917 INFO  L751         BuchiCegarLoop]: Abstraction has 7616 states and 8492 transitions.
[2020-11-25 01:07:23,918 INFO  L631         BuchiCegarLoop]: Abstraction has 7616 states and 8492 transitions.
[2020-11-25 01:07:23,918 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 01:07:23,918 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7616 states and 8492 transitions.
[2020-11-25 01:07:23,925 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:23,925 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:23,925 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:23,927 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:23,927 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:23,933 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:23,933 INFO  L82        PathProgramCache]: Analyzing trace with hash 933327685, now seen corresponding path program 1 times
[2020-11-25 01:07:23,934 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:23,959 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:24,679 INFO  L134       CoverageAnalysis]: Checked inductivity of 1110 backedges. 107 proven. 10 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 01:07:24,680 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:07:24,680 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:07:24,680 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:24,681 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:07:24,681 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:07:24,681 INFO  L87              Difference]: Start difference. First operand 7616 states and 8492 transitions. cyclomatic complexity: 894 Second operand 26 states.
[2020-11-25 01:07:38,048 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:38,048 INFO  L93              Difference]: Finished difference Result 7940 states and 8875 transitions.
[2020-11-25 01:07:38,048 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:07:38,048 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7940 states and 8875 transitions.
[2020-11-25 01:07:38,063 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:38,076 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7940 states to 7940 states and 8875 transitions.
[2020-11-25 01:07:38,076 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1702
[2020-11-25 01:07:38,077 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1702
[2020-11-25 01:07:38,077 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7940 states and 8875 transitions.
[2020-11-25 01:07:38,081 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:38,081 INFO  L728         BuchiCegarLoop]: Abstraction has 7940 states and 8875 transitions.
[2020-11-25 01:07:38,087 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7940 states and 8875 transitions.
[2020-11-25 01:07:38,116 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7940 to 7745.
[2020-11-25 01:07:38,116 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7745 states.
[2020-11-25 01:07:38,123 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7745 states to 7745 states and 8650 transitions.
[2020-11-25 01:07:38,124 INFO  L751         BuchiCegarLoop]: Abstraction has 7745 states and 8650 transitions.
[2020-11-25 01:07:38,124 INFO  L631         BuchiCegarLoop]: Abstraction has 7745 states and 8650 transitions.
[2020-11-25 01:07:38,124 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 01:07:38,124 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7745 states and 8650 transitions.
[2020-11-25 01:07:38,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:38,131 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:38,131 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:38,133 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:38,133 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:38,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:38,139 INFO  L82        PathProgramCache]: Analyzing trace with hash -1386461049, now seen corresponding path program 1 times
[2020-11-25 01:07:38,140 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:38,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:38,481 INFO  L134       CoverageAnalysis]: Checked inductivity of 1098 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1073 trivial. 0 not checked.
[2020-11-25 01:07:38,481 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:38,482 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:07:38,482 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:38,482 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:07:38,482 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:07:38,482 INFO  L87              Difference]: Start difference. First operand 7745 states and 8650 transitions. cyclomatic complexity: 926 Second operand 9 states.
[2020-11-25 01:07:38,622 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:38,623 INFO  L93              Difference]: Finished difference Result 7776 states and 8683 transitions.
[2020-11-25 01:07:38,623 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:07:38,623 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7776 states and 8683 transitions.
[2020-11-25 01:07:38,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:38,647 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7776 states to 7741 states and 8644 transitions.
[2020-11-25 01:07:38,648 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1572
[2020-11-25 01:07:38,648 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1572
[2020-11-25 01:07:38,648 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7741 states and 8644 transitions.
[2020-11-25 01:07:38,652 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:38,652 INFO  L728         BuchiCegarLoop]: Abstraction has 7741 states and 8644 transitions.
[2020-11-25 01:07:38,657 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7741 states and 8644 transitions.
[2020-11-25 01:07:38,686 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7741 to 7741.
[2020-11-25 01:07:38,686 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7741 states.
[2020-11-25 01:07:38,694 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7741 states to 7741 states and 8644 transitions.
[2020-11-25 01:07:38,694 INFO  L751         BuchiCegarLoop]: Abstraction has 7741 states and 8644 transitions.
[2020-11-25 01:07:38,694 INFO  L631         BuchiCegarLoop]: Abstraction has 7741 states and 8644 transitions.
[2020-11-25 01:07:38,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 01:07:38,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7741 states and 8644 transitions.
[2020-11-25 01:07:38,701 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:38,701 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:38,701 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:38,703 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:38,703 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:38,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:38,709 INFO  L82        PathProgramCache]: Analyzing trace with hash 1586839507, now seen corresponding path program 1 times
[2020-11-25 01:07:38,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:38,730 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:39,008 INFO  L134       CoverageAnalysis]: Checked inductivity of 1098 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1073 trivial. 0 not checked.
[2020-11-25 01:07:39,008 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:39,008 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:07:39,009 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:39,009 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:07:39,009 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:07:39,009 INFO  L87              Difference]: Start difference. First operand 7741 states and 8644 transitions. cyclomatic complexity: 924 Second operand 9 states.
[2020-11-25 01:07:39,132 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:39,132 INFO  L93              Difference]: Finished difference Result 7772 states and 8677 transitions.
[2020-11-25 01:07:39,132 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:07:39,132 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7772 states and 8677 transitions.
[2020-11-25 01:07:39,145 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:39,156 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7772 states to 7737 states and 8638 transitions.
[2020-11-25 01:07:39,156 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1572
[2020-11-25 01:07:39,157 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1572
[2020-11-25 01:07:39,157 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7737 states and 8638 transitions.
[2020-11-25 01:07:39,161 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:39,161 INFO  L728         BuchiCegarLoop]: Abstraction has 7737 states and 8638 transitions.
[2020-11-25 01:07:39,166 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7737 states and 8638 transitions.
[2020-11-25 01:07:39,194 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7737 to 7737.
[2020-11-25 01:07:39,195 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7737 states.
[2020-11-25 01:07:39,202 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7737 states to 7737 states and 8638 transitions.
[2020-11-25 01:07:39,202 INFO  L751         BuchiCegarLoop]: Abstraction has 7737 states and 8638 transitions.
[2020-11-25 01:07:39,202 INFO  L631         BuchiCegarLoop]: Abstraction has 7737 states and 8638 transitions.
[2020-11-25 01:07:39,202 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 01:07:39,202 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7737 states and 8638 transitions.
[2020-11-25 01:07:39,209 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:39,209 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:39,209 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:39,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:39,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:39,217 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:39,217 INFO  L82        PathProgramCache]: Analyzing trace with hash -648318092, now seen corresponding path program 1 times
[2020-11-25 01:07:39,218 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:39,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:39,549 INFO  L134       CoverageAnalysis]: Checked inductivity of 1098 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1073 trivial. 0 not checked.
[2020-11-25 01:07:39,549 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:39,549 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:07:39,549 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:39,550 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:07:39,550 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:07:39,550 INFO  L87              Difference]: Start difference. First operand 7737 states and 8638 transitions. cyclomatic complexity: 922 Second operand 9 states.
[2020-11-25 01:07:39,673 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:39,673 INFO  L93              Difference]: Finished difference Result 7755 states and 8657 transitions.
[2020-11-25 01:07:39,674 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:07:39,674 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7755 states and 8657 transitions.
[2020-11-25 01:07:39,686 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:39,698 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7755 states to 7717 states and 8615 transitions.
[2020-11-25 01:07:39,698 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1572
[2020-11-25 01:07:39,699 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1572
[2020-11-25 01:07:39,699 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7717 states and 8615 transitions.
[2020-11-25 01:07:39,703 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:39,703 INFO  L728         BuchiCegarLoop]: Abstraction has 7717 states and 8615 transitions.
[2020-11-25 01:07:39,708 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7717 states and 8615 transitions.
[2020-11-25 01:07:39,738 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7717 to 7717.
[2020-11-25 01:07:39,738 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7717 states.
[2020-11-25 01:07:39,745 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7717 states to 7717 states and 8615 transitions.
[2020-11-25 01:07:39,745 INFO  L751         BuchiCegarLoop]: Abstraction has 7717 states and 8615 transitions.
[2020-11-25 01:07:39,745 INFO  L631         BuchiCegarLoop]: Abstraction has 7717 states and 8615 transitions.
[2020-11-25 01:07:39,745 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 01:07:39,745 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7717 states and 8615 transitions.
[2020-11-25 01:07:39,752 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:39,752 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:39,752 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:39,754 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:39,754 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:39,760 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:39,760 INFO  L82        PathProgramCache]: Analyzing trace with hash -1001051663, now seen corresponding path program 1 times
[2020-11-25 01:07:39,761 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:39,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:40,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 1110 backedges. 1 proven. 8 refuted. 0 times theorem prover too weak. 1101 trivial. 0 not checked.
[2020-11-25 01:07:40,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:07:40,060 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 01:07:40,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:40,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:07:40,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:07:40,060 INFO  L87              Difference]: Start difference. First operand 7717 states and 8615 transitions. cyclomatic complexity: 919 Second operand 4 states.
[2020-11-25 01:07:40,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:40,136 INFO  L93              Difference]: Finished difference Result 7649 states and 8530 transitions.
[2020-11-25 01:07:40,136 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:07:40,136 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7649 states and 8530 transitions.
[2020-11-25 01:07:40,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:40,159 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7649 states to 7565 states and 8430 transitions.
[2020-11-25 01:07:40,159 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1572
[2020-11-25 01:07:40,160 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1572
[2020-11-25 01:07:40,160 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7565 states and 8430 transitions.
[2020-11-25 01:07:40,164 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:40,164 INFO  L728         BuchiCegarLoop]: Abstraction has 7565 states and 8430 transitions.
[2020-11-25 01:07:40,169 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7565 states and 8430 transitions.
[2020-11-25 01:07:40,197 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7565 to 7559.
[2020-11-25 01:07:40,197 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7559 states.
[2020-11-25 01:07:40,204 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7559 states to 7559 states and 8422 transitions.
[2020-11-25 01:07:40,204 INFO  L751         BuchiCegarLoop]: Abstraction has 7559 states and 8422 transitions.
[2020-11-25 01:07:40,204 INFO  L631         BuchiCegarLoop]: Abstraction has 7559 states and 8422 transitions.
[2020-11-25 01:07:40,204 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 01:07:40,204 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7559 states and 8422 transitions.
[2020-11-25 01:07:40,211 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:40,211 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:40,211 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:40,212 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:40,213 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8264]   CALL        call __var_68 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8264]   RET         call __var_68 := FreshRefGenerator__success();
[L8265]   COND FALSE  !(revert)
[L8268]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8269]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8270]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8271]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_68;
[L8272]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:40,217 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:40,217 INFO  L82        PathProgramCache]: Analyzing trace with hash 1882854068, now seen corresponding path program 1 times
[2020-11-25 01:07:40,218 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:40,243 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:40,524 INFO  L134       CoverageAnalysis]: Checked inductivity of 1110 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1109 trivial. 0 not checked.
[2020-11-25 01:07:40,524 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:40,524 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:07:40,525 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:40,525 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:07:40,525 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:07:40,525 INFO  L87              Difference]: Start difference. First operand 7559 states and 8422 transitions. cyclomatic complexity: 884 Second operand 3 states.
[2020-11-25 01:07:40,581 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:40,581 INFO  L93              Difference]: Finished difference Result 7571 states and 8438 transitions.
[2020-11-25 01:07:40,581 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:07:40,581 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7571 states and 8438 transitions.
[2020-11-25 01:07:40,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:40,603 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7571 states to 7571 states and 8438 transitions.
[2020-11-25 01:07:40,603 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1572
[2020-11-25 01:07:40,604 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1572
[2020-11-25 01:07:40,604 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7571 states and 8438 transitions.
[2020-11-25 01:07:40,608 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:40,608 INFO  L728         BuchiCegarLoop]: Abstraction has 7571 states and 8438 transitions.
[2020-11-25 01:07:40,613 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7571 states and 8438 transitions.
[2020-11-25 01:07:40,640 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7571 to 7551.
[2020-11-25 01:07:40,641 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7551 states.
[2020-11-25 01:07:40,648 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7551 states to 7551 states and 8410 transitions.
[2020-11-25 01:07:40,648 INFO  L751         BuchiCegarLoop]: Abstraction has 7551 states and 8410 transitions.
[2020-11-25 01:07:40,648 INFO  L631         BuchiCegarLoop]: Abstraction has 7551 states and 8410 transitions.
[2020-11-25 01:07:40,648 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 01:07:40,648 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7551 states and 8410 transitions.
[2020-11-25 01:07:40,655 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:40,655 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:40,655 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:40,656 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:40,657 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:40,662 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:40,662 INFO  L82        PathProgramCache]: Analyzing trace with hash -2142883471, now seen corresponding path program 1 times
[2020-11-25 01:07:40,663 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:40,687 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:40,973 INFO  L134       CoverageAnalysis]: Checked inductivity of 1110 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1110 trivial. 0 not checked.
[2020-11-25 01:07:40,973 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:07:40,973 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:07:40,973 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:40,974 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:07:40,974 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:07:40,974 INFO  L87              Difference]: Start difference. First operand 7551 states and 8410 transitions. cyclomatic complexity: 880 Second operand 6 states.
[2020-11-25 01:07:42,263 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:42,263 INFO  L93              Difference]: Finished difference Result 7632 states and 8501 transitions.
[2020-11-25 01:07:42,263 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:07:42,263 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7632 states and 8501 transitions.
[2020-11-25 01:07:42,276 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:42,288 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7632 states to 7632 states and 8501 transitions.
[2020-11-25 01:07:42,288 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1642
[2020-11-25 01:07:42,289 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1642
[2020-11-25 01:07:42,289 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7632 states and 8501 transitions.
[2020-11-25 01:07:42,292 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:42,293 INFO  L728         BuchiCegarLoop]: Abstraction has 7632 states and 8501 transitions.
[2020-11-25 01:07:42,298 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7632 states and 8501 transitions.
[2020-11-25 01:07:42,323 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7632 to 7490.
[2020-11-25 01:07:42,323 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7490 states.
[2020-11-25 01:07:42,330 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7490 states to 7490 states and 8330 transitions.
[2020-11-25 01:07:42,330 INFO  L751         BuchiCegarLoop]: Abstraction has 7490 states and 8330 transitions.
[2020-11-25 01:07:42,330 INFO  L631         BuchiCegarLoop]: Abstraction has 7490 states and 8330 transitions.
[2020-11-25 01:07:42,330 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 01:07:42,330 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7490 states and 8330 transitions.
[2020-11-25 01:07:42,337 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:42,337 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:42,337 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:42,338 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:42,338 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:42,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:42,343 INFO  L82        PathProgramCache]: Analyzing trace with hash 1000635264, now seen corresponding path program 1 times
[2020-11-25 01:07:42,344 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:42,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:43,162 INFO  L134       CoverageAnalysis]: Checked inductivity of 1285 backedges. 195 proven. 14 refuted. 0 times theorem prover too weak. 1076 trivial. 0 not checked.
[2020-11-25 01:07:43,162 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:07:43,163 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:07:43,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:43,163 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:07:43,164 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:07:43,164 INFO  L87              Difference]: Start difference. First operand 7490 states and 8330 transitions. cyclomatic complexity: 859 Second operand 26 states.
[2020-11-25 01:07:55,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:07:55,362 INFO  L93              Difference]: Finished difference Result 7670 states and 8556 transitions.
[2020-11-25 01:07:55,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:07:55,363 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7670 states and 8556 transitions.
[2020-11-25 01:07:55,375 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:55,387 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7670 states to 7670 states and 8556 transitions.
[2020-11-25 01:07:55,387 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1680
[2020-11-25 01:07:55,388 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1680
[2020-11-25 01:07:55,388 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7670 states and 8556 transitions.
[2020-11-25 01:07:55,392 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:07:55,392 INFO  L728         BuchiCegarLoop]: Abstraction has 7670 states and 8556 transitions.
[2020-11-25 01:07:55,397 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7670 states and 8556 transitions.
[2020-11-25 01:07:55,422 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7670 to 7494.
[2020-11-25 01:07:55,422 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7494 states.
[2020-11-25 01:07:55,429 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7494 states to 7494 states and 8345 transitions.
[2020-11-25 01:07:55,430 INFO  L751         BuchiCegarLoop]: Abstraction has 7494 states and 8345 transitions.
[2020-11-25 01:07:55,430 INFO  L631         BuchiCegarLoop]: Abstraction has 7494 states and 8345 transitions.
[2020-11-25 01:07:55,430 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 01:07:55,430 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7494 states and 8345 transitions.
[2020-11-25 01:07:55,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:07:55,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:07:55,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:07:55,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:07:55,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND TRUE   choice == 16
[L12077]              gas := gas - 21000;
[L12078]  COND TRUE   gas >= 0
[L12079]              assume msgvalue_MSG == 0;
[L12080]  CALL        call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7455]   COND TRUE   DType[this] == BLY
[L7456]   CALL        call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6520]               __ret_0_ := _balances_HxERC20[this][owner_s640];
[L7456]   RET         call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7457]   COND FALSE  !(revert)
[L7463]               totalBalance_s1254 := totalBalance_s1254;
[L7464]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] == false
[L7465]   CALL        call __var_38 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7465]   RET         call __var_38 := FreshRefGenerator__success();
[L7466]   COND FALSE  !(revert)
[L7469]               assume Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7470]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] := true;
[L7471]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == zerointRefArr();
[L7472]               assume M_Ref_Ref[timelockList_BLY[this]][owner_s1254] == __var_38;
[L7473]               assume sum[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7475]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] > 0)
[L7512]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L12080]  RET         call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:07:55,443 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:07:55,443 INFO  L82        PathProgramCache]: Analyzing trace with hash 1991378730, now seen corresponding path program 1 times
[2020-11-25 01:07:55,444 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:07:55,471 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:07:56,257 INFO  L134       CoverageAnalysis]: Checked inductivity of 1285 backedges. 195 proven. 14 refuted. 0 times theorem prover too weak. 1076 trivial. 0 not checked.
[2020-11-25 01:07:56,257 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:07:56,257 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:07:56,257 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:07:56,258 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:07:56,258 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:07:56,258 INFO  L87              Difference]: Start difference. First operand 7494 states and 8345 transitions. cyclomatic complexity: 871 Second operand 26 states.
[2020-11-25 01:08:07,945 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:07,945 INFO  L93              Difference]: Finished difference Result 7662 states and 8557 transitions.
[2020-11-25 01:08:07,945 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:08:07,945 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7662 states and 8557 transitions.
[2020-11-25 01:08:07,959 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:08:07,971 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7662 states to 7662 states and 8557 transitions.
[2020-11-25 01:08:07,971 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1680
[2020-11-25 01:08:07,972 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1688
[2020-11-25 01:08:07,972 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7662 states and 8557 transitions.
[2020-11-25 01:08:07,976 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:07,976 INFO  L728         BuchiCegarLoop]: Abstraction has 7662 states and 8557 transitions.
[2020-11-25 01:08:07,981 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7662 states and 8557 transitions.
[2020-11-25 01:08:08,007 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7662 to 7494.
[2020-11-25 01:08:08,007 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7494 states.
[2020-11-25 01:08:08,014 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7494 states to 7494 states and 8343 transitions.
[2020-11-25 01:08:08,014 INFO  L751         BuchiCegarLoop]: Abstraction has 7494 states and 8343 transitions.
[2020-11-25 01:08:08,014 INFO  L631         BuchiCegarLoop]: Abstraction has 7494 states and 8343 transitions.
[2020-11-25 01:08:08,014 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 01:08:08,015 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7494 states and 8343 transitions.
[2020-11-25 01:08:08,021 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:08:08,021 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:08,021 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:08,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:08,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:08,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:08,029 INFO  L82        PathProgramCache]: Analyzing trace with hash -2002054062, now seen corresponding path program 1 times
[2020-11-25 01:08:08,029 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:08,056 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:08,467 INFO  L134       CoverageAnalysis]: Checked inductivity of 1269 backedges. 3 proven. 197 refuted. 0 times theorem prover too weak. 1069 trivial. 0 not checked.
[2020-11-25 01:08:08,467 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:08:08,468 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 01:08:08,468 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:08,468 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 01:08:08,468 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-11-25 01:08:08,468 INFO  L87              Difference]: Start difference. First operand 7494 states and 8343 transitions. cyclomatic complexity: 869 Second operand 11 states.
[2020-11-25 01:08:11,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:11,931 INFO  L93              Difference]: Finished difference Result 7514 states and 8392 transitions.
[2020-11-25 01:08:11,931 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 01:08:11,931 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7514 states and 8392 transitions.
[2020-11-25 01:08:11,946 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:11,958 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7514 states to 7514 states and 8392 transitions.
[2020-11-25 01:08:11,958 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1580
[2020-11-25 01:08:11,959 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1580
[2020-11-25 01:08:11,959 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7514 states and 8392 transitions.
[2020-11-25 01:08:11,963 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:11,963 INFO  L728         BuchiCegarLoop]: Abstraction has 7514 states and 8392 transitions.
[2020-11-25 01:08:11,968 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7514 states and 8392 transitions.
[2020-11-25 01:08:12,001 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7514 to 7514.
[2020-11-25 01:08:12,001 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7514 states.
[2020-11-25 01:08:12,008 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7514 states to 7514 states and 8392 transitions.
[2020-11-25 01:08:12,009 INFO  L751         BuchiCegarLoop]: Abstraction has 7514 states and 8392 transitions.
[2020-11-25 01:08:12,009 INFO  L631         BuchiCegarLoop]: Abstraction has 7514 states and 8392 transitions.
[2020-11-25 01:08:12,009 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 01:08:12,009 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7514 states and 8392 transitions.
[2020-11-25 01:08:12,015 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:12,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:12,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:12,017 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:12,017 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:12,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:12,023 INFO  L82        PathProgramCache]: Analyzing trace with hash -1509783367, now seen corresponding path program 1 times
[2020-11-25 01:08:12,024 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:12,051 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:12,406 INFO  L134       CoverageAnalysis]: Checked inductivity of 1292 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1287 trivial. 0 not checked.
[2020-11-25 01:08:12,406 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:08:12,406 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:08:12,407 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:12,407 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:08:12,407 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:08:12,407 INFO  L87              Difference]: Start difference. First operand 7514 states and 8392 transitions. cyclomatic complexity: 901 Second operand 7 states.
[2020-11-25 01:08:12,518 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:12,519 INFO  L93              Difference]: Finished difference Result 7568 states and 8444 transitions.
[2020-11-25 01:08:12,519 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:08:12,519 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7568 states and 8444 transitions.
[2020-11-25 01:08:12,531 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:12,542 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7568 states to 7504 states and 8378 transitions.
[2020-11-25 01:08:12,542 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1578
[2020-11-25 01:08:12,543 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1578
[2020-11-25 01:08:12,543 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7504 states and 8378 transitions.
[2020-11-25 01:08:12,547 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:12,547 INFO  L728         BuchiCegarLoop]: Abstraction has 7504 states and 8378 transitions.
[2020-11-25 01:08:12,552 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7504 states and 8378 transitions.
[2020-11-25 01:08:12,580 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7504 to 7504.
[2020-11-25 01:08:12,580 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7504 states.
[2020-11-25 01:08:12,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7504 states to 7504 states and 8378 transitions.
[2020-11-25 01:08:12,588 INFO  L751         BuchiCegarLoop]: Abstraction has 7504 states and 8378 transitions.
[2020-11-25 01:08:12,588 INFO  L631         BuchiCegarLoop]: Abstraction has 7504 states and 8378 transitions.
[2020-11-25 01:08:12,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 01:08:12,588 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7504 states and 8378 transitions.
[2020-11-25 01:08:12,595 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:12,595 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:12,595 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:12,597 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:12,597 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:12,602 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:12,603 INFO  L82        PathProgramCache]: Analyzing trace with hash -1269885493, now seen corresponding path program 1 times
[2020-11-25 01:08:12,603 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:12,632 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:13,506 INFO  L134       CoverageAnalysis]: Checked inductivity of 1292 backedges. 193 proven. 14 refuted. 0 times theorem prover too weak. 1085 trivial. 0 not checked.
[2020-11-25 01:08:13,506 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:08:13,506 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:08:13,506 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:13,507 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:08:13,507 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:08:13,507 INFO  L87              Difference]: Start difference. First operand 7504 states and 8378 transitions. cyclomatic complexity: 897 Second operand 26 states.
[2020-11-25 01:08:25,292 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:25,292 INFO  L93              Difference]: Finished difference Result 7684 states and 8599 transitions.
[2020-11-25 01:08:25,292 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:08:25,292 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7684 states and 8599 transitions.
[2020-11-25 01:08:25,353 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:25,367 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7684 states to 7684 states and 8599 transitions.
[2020-11-25 01:08:25,367 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1700
[2020-11-25 01:08:25,368 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1700
[2020-11-25 01:08:25,368 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7684 states and 8599 transitions.
[2020-11-25 01:08:25,372 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:25,372 INFO  L728         BuchiCegarLoop]: Abstraction has 7684 states and 8599 transitions.
[2020-11-25 01:08:25,376 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7684 states and 8599 transitions.
[2020-11-25 01:08:25,404 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7684 to 7516.
[2020-11-25 01:08:25,405 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7516 states.
[2020-11-25 01:08:25,412 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7516 states to 7516 states and 8387 transitions.
[2020-11-25 01:08:25,412 INFO  L751         BuchiCegarLoop]: Abstraction has 7516 states and 8387 transitions.
[2020-11-25 01:08:25,412 INFO  L631         BuchiCegarLoop]: Abstraction has 7516 states and 8387 transitions.
[2020-11-25 01:08:25,412 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 01:08:25,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7516 states and 8387 transitions.
[2020-11-25 01:08:25,419 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:25,419 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:25,419 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:25,420 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:25,420 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:25,441 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:25,441 INFO  L82        PathProgramCache]: Analyzing trace with hash -482273435, now seen corresponding path program 1 times
[2020-11-25 01:08:25,442 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:25,463 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:25,964 INFO  L134       CoverageAnalysis]: Checked inductivity of 1292 backedges. 3 proven. 195 refuted. 0 times theorem prover too weak. 1094 trivial. 0 not checked.
[2020-11-25 01:08:25,965 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:08:25,965 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 01:08:25,965 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:25,965 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 01:08:25,965 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 01:08:25,966 INFO  L87              Difference]: Start difference. First operand 7516 states and 8387 transitions. cyclomatic complexity: 894 Second operand 14 states.
[2020-11-25 01:08:30,742 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:30,742 INFO  L93              Difference]: Finished difference Result 7654 states and 8555 transitions.
[2020-11-25 01:08:30,743 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:08:30,743 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7654 states and 8555 transitions.
[2020-11-25 01:08:30,761 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:30,774 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7654 states to 7654 states and 8555 transitions.
[2020-11-25 01:08:30,774 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1677
[2020-11-25 01:08:30,775 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1677
[2020-11-25 01:08:30,775 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7654 states and 8555 transitions.
[2020-11-25 01:08:30,780 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:30,780 INFO  L728         BuchiCegarLoop]: Abstraction has 7654 states and 8555 transitions.
[2020-11-25 01:08:30,785 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7654 states and 8555 transitions.
[2020-11-25 01:08:30,813 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7654 to 7509.
[2020-11-25 01:08:30,813 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7509 states.
[2020-11-25 01:08:30,820 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7509 states to 7509 states and 8389 transitions.
[2020-11-25 01:08:30,820 INFO  L751         BuchiCegarLoop]: Abstraction has 7509 states and 8389 transitions.
[2020-11-25 01:08:30,820 INFO  L631         BuchiCegarLoop]: Abstraction has 7509 states and 8389 transitions.
[2020-11-25 01:08:30,821 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 01:08:30,821 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7509 states and 8389 transitions.
[2020-11-25 01:08:30,828 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:30,828 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:30,828 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:30,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:30,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND FALSE  !(DType[this] == Pausable)
[L10703]  COND TRUE   DType[this] == PauserRole
[L10704]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10704]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10705]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND TRUE   DType[this] == ERC20Pausable
[L10717]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10717]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10718]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:30,836 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:30,837 INFO  L82        PathProgramCache]: Analyzing trace with hash -1445186166, now seen corresponding path program 1 times
[2020-11-25 01:08:30,837 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:30,865 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:31,184 INFO  L134       CoverageAnalysis]: Checked inductivity of 1347 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1342 trivial. 0 not checked.
[2020-11-25 01:08:31,184 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:08:31,184 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:08:31,185 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:31,185 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:08:31,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:08:31,185 INFO  L87              Difference]: Start difference. First operand 7509 states and 8389 transitions. cyclomatic complexity: 903 Second operand 3 states.
[2020-11-25 01:08:31,237 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:31,237 INFO  L93              Difference]: Finished difference Result 7519 states and 8415 transitions.
[2020-11-25 01:08:31,237 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:08:31,237 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7519 states and 8415 transitions.
[2020-11-25 01:08:31,249 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:31,261 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7519 states to 7519 states and 8415 transitions.
[2020-11-25 01:08:31,261 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1578
[2020-11-25 01:08:31,261 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1578
[2020-11-25 01:08:31,262 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7519 states and 8415 transitions.
[2020-11-25 01:08:31,265 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:31,265 INFO  L728         BuchiCegarLoop]: Abstraction has 7519 states and 8415 transitions.
[2020-11-25 01:08:31,270 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7519 states and 8415 transitions.
[2020-11-25 01:08:31,297 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7519 to 7513.
[2020-11-25 01:08:31,297 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7513 states.
[2020-11-25 01:08:31,305 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7513 states to 7513 states and 8395 transitions.
[2020-11-25 01:08:31,305 INFO  L751         BuchiCegarLoop]: Abstraction has 7513 states and 8395 transitions.
[2020-11-25 01:08:31,305 INFO  L631         BuchiCegarLoop]: Abstraction has 7513 states and 8395 transitions.
[2020-11-25 01:08:31,305 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 01:08:31,305 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7513 states and 8395 transitions.
[2020-11-25 01:08:31,312 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:31,312 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:31,312 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:31,314 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:31,314 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND TRUE   DType[this] == ERC20Pausable
[L10694]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10694]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10695]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND TRUE   DType[this] == ERC20Pausable
[L10717]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10717]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10718]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:31,319 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:31,319 INFO  L82        PathProgramCache]: Analyzing trace with hash 2054894515, now seen corresponding path program 1 times
[2020-11-25 01:08:31,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:31,347 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:31,711 INFO  L134       CoverageAnalysis]: Checked inductivity of 1347 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1342 trivial. 0 not checked.
[2020-11-25 01:08:31,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:08:31,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:08:31,712 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:31,712 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:08:31,712 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:08:31,712 INFO  L87              Difference]: Start difference. First operand 7513 states and 8395 transitions. cyclomatic complexity: 905 Second operand 7 states.
[2020-11-25 01:08:31,827 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:31,827 INFO  L93              Difference]: Finished difference Result 7563 states and 8455 transitions.
[2020-11-25 01:08:31,827 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:08:31,828 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7563 states and 8455 transitions.
[2020-11-25 01:08:31,840 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:31,851 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7563 states to 7519 states and 8409 transitions.
[2020-11-25 01:08:31,852 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1578
[2020-11-25 01:08:31,852 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1578
[2020-11-25 01:08:31,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7519 states and 8409 transitions.
[2020-11-25 01:08:31,856 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:31,856 INFO  L728         BuchiCegarLoop]: Abstraction has 7519 states and 8409 transitions.
[2020-11-25 01:08:31,862 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7519 states and 8409 transitions.
[2020-11-25 01:08:31,890 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7519 to 7519.
[2020-11-25 01:08:31,891 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7519 states.
[2020-11-25 01:08:31,898 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7519 states to 7519 states and 8409 transitions.
[2020-11-25 01:08:31,898 INFO  L751         BuchiCegarLoop]: Abstraction has 7519 states and 8409 transitions.
[2020-11-25 01:08:31,898 INFO  L631         BuchiCegarLoop]: Abstraction has 7519 states and 8409 transitions.
[2020-11-25 01:08:31,898 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 01:08:31,898 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7519 states and 8409 transitions.
[2020-11-25 01:08:31,905 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:31,905 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:31,905 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:31,907 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:31,907 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND FALSE  !(DType[this] == Pausable)
[L10703]  COND TRUE   DType[this] == PauserRole
[L10704]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10704]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10705]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND FALSE  !(DType[this] == Pausable)
[L10726]  COND TRUE   DType[this] == PauserRole
[L10727]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10727]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10728]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:31,913 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:31,913 INFO  L82        PathProgramCache]: Analyzing trace with hash 2060227183, now seen corresponding path program 1 times
[2020-11-25 01:08:31,914 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:31,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:32,282 INFO  L134       CoverageAnalysis]: Checked inductivity of 1347 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1342 trivial. 0 not checked.
[2020-11-25 01:08:32,282 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:08:32,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:08:32,283 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:32,283 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:08:32,283 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:08:32,283 INFO  L87              Difference]: Start difference. First operand 7519 states and 8409 transitions. cyclomatic complexity: 913 Second operand 7 states.
[2020-11-25 01:08:32,404 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:32,404 INFO  L93              Difference]: Finished difference Result 7571 states and 8475 transitions.
[2020-11-25 01:08:32,404 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:08:32,404 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7571 states and 8475 transitions.
[2020-11-25 01:08:32,417 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:32,429 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7571 states to 7527 states and 8429 transitions.
[2020-11-25 01:08:32,429 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1578
[2020-11-25 01:08:32,430 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1578
[2020-11-25 01:08:32,430 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7527 states and 8429 transitions.
[2020-11-25 01:08:32,434 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:32,434 INFO  L728         BuchiCegarLoop]: Abstraction has 7527 states and 8429 transitions.
[2020-11-25 01:08:32,439 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7527 states and 8429 transitions.
[2020-11-25 01:08:32,468 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7527 to 7521.
[2020-11-25 01:08:32,468 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7521 states.
[2020-11-25 01:08:32,475 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7521 states to 7521 states and 8411 transitions.
[2020-11-25 01:08:32,475 INFO  L751         BuchiCegarLoop]: Abstraction has 7521 states and 8411 transitions.
[2020-11-25 01:08:32,475 INFO  L631         BuchiCegarLoop]: Abstraction has 7521 states and 8411 transitions.
[2020-11-25 01:08:32,475 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 01:08:32,476 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7521 states and 8411 transitions.
[2020-11-25 01:08:32,482 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:32,482 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:32,483 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:32,484 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:32,484 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:32,489 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:32,489 INFO  L82        PathProgramCache]: Analyzing trace with hash -1405701054, now seen corresponding path program 1 times
[2020-11-25 01:08:32,490 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:32,645 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:08:32,779 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:08:32,980 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:32,980 INFO  L82        PathProgramCache]: Analyzing trace with hash 705491834, now seen corresponding path program 1 times
[2020-11-25 01:08:32,981 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:32,983 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:32,989 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:08:32,989 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:08:32,989 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:08:32,989 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 01:08:32,989 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:08:32,990 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:08:32,990 INFO  L87              Difference]: Start difference. First operand 7521 states and 8411 transitions. cyclomatic complexity: 913 Second operand 4 states.
[2020-11-25 01:08:33,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:33,559 INFO  L93              Difference]: Finished difference Result 7505 states and 8399 transitions.
[2020-11-25 01:08:33,559 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:08:33,559 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7505 states and 8399 transitions.
[2020-11-25 01:08:33,581 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:08:33,597 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7505 states to 7505 states and 8399 transitions.
[2020-11-25 01:08:33,597 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1479
[2020-11-25 01:08:33,597 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1479
[2020-11-25 01:08:33,597 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7505 states and 8399 transitions.
[2020-11-25 01:08:33,602 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:33,602 INFO  L728         BuchiCegarLoop]: Abstraction has 7505 states and 8399 transitions.
[2020-11-25 01:08:33,608 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7505 states and 8399 transitions.
[2020-11-25 01:08:33,641 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7505 to 7279.
[2020-11-25 01:08:33,641 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7279 states.
[2020-11-25 01:08:33,649 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7279 states to 7279 states and 8056 transitions.
[2020-11-25 01:08:33,649 INFO  L751         BuchiCegarLoop]: Abstraction has 7279 states and 8056 transitions.
[2020-11-25 01:08:33,649 INFO  L631         BuchiCegarLoop]: Abstraction has 7279 states and 8056 transitions.
[2020-11-25 01:08:33,649 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 01:08:33,649 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7279 states and 8056 transitions.
[2020-11-25 01:08:33,657 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:08:33,658 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:33,658 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:33,659 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:33,659 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:33,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:33,665 INFO  L82        PathProgramCache]: Analyzing trace with hash -1405701054, now seen corresponding path program 2 times
[2020-11-25 01:08:33,665 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:33,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:08:33,910 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:08:34,065 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:34,065 INFO  L82        PathProgramCache]: Analyzing trace with hash -1301719589, now seen corresponding path program 1 times
[2020-11-25 01:08:34,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:34,086 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:08:34,106 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:08:34,133 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:34,133 INFO  L82        PathProgramCache]: Analyzing trace with hash -1077152420, now seen corresponding path program 1 times
[2020-11-25 01:08:34,135 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:34,221 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:36,134 INFO  L134       CoverageAnalysis]: Checked inductivity of 1562 backedges. 203 proven. 81 refuted. 0 times theorem prover too weak. 1278 trivial. 0 not checked.
[2020-11-25 01:08:36,134 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:08:36,135 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 01:08:36,138 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 01:08:36,138 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=131, Invalid=1201, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 01:08:36,139 INFO  L87              Difference]: Start difference. First operand 7279 states and 8056 transitions. cyclomatic complexity: 800 Second operand 37 states.
[2020-11-25 01:08:56,956 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:56,956 INFO  L93              Difference]: Finished difference Result 7455 states and 8308 transitions.
[2020-11-25 01:08:56,956 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 01:08:56,956 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7455 states and 8308 transitions.
[2020-11-25 01:08:56,970 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:08:56,983 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7455 states to 7455 states and 8308 transitions.
[2020-11-25 01:08:56,983 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1587
[2020-11-25 01:08:56,984 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1587
[2020-11-25 01:08:56,984 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7455 states and 8308 transitions.
[2020-11-25 01:08:56,988 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:56,988 INFO  L728         BuchiCegarLoop]: Abstraction has 7455 states and 8308 transitions.
[2020-11-25 01:08:56,993 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7455 states and 8308 transitions.
[2020-11-25 01:08:57,020 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7455 to 7356.
[2020-11-25 01:08:57,020 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7356 states.
[2020-11-25 01:08:57,028 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7356 states to 7356 states and 8176 transitions.
[2020-11-25 01:08:57,028 INFO  L751         BuchiCegarLoop]: Abstraction has 7356 states and 8176 transitions.
[2020-11-25 01:08:57,028 INFO  L631         BuchiCegarLoop]: Abstraction has 7356 states and 8176 transitions.
[2020-11-25 01:08:57,028 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 01:08:57,028 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7356 states and 8176 transitions.
[2020-11-25 01:08:57,035 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:08:57,035 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:57,035 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:57,037 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:57,037 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND FALSE  !(choice == 4)
[L12159]  COND FALSE  !(choice == 3)
[L12167]  COND TRUE   choice == 2
[L12168]              gas := gas - 21000;
[L12169]  COND TRUE   gas >= 0
[L12170]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12171]              assume msgvalue_MSG == 0;
[L12172]  CALL        call __ret_0_unlock := unlock~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7853]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND TRUE   DType[this] == Pausable
[L10722]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10722]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10723]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7853]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7854]   COND FALSE  !(revert)
[L7857]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1468] == false
[L7858]   CALL        call __var_51 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7858]   RET         call __var_51 := FreshRefGenerator__success();
[L7859]   COND FALSE  !(revert)
[L7862]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] == 0;
[L7863]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1468] := true;
[L7864]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] == zerointRefArr();
[L7865]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1468] == __var_51;
[L7866]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] == 0;
[L7868]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] > idx_s1468))
[L7872]   CALL        call __var_52 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L7872]   RET         call __var_52 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7873]   COND FALSE  !(revert)
[L7876]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12172]  RET         call __ret_0_unlock := unlock~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:57,042 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:57,042 INFO  L82        PathProgramCache]: Analyzing trace with hash -1856248591, now seen corresponding path program 1 times
[2020-11-25 01:08:57,043 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:57,070 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:57,430 INFO  L134       CoverageAnalysis]: Checked inductivity of 1315 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1310 trivial. 0 not checked.
[2020-11-25 01:08:57,430 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:08:57,430 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:08:57,431 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:57,431 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:08:57,431 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:08:57,431 INFO  L87              Difference]: Start difference. First operand 7356 states and 8176 transitions. cyclomatic complexity: 847 Second operand 3 states.
[2020-11-25 01:08:57,501 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:08:57,501 INFO  L93              Difference]: Finished difference Result 7356 states and 8174 transitions.
[2020-11-25 01:08:57,501 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:08:57,501 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7356 states and 8174 transitions.
[2020-11-25 01:08:57,513 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:08:57,524 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7356 states to 7356 states and 8174 transitions.
[2020-11-25 01:08:57,525 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1529
[2020-11-25 01:08:57,525 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1529
[2020-11-25 01:08:57,525 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7356 states and 8174 transitions.
[2020-11-25 01:08:57,529 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:08:57,529 INFO  L728         BuchiCegarLoop]: Abstraction has 7356 states and 8174 transitions.
[2020-11-25 01:08:57,534 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7356 states and 8174 transitions.
[2020-11-25 01:08:57,561 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7356 to 7356.
[2020-11-25 01:08:57,561 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7356 states.
[2020-11-25 01:08:57,568 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7356 states to 7356 states and 8174 transitions.
[2020-11-25 01:08:57,569 INFO  L751         BuchiCegarLoop]: Abstraction has 7356 states and 8174 transitions.
[2020-11-25 01:08:57,569 INFO  L631         BuchiCegarLoop]: Abstraction has 7356 states and 8174 transitions.
[2020-11-25 01:08:57,569 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 01:08:57,569 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7356 states and 8174 transitions.
[2020-11-25 01:08:57,575 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:08:57,575 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:08:57,575 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:08:57,577 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:08:57,577 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND FALSE  !(choice == 4)
[L12159]  COND FALSE  !(choice == 3)
[L12167]  COND TRUE   choice == 2
[L12168]              gas := gas - 21000;
[L12169]  COND TRUE   gas >= 0
[L12170]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12171]              assume msgvalue_MSG == 0;
[L12172]  CALL        call __ret_0_unlock := unlock~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7853]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7853]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7854]   COND FALSE  !(revert)
[L7857]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1468] == false
[L7858]   CALL        call __var_51 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7858]   RET         call __var_51 := FreshRefGenerator__success();
[L7859]   COND FALSE  !(revert)
[L7862]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] == 0;
[L7863]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1468] := true;
[L7864]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] == zerointRefArr();
[L7865]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1468] == __var_51;
[L7866]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] == 0;
[L7868]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1468]] > idx_s1468))
[L7872]   CALL        call __var_52 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L7872]   RET         call __var_52 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7873]   COND FALSE  !(revert)
[L7876]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12172]  RET         call __ret_0_unlock := unlock~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:08:57,582 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:08:57,582 INFO  L82        PathProgramCache]: Analyzing trace with hash -162313484, now seen corresponding path program 1 times
[2020-11-25 01:08:57,583 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:08:57,610 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:08:57,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 1315 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1310 trivial. 0 not checked.
[2020-11-25 01:08:57,967 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:08:57,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:08:57,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:08:57,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:08:57,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:08:57,968 INFO  L87              Difference]: Start difference. First operand 7356 states and 8174 transitions. cyclomatic complexity: 845 Second operand 7 states.
[2020-11-25 01:09:00,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:09:00,040 INFO  L93              Difference]: Finished difference Result 7416 states and 8350 transitions.
[2020-11-25 01:09:00,040 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:09:00,040 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7416 states and 8350 transitions.
[2020-11-25 01:09:00,056 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:09:00,070 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7416 states to 7394 states and 8324 transitions.
[2020-11-25 01:09:00,070 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1541
[2020-11-25 01:09:00,071 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1541
[2020-11-25 01:09:00,071 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7394 states and 8324 transitions.
[2020-11-25 01:09:00,076 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:09:00,076 INFO  L728         BuchiCegarLoop]: Abstraction has 7394 states and 8324 transitions.
[2020-11-25 01:09:00,081 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7394 states and 8324 transitions.
[2020-11-25 01:09:00,109 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7394 to 7326.
[2020-11-25 01:09:00,109 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7326 states.
[2020-11-25 01:09:00,117 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7326 states to 7326 states and 8139 transitions.
[2020-11-25 01:09:00,117 INFO  L751         BuchiCegarLoop]: Abstraction has 7326 states and 8139 transitions.
[2020-11-25 01:09:00,117 INFO  L631         BuchiCegarLoop]: Abstraction has 7326 states and 8139 transitions.
[2020-11-25 01:09:00,117 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 01:09:00,117 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7326 states and 8139 transitions.
[2020-11-25 01:09:00,123 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:09:00,123 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:09:00,123 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:09:00,125 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:09:00,125 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_BLY0 := false;
[L2]                  call_transferFrom_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND TRUE   choice == 19
[L12057]              gas := gas - 21000;
[L12058]  COND TRUE   gas >= 0
[L12059]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12060]              assume msgvalue_MSG == 0;
[L12061]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND FALSE  !(choice == 4)
[L12159]  COND TRUE   choice == 3
[L12160]              gas := gas - 21000;
[L12161]  COND TRUE   gas >= 0
[L12162]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12163]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12164]              assume msgvalue_MSG == 0;
[L12165]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7798]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7798]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7799]   COND FALSE  !(revert)
[L7802]   COND TRUE   DType[this] == BLY
[L7803]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7803]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7804]   COND FALSE  !(revert)
[L7810]   CALL        call __var_50 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7810]   RET         call __var_50 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7811]   COND FALSE  !(revert)
[L7814]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12165]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND TRUE   gas >= 0
[L11980]              assume msgvalue_MSG == 0;
[L11981]  CALL        call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]               __ret_0_ := owner_HxOwnable[this];
[L652]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L11981]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:09:00,130 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:09:00,130 INFO  L82        PathProgramCache]: Analyzing trace with hash 1755722145, now seen corresponding path program 1 times
[2020-11-25 01:09:00,131 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:09:00,272 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:09:00,435 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:09:00,544 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:09:00,544 INFO  L82        PathProgramCache]: Analyzing trace with hash 592043739, now seen corresponding path program 1 times
[2020-11-25 01:09:00,545 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:09:00,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:09:00,552 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:09:00,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:09:00,557 INFO  L82        PathProgramCache]: Analyzing trace with hash 2104166523, now seen corresponding path program 1 times
[2020-11-25 01:09:00,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:09:00,689 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:09:00,874 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 01:09:01,356 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification that was a NOOP. DAG size: 399
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 10513 to 21023
[2020-11-25 01:09:01,609 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification that was a NOOP. DAG size: 327
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 01:09:01,669 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 01:09:02,503 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:09:03,990 WARN  L188               SmtUtils]: Spent 1.16 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 01:09:04,159 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 01:09:04,409 WARN  L188               SmtUtils]: Spent 167.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 01:09:04,781 WARN  L188               SmtUtils]: Spent 321.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 01:09:04,999 WARN  L188               SmtUtils]: Spent 212.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 01:09:05,260 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification. DAG size of input: 313 DAG size of output: 273
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 01:09:05,425 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification that was a NOOP. DAG size: 421
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:09:05,920 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 153
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:09:06,274 WARN  L188               SmtUtils]: Spent 322.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 220
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 01:09:06,397 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 115
[2020-11-25 01:09:06,534 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 165
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:09:06,749 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 151
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 01:09:06,853 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 116
[2020-11-25 01:09:07,226 WARN  L188               SmtUtils]: Spent 371.00 ms on a formula simplification. DAG size of input: 332 DAG size of output: 327
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 01:09:07,378 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification that was a NOOP. DAG size: 309
[2020-11-25 01:09:07,803 WARN  L188               SmtUtils]: Spent 420.00 ms on a formula simplification. DAG size of input: 452 DAG size of output: 361
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 01:09:07,926 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification that was a NOOP. DAG size: 257
[2020-11-25 01:09:08,293 WARN  L188               SmtUtils]: Spent 365.00 ms on a formula simplification that was a NOOP. DAG size: 487
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 01:09:08,551 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification that was a NOOP. DAG size: 401
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 01:09:09,369 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 119 DAG size of output: 111
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 01:09:09,844 WARN  L188               SmtUtils]: Spent 343.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 205
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 01:09:10,123 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 174
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 01:09:10,572 WARN  L188               SmtUtils]: Spent 352.00 ms on a formula simplification. DAG size of input: 198 DAG size of output: 185
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
[2020-11-25 01:09:10,742 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 135
[2020-11-25 01:09:11,528 WARN  L188               SmtUtils]: Spent 785.00 ms on a formula simplification. DAG size of input: 365 DAG size of output: 360
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 01:09:12,196 WARN  L188               SmtUtils]: Spent 664.00 ms on a formula simplification that was a NOOP. DAG size: 337
[2020-11-25 01:09:13,593 WARN  L188               SmtUtils]: Spent 1.39 s on a formula simplification. DAG size of input: 434 DAG size of output: 389
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 01:09:14,044 WARN  L188               SmtUtils]: Spent 439.00 ms on a formula simplification that was a NOOP. DAG size: 277
[2020-11-25 01:09:14,834 WARN  L188               SmtUtils]: Spent 788.00 ms on a formula simplification that was a NOOP. DAG size: 503
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-25 01:09:15,741 WARN  L188               SmtUtils]: Spent 897.00 ms on a formula simplification that was a NOOP. DAG size: 410
[2020-11-25 01:09:41,139 WARN  L188               SmtUtils]: Spent 25.40 s on a formula simplification. DAG size of input: 1351 DAG size of output: 1317
Garbage collection #1: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #2: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #3: 2137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #4: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #5: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #6: 17077 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #7: 34147 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 34147 to 68281
Garbage collection #8: 68281 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 68281 to 118277
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 01:09:43,377 WARN  L188               SmtUtils]: Spent 2.15 s on a formula simplification that was a NOOP. DAG size: 511
[2020-11-25 01:09:46,322 WARN  L188               SmtUtils]: Spent 2.91 s on a formula simplification that was a NOOP. DAG size: 636
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 01:09:48,439 WARN  L188               SmtUtils]: Spent 2.08 s on a formula simplification that was a NOOP. DAG size: 511
[2020-11-25 01:09:54,425 WARN  L188               SmtUtils]: Spent 5.98 s on a formula simplification. DAG size of input: 638 DAG size of output: 637
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
[2020-11-25 01:09:57,346 WARN  L188               SmtUtils]: Spent 2.91 s on a formula simplification that was a NOOP. DAG size: 633
[2020-11-25 01:09:57,501 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:09:57,644 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:09:57,662 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:09:57 BasicIcfg
[2020-11-25 01:09:57,662 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:09:57,663 INFO  L168              Benchmark]: Toolchain (without parser) took 201767.35 ms. Allocated memory was 1.0 GB in the beginning and 6.2 GB in the end (delta: 5.2 GB). Free memory was 919.1 MB in the beginning and 1.9 GB in the end (delta: -953.2 MB). Peak memory consumption was 5.4 GB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,663 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,663 INFO  L168              Benchmark]: Boogie Preprocessor took 173.69 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.3 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,663 INFO  L168              Benchmark]: UtopiaSpecLang took 92.88 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,663 INFO  L168              Benchmark]: Boogie Printer took 31.86 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 876.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,664 INFO  L168              Benchmark]: RCFGBuilder took 1522.14 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.4 MB). Free memory was 876.2 MB in the beginning and 765.2 MB in the end (delta: 111.0 MB). Peak memory consumption was 183.3 MB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,664 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.53 ms. Allocated memory is still 1.1 GB. Free memory was 765.2 MB in the beginning and 755.4 MB in the end (delta: 9.8 MB). Peak memory consumption was 9.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,664 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3313.23 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 447.7 MB). Free memory was 755.4 MB in the beginning and 846.5 MB in the end (delta: -91.1 MB). Peak memory consumption was 356.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,664 INFO  L168              Benchmark]: BlockEncodingV2 took 316.41 ms. Allocated memory is still 1.5 GB. Free memory was 846.5 MB in the beginning and 688.7 MB in the end (delta: 157.8 MB). Peak memory consumption was 157.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,664 INFO  L168              Benchmark]: BuchiAutomizer took 196279.31 ms. Allocated memory was 1.5 GB in the beginning and 6.2 GB in the end (delta: 4.6 GB). Free memory was 688.7 MB in the beginning and 1.9 GB in the end (delta: -1.2 GB). Peak memory consumption was 4.6 GB. Max. memory is 15.3 GB.
[2020-11-25 01:09:57,666 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11432 locations, 20712 edges
  - StatisticsResult: Encoded RCFG
    11256 locations, 20253 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 173.69 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.3 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 92.88 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 31.86 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 876.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1522.14 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.4 MB). Free memory was 876.2 MB in the beginning and 765.2 MB in the end (delta: 111.0 MB). Peak memory consumption was 183.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.53 ms. Allocated memory is still 1.1 GB. Free memory was 765.2 MB in the beginning and 755.4 MB in the end (delta: 9.8 MB). Peak memory consumption was 9.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3313.23 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 447.7 MB). Free memory was 755.4 MB in the beginning and 846.5 MB in the end (delta: -91.1 MB). Peak memory consumption was 356.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 316.41 ms. Allocated memory is still 1.5 GB. Free memory was 846.5 MB in the beginning and 688.7 MB in the end (delta: 157.8 MB). Peak memory consumption was 157.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 196279.31 ms. Allocated memory was 1.5 GB in the beginning and 6.2 GB in the end (delta: 4.6 GB). Free memory was 688.7 MB in the beginning and 1.9 GB in the end (delta: -1.2 GB). Peak memory consumption was 4.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4604 locations, 6366 edges
  - StatisticsResult: BuchiProgram size
    11432 locations, 20712 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 39 terminating modules (39 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.39 modules have a trivial ranking function, the largest among these consists of 37 locations. The remainder module has 7326 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 196.0s and 40 iterations.  TraceHistogramMax:8. Analysis of lassos took 74.1s. Construction of modules took 92.5s. BÃ¼chi inclusion checks took 25.3s. Highest rank in rank-based complementation 0. Minimization of det autom 39. Minimization of nondet autom 0. Automata minimization 1.8s AutomataMinimizationTime, 39 MinimizatonAttempts, 5344 StatesRemovedByMinimization, 26 NontrivialMinimizations. Non-live state removal took 1.2s Buchi closure took 0.0s. Biggest automaton had 8537 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 292567 SDtfs, 200127 SDslu, 916937 SDs, 0 SdLazy, 1131946 SolverSat, 30084 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 92.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc1 concLT0 SILN0 SILU37 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639956) = (new BLY).gas(2).value(1)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639939});
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
HxERC20(115792089237316195423570985008687907853269984665640564039457584007913129639956).approve~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639952, spender : 115792089237316195423570985008687907853269984665640564039457584007913129639940, value : 115792089237316195423570985008687907853269984665640564039457584007913129639933});
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6602]               __var_14 := null;
[L6603]   COND FALSE  !(!(spender_s711 != null))
[L6607]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6608]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6609]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6610]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6611]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12061]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
BLY(115792089237316195423570985008687907853269984665640564039457584007913129639956).transferWithLock~address~uint256~uint256.gas(3979003)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639939, holder : 115792089237316195423570985008687907853269984665640564039457584007913129639952, value : 17, releaseTime : 3});
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7798]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7798]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7799]   COND FALSE  !(revert)
[L7802]   COND TRUE   DType[this] == BLY
[L7803]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7803]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7804]   COND FALSE  !(revert)
[L7810]   CALL        call __var_50 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7810]   RET         call __var_50 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7811]   COND FALSE  !(revert)
[L7814]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12165]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
BLY(115792089237316195423570985008687907853269984665640564039457584007913129639956).transferFrom~address~address~uint256.gas(3979004)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639940, from : 115792089237316195423570985008687907853269984665640564039457584007913129639952, to : 115792089237316195423570985008687907853269984665640564039457584007913129639939, value : 8});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 != to_s1322 && ((value_s1322 > _balances_HxERC20[this][from_s1322] || value_s1322 > _allowed_HxERC20[this][from_s1322][msgsender_MSG]) || _balances_HxERC20[this][to_s1322] + value_s1322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_BLY0 := true;
[L2]                  call_transferFrom_BLY0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);

Loop:
HxOwnable(115792089237316195423570985008687907853269984665640564039457584007913129639956).owner.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639941});
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]               __ret_0_ := owner_HxOwnable[this];
[L652]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L11981]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
