This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:45:22,674 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:45:22,675 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:45:22,686 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:45:22,686 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:45:22,688 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:45:22,689 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:45:22,691 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:45:22,692 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:45:22,693 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:45:22,694 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:45:22,694 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:45:22,695 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:45:22,696 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:45:22,697 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:45:22,697 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:45:22,698 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:45:22,700 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:45:22,702 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:45:22,704 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:45:22,705 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:45:22,706 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:45:22,708 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:45:22,708 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:45:22,709 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:45:22,709 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:45:22,710 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:45:22,711 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:45:22,711 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:45:22,711 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:45:22,712 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:45:22,713 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:45:22,713 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:45:22,714 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:45:22,714 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:45:22,714 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:45:22,715 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:45:22,715 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:45:22,715 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:45:22,716 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:45:22,717 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:45:22,717 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:45:22,724 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:45:22,724 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:45:22,725 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:45:22,725 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:45:22,725 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:45:22,726 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:45:22,726 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:45:22,726 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:45:22,726 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:45:22,726 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:45:22,726 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:45:22,726 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:45:22,726 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:45:22,726 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:45:22,727 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:45:22,728 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:45:22,728 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:45:22,728 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:45:22,748 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:45:22,759 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:45:22,761 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:45:22,762 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:45:22,763 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:45:22,763 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl
[2020-11-25 02:45:22,763 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl'
[2020-11-25 02:45:22,878 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:45:22,879 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:45:22,879 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:45:22,879 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:45:22,879 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:45:22,890 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:22,891 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:22,928 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:22,929 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:22,966 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:22,991 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:23,011 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:23,034 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:45:23,035 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:45:23,035 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:45:23,037 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:45:23,040 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/1) ...
[2020-11-25 02:45:23,068 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ONIT.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:45:23,074 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ONIT.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:45:23,081 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ONIT.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:45:23,091 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s1288 && value_s1288<=_balances_ERC20[this][msg.sender] ) && value_s1288>=0 ) && value_s1288<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1288]>=0 ) && _balances_ERC20[this][to_s1288]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:45:23,095 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && implementation_ONIT[this]==( old(implementation_ONIT[this]) ) ) && M_Ref_Ref[timelockList_ONIT[this]]==( old(M_Ref_Ref[timelockList_ONIT[this]]) ) ) && frozenAccount_ONIT[this]==( old(frozenAccount_ONIT[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && newOwner_Ownable[this]==( old(newOwner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ONIT>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]]
[2020-11-25 02:45:23,102 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ONIT.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:45:23,102 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ONIT0) ==> ( <>AP(success_transfer_ONIT0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:45:23,123 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:45:23 PropertyContainer
[2020-11-25 02:45:23,123 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:45:23,124 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:45:23,124 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:45:23,124 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:45:23,125 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/2) ...
[2020-11-25 02:45:23,125 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:45:23,125 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:45:23,151 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:45:23" (2/2) ...
[2020-11-25 02:45:23,152 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:45:23,152 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:45:23,152 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:45:23,152 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:45:23,153 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/2) ...
[2020-11-25 02:45:23,204 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:45:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:45:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:45:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:45:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:45:23,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:45:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,205 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:45:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:45:23,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:45:23,206 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:45:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:45:23,207 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:45:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:45:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 02:45:23,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 02:45:23,208 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 02:45:23,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 02:45:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 02:45:23,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 02:45:23,209 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 02:45:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 02:45:23,210 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 02:45:23,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 02:45:23,210 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 02:45:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 02:45:23,211 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:45:23,211 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:45:23,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:45:23,212 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:45:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:45:23,212 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:45:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:45:23,212 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 02:45:23,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 02:45:23,212 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:45:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:45:23,213 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:45:23,213 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:45:23,213 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:45:23,213 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:45:23,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:45:23,213 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:45:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:45:23,214 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:45:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:45:23,214 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:45:23,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:45:23,214 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:45:23,214 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:45:23,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:45:23,215 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:45:23,215 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:45:23,215 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:45:23,215 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:45:23,215 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:45:23,215 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:45:23,215 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:45:23,216 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:45:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:45:23,216 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:45:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:45:23,216 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:45:23,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:45:23,216 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:45:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:45:23,217 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:45:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:45:23,217 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:45:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:45:23,217 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:45:23,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:45:23,218 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:45:23,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:45:23,218 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:45:23,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:45:23,218 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:45:23,218 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:45:23,218 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:45:23,218 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:45:23,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:45:23,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:45:23,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:45:23,219 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:45:23,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:45:23,219 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:45:23,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:45:23,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:45:23,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:45:23,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:45:23,220 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:45:23,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:45:23,220 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:45:23,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:45:23,221 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:45:23,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:45:23,221 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:45:23,221 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 02:45:23,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 02:45:23,221 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 02:45:23,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 02:45:23,221 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 02:45:23,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 02:45:23,222 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:45:23,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:45:23,222 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 02:45:23,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 02:45:23,222 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:45:23,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:45:23,223 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:45:23,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:45:23,223 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:45:23,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:45:23,223 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 02:45:23,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 02:45:23,223 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 02:45:23,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 02:45:23,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:45:23,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:45:23,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:45:23,224 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 02:45:23,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 02:45:23,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:45:23,224 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 02:45:23,224 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 02:45:23,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 02:45:23,224 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:45:23,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 02:45:23,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:45:23,225 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:45:23,226 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 02:45:23,227 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,228 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 02:45:23,229 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:45:23,230 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:45:23,231 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:45:23,232 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:45:23,233 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:45:23,234 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:45:23,235 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:45:23,236 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:45:23,237 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:45:23,238 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:45:23,239 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 02:45:23,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:45:23,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:45:23,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:45:23,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 02:45:23,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:45:23,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:45:23,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:45:23,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:45:23,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:45:23,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:45:23,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:45:23,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:45:23,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 02:45:23,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:45:23,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:45:23,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:45:23,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:45:23,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 02:45:23,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:45:23,255 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:45:23,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:45:23,563 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:45:23,563 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:45:23,563 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:45:24,491 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:45:24,491 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 02:45:24,494 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:45:24 BoogieIcfgContainer
[2020-11-25 02:45:24,494 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:45:23" (2/2) ...
[2020-11-25 02:45:24,494 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:45:24,494 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@28df93b9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:45:24, skipping insertion in model container
[2020-11-25 02:45:24,494 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:45:24,495 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:45:24,495 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:45:24,496 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:45:24,496 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/3) ...
[2020-11-25 02:45:24,496 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@73ac348f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:45:24, skipping insertion in model container
[2020-11-25 02:45:24,496 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:45:23" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:45:24,530 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:45:24 NWAContainer
[2020-11-25 02:45:24,530 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:45:24,530 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:45:24,530 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:45:24,531 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:45:24,531 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:45:24" (3/4) ...
[2020-11-25 02:45:24,532 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1ed1d390 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:24, skipping insertion in model container
[2020-11-25 02:45:24,532 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:45:24" (4/4) ...
[2020-11-25 02:45:24,534 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:45:24,541 INFO  L110   BuchiProductObserver]: Initial RCFG 4668 locations, 6455 edges
[2020-11-25 02:45:24,541 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:45:24,555 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:45:27,843 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:45:27,857 INFO  L110   BuchiProductObserver]: BuchiProgram size 11592 locations, 20999 edges
[2020-11-25 02:45:27,857 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:27 BoogieIcfgContainer
[2020-11-25 02:45:27,857 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:45:27,857 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:45:27,857 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:45:27,859 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:45:27,859 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:27" (1/1) ...
[2020-11-25 02:45:28,052 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:45:28,055 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:45:28,078 INFO  L313           BlockEncoder]: Initial Icfg 11592 locations, 20999 edges
[2020-11-25 02:45:28,078 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:45:28,079 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:45:28,079 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:45:28,079 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:45:28,101 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 23 locations because of local infeasibility
[2020-11-25 02:45:28,117 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-25 02:45:28,140 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:45:28,147 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:45:28,154 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:45:28,155 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:45:28,160 INFO  L313           BlockEncoder]: Encoded RCFG 11446 locations, 20596 edges
[2020-11-25 02:45:28,160 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:45:28 BasicIcfg
[2020-11-25 02:45:28,160 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:45:28,161 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:45:28,161 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:45:28,162 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:45:28,163 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:45:28,163 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:45:22" (1/6) ...
[2020-11-25 02:45:28,164 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cd79623 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:45:28, skipping insertion in model container
[2020-11-25 02:45:28,164 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:45:28,164 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:45:23" (2/6) ...
[2020-11-25 02:45:28,164 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cd79623 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:45:28, skipping insertion in model container
[2020-11-25 02:45:28,164 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:45:28,165 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:45:24" (3/6) ...
[2020-11-25 02:45:28,165 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cd79623 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:45:28, skipping insertion in model container
[2020-11-25 02:45:28,165 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:45:28,165 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:45:24" (4/6) ...
[2020-11-25 02:45:28,165 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cd79623 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:45:28, skipping insertion in model container
[2020-11-25 02:45:28,165 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:45:28,165 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:27" (5/6) ...
[2020-11-25 02:45:28,166 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cd79623 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:45:28, skipping insertion in model container
[2020-11-25 02:45:28,166 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:45:28,166 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:45:28" (6/6) ...
[2020-11-25 02:45:28,167 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-self.bpl_BEv2
[2020-11-25 02:45:28,193 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:45:28,194 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:45:28,194 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:45:28,194 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:45:28,194 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:45:28,194 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:45:28,194 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:45:28,194 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:45:28,194 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:45:28,312 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11446 states.
[2020-11-25 02:45:28,403 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:28,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:28,404 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:28,414 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:28,414 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:28,414 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:45:28,414 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11446 states.
[2020-11-25 02:45:28,466 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:28,466 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:28,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:28,469 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:28,469 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:28,487 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:28,487 INFO  L82        PathProgramCache]: Analyzing trace with hash 16844466, now seen corresponding path program 1 times
[2020-11-25 02:45:28,493 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:28,522 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:28,569 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:45:28,570 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:28,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:45:28,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:29,006 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:45:29,006 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:45:29,008 INFO  L87              Difference]: Start difference. First operand 11446 states. Second operand 4 states.
[2020-11-25 02:45:30,142 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:30,142 INFO  L93              Difference]: Finished difference Result 7352 states and 8606 transitions.
[2020-11-25 02:45:30,143 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:45:30,144 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7352 states and 8606 transitions.
[2020-11-25 02:45:30,186 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:30,227 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7352 states to 7352 states and 8606 transitions.
[2020-11-25 02:45:30,227 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:45:30,230 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1363
[2020-11-25 02:45:30,231 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7352 states and 8606 transitions.
[2020-11-25 02:45:30,246 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:30,246 INFO  L728         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:45:30,266 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7352 states and 8606 transitions.
[2020-11-25 02:45:30,356 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7352 to 7352.
[2020-11-25 02:45:30,357 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7352 states.
[2020-11-25 02:45:30,369 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7352 states to 7352 states and 8606 transitions.
[2020-11-25 02:45:30,370 INFO  L751         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:45:30,370 INFO  L631         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:45:30,370 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:45:30,370 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7352 states and 8606 transitions.
[2020-11-25 02:45:30,381 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:30,381 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:30,382 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:30,384 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:30,384 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:30,388 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:30,388 INFO  L82        PathProgramCache]: Analyzing trace with hash 1403150996, now seen corresponding path program 1 times
[2020-11-25 02:45:30,389 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:30,400 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:30,436 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:45:30,436 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:30,436 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:45:30,437 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:30,438 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:45:30,438 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:45:30,438 INFO  L87              Difference]: Start difference. First operand 7352 states and 8606 transitions. cyclomatic complexity: 1264 Second operand 3 states.
[2020-11-25 02:45:30,637 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:30,637 INFO  L93              Difference]: Finished difference Result 9378 states and 10959 transitions.
[2020-11-25 02:45:30,637 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:45:30,638 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9378 states and 10959 transitions.
[2020-11-25 02:45:30,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:45:30,709 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9378 states to 9378 states and 10959 transitions.
[2020-11-25 02:45:30,709 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1907
[2020-11-25 02:45:30,711 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1907
[2020-11-25 02:45:30,711 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9378 states and 10959 transitions.
[2020-11-25 02:45:30,721 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:30,721 INFO  L728         BuchiCegarLoop]: Abstraction has 9378 states and 10959 transitions.
[2020-11-25 02:45:30,731 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9378 states and 10959 transitions.
[2020-11-25 02:45:30,822 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9378 to 8182.
[2020-11-25 02:45:30,822 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8182 states.
[2020-11-25 02:45:30,833 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8182 states to 8182 states and 9513 transitions.
[2020-11-25 02:45:30,833 INFO  L751         BuchiCegarLoop]: Abstraction has 8182 states and 9513 transitions.
[2020-11-25 02:45:30,833 INFO  L631         BuchiCegarLoop]: Abstraction has 8182 states and 9513 transitions.
[2020-11-25 02:45:30,833 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:45:30,833 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8182 states and 9513 transitions.
[2020-11-25 02:45:30,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:30,844 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:30,844 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:30,846 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:30,847 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND TRUE   !(account_s164 != null)
[L5838]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:30,851 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:30,851 INFO  L82        PathProgramCache]: Analyzing trace with hash -1932598557, now seen corresponding path program 1 times
[2020-11-25 02:45:30,852 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:30,864 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:30,949 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:45:30,949 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:45:30,949 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:45:30,950 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:30,950 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:45:30,950 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:45:30,950 INFO  L87              Difference]: Start difference. First operand 8182 states and 9513 transitions. cyclomatic complexity: 1341 Second operand 9 states.
[2020-11-25 02:45:31,130 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:31,130 INFO  L93              Difference]: Finished difference Result 8228 states and 9588 transitions.
[2020-11-25 02:45:31,130 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:45:31,130 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8228 states and 9588 transitions.
[2020-11-25 02:45:31,152 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:31,180 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8228 states to 8228 states and 9588 transitions.
[2020-11-25 02:45:31,180 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1592
[2020-11-25 02:45:31,181 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1592
[2020-11-25 02:45:31,181 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8228 states and 9588 transitions.
[2020-11-25 02:45:31,189 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:31,189 INFO  L728         BuchiCegarLoop]: Abstraction has 8228 states and 9588 transitions.
[2020-11-25 02:45:31,197 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8228 states and 9588 transitions.
[2020-11-25 02:45:31,266 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8228 to 8219.
[2020-11-25 02:45:31,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8219 states.
[2020-11-25 02:45:31,277 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8219 states to 8219 states and 9572 transitions.
[2020-11-25 02:45:31,277 INFO  L751         BuchiCegarLoop]: Abstraction has 8219 states and 9572 transitions.
[2020-11-25 02:45:31,277 INFO  L631         BuchiCegarLoop]: Abstraction has 8219 states and 9572 transitions.
[2020-11-25 02:45:31,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:45:31,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8219 states and 9572 transitions.
[2020-11-25 02:45:31,289 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:31,289 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:31,289 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:31,292 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:31,292 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND TRUE   !(account_s218 != null)
[L5909]               revert := true;
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND TRUE   revert
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:31,296 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:31,296 INFO  L82        PathProgramCache]: Analyzing trace with hash 119329360, now seen corresponding path program 1 times
[2020-11-25 02:45:31,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:31,308 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:31,414 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:45:31,414 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:45:31,415 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:45:31,415 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:31,416 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:45:31,416 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:45:31,416 INFO  L87              Difference]: Start difference. First operand 8219 states and 9572 transitions. cyclomatic complexity: 1363 Second operand 10 states.
[2020-11-25 02:45:31,527 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:31,527 INFO  L93              Difference]: Finished difference Result 8279 states and 9663 transitions.
[2020-11-25 02:45:31,528 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:45:31,528 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8279 states and 9663 transitions.
[2020-11-25 02:45:31,543 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:31,561 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8279 states to 8279 states and 9663 transitions.
[2020-11-25 02:45:31,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1599
[2020-11-25 02:45:31,562 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1599
[2020-11-25 02:45:31,562 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8279 states and 9663 transitions.
[2020-11-25 02:45:31,567 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:31,567 INFO  L728         BuchiCegarLoop]: Abstraction has 8279 states and 9663 transitions.
[2020-11-25 02:45:31,574 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8279 states and 9663 transitions.
[2020-11-25 02:45:31,615 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8279 to 8226.
[2020-11-25 02:45:31,615 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8226 states.
[2020-11-25 02:45:31,623 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8226 states to 8226 states and 9580 transitions.
[2020-11-25 02:45:31,623 INFO  L751         BuchiCegarLoop]: Abstraction has 8226 states and 9580 transitions.
[2020-11-25 02:45:31,623 INFO  L631         BuchiCegarLoop]: Abstraction has 8226 states and 9580 transitions.
[2020-11-25 02:45:31,623 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:45:31,623 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8226 states and 9580 transitions.
[2020-11-25 02:45:31,631 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:31,631 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:31,631 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:31,632 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:31,632 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND TRUE   !!__var_2
[L5846]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:31,636 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:31,636 INFO  L82        PathProgramCache]: Analyzing trace with hash -765796154, now seen corresponding path program 1 times
[2020-11-25 02:45:31,637 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:31,646 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:31,682 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 02:45:31,682 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:31,682 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:45:31,683 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:31,683 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:45:31,683 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:45:31,683 INFO  L87              Difference]: Start difference. First operand 8226 states and 9580 transitions. cyclomatic complexity: 1364 Second operand 3 states.
[2020-11-25 02:45:31,797 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:31,797 INFO  L93              Difference]: Finished difference Result 9398 states and 10633 transitions.
[2020-11-25 02:45:31,797 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:45:31,797 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9398 states and 10633 transitions.
[2020-11-25 02:45:31,816 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:45:31,839 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9398 states to 8704 states and 9811 transitions.
[2020-11-25 02:45:31,839 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1698
[2020-11-25 02:45:31,840 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1784
[2020-11-25 02:45:31,840 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8704 states and 9811 transitions.
[2020-11-25 02:45:31,846 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:31,846 INFO  L728         BuchiCegarLoop]: Abstraction has 8704 states and 9811 transitions.
[2020-11-25 02:45:31,852 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8704 states and 9811 transitions.
[2020-11-25 02:45:31,892 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8704 to 7684.
[2020-11-25 02:45:31,892 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7684 states.
[2020-11-25 02:45:31,899 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7684 states to 7684 states and 8541 transitions.
[2020-11-25 02:45:31,899 INFO  L751         BuchiCegarLoop]: Abstraction has 7684 states and 8541 transitions.
[2020-11-25 02:45:31,899 INFO  L631         BuchiCegarLoop]: Abstraction has 7684 states and 8541 transitions.
[2020-11-25 02:45:31,899 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:45:31,899 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7684 states and 8541 transitions.
[2020-11-25 02:45:31,907 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:45:31,907 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:31,907 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:31,909 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:31,909 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:31,915 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:31,916 INFO  L82        PathProgramCache]: Analyzing trace with hash 1233548941, now seen corresponding path program 1 times
[2020-11-25 02:45:31,917 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:31,944 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:32,185 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:45:32,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:32,185 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 02:45:32,186 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:32,186 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:45:32,186 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:45:32,186 INFO  L87              Difference]: Start difference. First operand 7684 states and 8541 transitions. cyclomatic complexity: 867 Second operand 12 states.
[2020-11-25 02:45:38,402 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:38,403 INFO  L93              Difference]: Finished difference Result 12731 states and 14156 transitions.
[2020-11-25 02:45:38,403 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 02:45:38,403 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12731 states and 14156 transitions.
[2020-11-25 02:45:38,429 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 02:45:38,456 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12731 states to 12721 states and 14144 transitions.
[2020-11-25 02:45:38,456 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2534
[2020-11-25 02:45:38,457 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2534
[2020-11-25 02:45:38,458 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12721 states and 14144 transitions.
[2020-11-25 02:45:38,465 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:38,465 INFO  L728         BuchiCegarLoop]: Abstraction has 12721 states and 14144 transitions.
[2020-11-25 02:45:38,472 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12721 states and 14144 transitions.
[2020-11-25 02:45:38,551 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12721 to 10585.
[2020-11-25 02:45:38,551 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10585 states.
[2020-11-25 02:45:38,565 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10585 states to 10585 states and 11987 transitions.
[2020-11-25 02:45:38,565 INFO  L751         BuchiCegarLoop]: Abstraction has 10585 states and 11987 transitions.
[2020-11-25 02:45:38,565 INFO  L631         BuchiCegarLoop]: Abstraction has 10585 states and 11987 transitions.
[2020-11-25 02:45:38,565 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:45:38,565 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10585 states and 11987 transitions.
[2020-11-25 02:45:38,581 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:45:38,582 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:38,582 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:38,585 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:38,586 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10892]              revert := true;
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10892]              revert := true;
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:38,592 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:38,592 INFO  L82        PathProgramCache]: Analyzing trace with hash 20844583, now seen corresponding path program 1 times
[2020-11-25 02:45:38,593 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:38,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:38,897 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 924 trivial. 0 not checked.
[2020-11-25 02:45:38,897 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:38,897 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 02:45:38,897 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:38,898 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:45:38,898 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=183, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:45:38,898 INFO  L87              Difference]: Start difference. First operand 10585 states and 11987 transitions. cyclomatic complexity: 1418 Second operand 15 states.
[2020-11-25 02:45:47,271 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:47,271 INFO  L93              Difference]: Finished difference Result 17859 states and 20604 transitions.
[2020-11-25 02:45:47,271 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 02:45:47,272 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17859 states and 20604 transitions.
[2020-11-25 02:45:47,312 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-11-25 02:45:47,369 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17859 states to 17846 states and 20589 transitions.
[2020-11-25 02:45:47,369 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3573
[2020-11-25 02:45:47,371 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3573
[2020-11-25 02:45:47,371 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17846 states and 20589 transitions.
[2020-11-25 02:45:47,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:47,383 INFO  L728         BuchiCegarLoop]: Abstraction has 17846 states and 20589 transitions.
[2020-11-25 02:45:47,391 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17846 states and 20589 transitions.
[2020-11-25 02:45:47,504 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17846 to 16385.
[2020-11-25 02:45:47,504 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16385 states.
[2020-11-25 02:45:47,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16385 states to 16385 states and 19054 transitions.
[2020-11-25 02:45:47,528 INFO  L751         BuchiCegarLoop]: Abstraction has 16385 states and 19054 transitions.
[2020-11-25 02:45:47,528 INFO  L631         BuchiCegarLoop]: Abstraction has 16385 states and 19054 transitions.
[2020-11-25 02:45:47,528 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:45:47,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16385 states and 19054 transitions.
[2020-11-25 02:45:47,545 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 02:45:47,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:47,546 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:47,547 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:47,548 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6642]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6643]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND TRUE   !(to_s904 != null)
[L6868]               revert := true;
[L6643]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6644]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:47,553 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:47,553 INFO  L82        PathProgramCache]: Analyzing trace with hash -596922894, now seen corresponding path program 1 times
[2020-11-25 02:45:47,554 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:47,567 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:47,728 INFO  L134       CoverageAnalysis]: Checked inductivity of 906 backedges. 0 proven. 33 refuted. 0 times theorem prover too weak. 873 trivial. 0 not checked.
[2020-11-25 02:45:47,728 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:45:47,728 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:45:47,728 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:47,729 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:45:47,729 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:45:47,729 INFO  L87              Difference]: Start difference. First operand 16385 states and 19054 transitions. cyclomatic complexity: 2699 Second operand 8 states.
[2020-11-25 02:45:49,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:49,605 INFO  L93              Difference]: Finished difference Result 19420 states and 22657 transitions.
[2020-11-25 02:45:49,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:45:49,605 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19420 states and 22657 transitions.
[2020-11-25 02:45:49,699 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:45:49,747 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19420 states to 19403 states and 22637 transitions.
[2020-11-25 02:45:49,747 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3906
[2020-11-25 02:45:49,749 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3906
[2020-11-25 02:45:49,749 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19403 states and 22637 transitions.
[2020-11-25 02:45:49,762 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:49,762 INFO  L728         BuchiCegarLoop]: Abstraction has 19403 states and 22637 transitions.
[2020-11-25 02:45:49,770 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19403 states and 22637 transitions.
[2020-11-25 02:45:49,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19403 to 19265.
[2020-11-25 02:45:49,879 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19265 states.
[2020-11-25 02:45:49,906 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19265 states to 19265 states and 22498 transitions.
[2020-11-25 02:45:49,906 INFO  L751         BuchiCegarLoop]: Abstraction has 19265 states and 22498 transitions.
[2020-11-25 02:45:49,906 INFO  L631         BuchiCegarLoop]: Abstraction has 19265 states and 22498 transitions.
[2020-11-25 02:45:49,906 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:45:49,907 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19265 states and 22498 transitions.
[2020-11-25 02:45:49,927 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:45:49,927 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:49,927 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:49,929 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:49,929 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:49,955 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:49,956 INFO  L82        PathProgramCache]: Analyzing trace with hash 472350425, now seen corresponding path program 1 times
[2020-11-25 02:45:49,957 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:49,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:50,145 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 6 proven. 19 refuted. 0 times theorem prover too weak. 857 trivial. 0 not checked.
[2020-11-25 02:45:50,145 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:45:50,145 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:45:50,145 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:50,146 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:45:50,146 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:45:50,146 INFO  L87              Difference]: Start difference. First operand 19265 states and 22498 transitions. cyclomatic complexity: 3273 Second operand 9 states.
[2020-11-25 02:45:51,780 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:51,780 INFO  L93              Difference]: Finished difference Result 19424 states and 22661 transitions.
[2020-11-25 02:45:51,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:45:51,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19424 states and 22661 transitions.
[2020-11-25 02:45:51,826 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:45:51,880 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19424 states to 19389 states and 22618 transitions.
[2020-11-25 02:45:51,880 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3906
[2020-11-25 02:45:51,882 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3906
[2020-11-25 02:45:51,882 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19389 states and 22618 transitions.
[2020-11-25 02:45:51,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:51,896 INFO  L728         BuchiCegarLoop]: Abstraction has 19389 states and 22618 transitions.
[2020-11-25 02:45:51,905 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19389 states and 22618 transitions.
[2020-11-25 02:45:52,022 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19389 to 19257.
[2020-11-25 02:45:52,022 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19257 states.
[2020-11-25 02:45:52,050 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19257 states to 19257 states and 22486 transitions.
[2020-11-25 02:45:52,051 INFO  L751         BuchiCegarLoop]: Abstraction has 19257 states and 22486 transitions.
[2020-11-25 02:45:52,051 INFO  L631         BuchiCegarLoop]: Abstraction has 19257 states and 22486 transitions.
[2020-11-25 02:45:52,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:45:52,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19257 states and 22486 transitions.
[2020-11-25 02:45:52,071 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:45:52,071 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:52,071 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:52,073 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:52,073 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10892]              revert := true;
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:52,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:52,079 INFO  L82        PathProgramCache]: Analyzing trace with hash 497505631, now seen corresponding path program 1 times
[2020-11-25 02:45:52,080 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:52,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:52,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 02:45:52,278 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:52,279 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:45:52,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:52,280 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:45:52,280 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:45:52,280 INFO  L87              Difference]: Start difference. First operand 19257 states and 22486 transitions. cyclomatic complexity: 3269 Second operand 4 states.
[2020-11-25 02:45:52,763 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:52,763 INFO  L93              Difference]: Finished difference Result 26775 states and 33720 transitions.
[2020-11-25 02:45:52,763 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:45:52,763 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26775 states and 33720 transitions.
[2020-11-25 02:45:52,856 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 152
[2020-11-25 02:45:52,971 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26775 states to 24995 states and 31768 transitions.
[2020-11-25 02:45:52,971 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4823
[2020-11-25 02:45:52,974 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4842
[2020-11-25 02:45:52,974 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24995 states and 31768 transitions.
[2020-11-25 02:45:52,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:52,999 INFO  L728         BuchiCegarLoop]: Abstraction has 24995 states and 31768 transitions.
[2020-11-25 02:45:53,009 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24995 states and 31768 transitions.
[2020-11-25 02:45:53,217 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24995 to 21201.
[2020-11-25 02:45:53,217 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21201 states.
[2020-11-25 02:45:53,258 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21201 states to 21201 states and 25542 transitions.
[2020-11-25 02:45:53,258 INFO  L751         BuchiCegarLoop]: Abstraction has 21201 states and 25542 transitions.
[2020-11-25 02:45:53,258 INFO  L631         BuchiCegarLoop]: Abstraction has 21201 states and 25542 transitions.
[2020-11-25 02:45:53,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:45:53,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21201 states and 25542 transitions.
[2020-11-25 02:45:53,288 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:45:53,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:53,288 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:53,290 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:53,291 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND TRUE   !(to_s904 != null)
[L6868]               revert := true;
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND TRUE   !(to_s904 != null)
[L6868]               revert := true;
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:53,296 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:53,296 INFO  L82        PathProgramCache]: Analyzing trace with hash 1653335854, now seen corresponding path program 1 times
[2020-11-25 02:45:53,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:53,316 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:53,491 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:45:53,491 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:53,491 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:45:53,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:53,492 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:45:53,492 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:45:53,492 INFO  L87              Difference]: Start difference. First operand 21201 states and 25542 transitions. cyclomatic complexity: 4381 Second operand 9 states.
[2020-11-25 02:45:53,698 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:53,698 INFO  L93              Difference]: Finished difference Result 21515 states and 25947 transitions.
[2020-11-25 02:45:53,699 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:45:53,699 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21515 states and 25947 transitions.
[2020-11-25 02:45:53,750 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:45:53,810 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21515 states to 21507 states and 25939 transitions.
[2020-11-25 02:45:53,810 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4477
[2020-11-25 02:45:53,812 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4477
[2020-11-25 02:45:53,813 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21507 states and 25939 transitions.
[2020-11-25 02:45:53,828 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:53,828 INFO  L728         BuchiCegarLoop]: Abstraction has 21507 states and 25939 transitions.
[2020-11-25 02:45:53,836 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21507 states and 25939 transitions.
[2020-11-25 02:45:53,967 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21507 to 21438.
[2020-11-25 02:45:53,967 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21438 states.
[2020-11-25 02:45:54,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21438 states to 21438 states and 25844 transitions.
[2020-11-25 02:45:54,003 INFO  L751         BuchiCegarLoop]: Abstraction has 21438 states and 25844 transitions.
[2020-11-25 02:45:54,003 INFO  L631         BuchiCegarLoop]: Abstraction has 21438 states and 25844 transitions.
[2020-11-25 02:45:54,003 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:45:54,003 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21438 states and 25844 transitions.
[2020-11-25 02:45:54,027 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:45:54,027 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:54,027 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:54,029 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:54,029 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:54,036 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:54,037 INFO  L82        PathProgramCache]: Analyzing trace with hash -1677434965, now seen corresponding path program 1 times
[2020-11-25 02:45:54,037 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:54,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:54,205 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 33 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 02:45:54,205 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:45:54,205 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:45:54,206 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:54,206 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:45:54,206 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:45:54,206 INFO  L87              Difference]: Start difference. First operand 21438 states and 25844 transitions. cyclomatic complexity: 4446 Second operand 7 states.
[2020-11-25 02:45:54,357 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:54,357 INFO  L93              Difference]: Finished difference Result 21461 states and 25872 transitions.
[2020-11-25 02:45:54,357 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:45:54,357 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21461 states and 25872 transitions.
[2020-11-25 02:45:54,409 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:45:54,473 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21461 states to 21444 states and 25852 transitions.
[2020-11-25 02:45:54,473 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4477
[2020-11-25 02:45:54,475 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4477
[2020-11-25 02:45:54,475 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21444 states and 25852 transitions.
[2020-11-25 02:45:54,491 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:54,491 INFO  L728         BuchiCegarLoop]: Abstraction has 21444 states and 25852 transitions.
[2020-11-25 02:45:54,499 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21444 states and 25852 transitions.
[2020-11-25 02:45:54,625 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21444 to 21444.
[2020-11-25 02:45:54,626 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21444 states.
[2020-11-25 02:45:54,661 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21444 states to 21444 states and 25852 transitions.
[2020-11-25 02:45:54,662 INFO  L751         BuchiCegarLoop]: Abstraction has 21444 states and 25852 transitions.
[2020-11-25 02:45:54,662 INFO  L631         BuchiCegarLoop]: Abstraction has 21444 states and 25852 transitions.
[2020-11-25 02:45:54,662 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:45:54,662 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21444 states and 25852 transitions.
[2020-11-25 02:45:54,685 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:45:54,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:54,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:54,687 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:54,687 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:54,692 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:54,692 INFO  L82        PathProgramCache]: Analyzing trace with hash -680471833, now seen corresponding path program 1 times
[2020-11-25 02:45:54,693 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:54,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:54,888 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 02:45:54,889 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:45:54,889 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:45:54,889 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:54,889 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:45:54,889 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:45:54,889 INFO  L87              Difference]: Start difference. First operand 21444 states and 25852 transitions. cyclomatic complexity: 4448 Second operand 8 states.
[2020-11-25 02:45:55,052 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:55,052 INFO  L93              Difference]: Finished difference Result 21472 states and 25883 transitions.
[2020-11-25 02:45:55,052 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:45:55,053 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21472 states and 25883 transitions.
[2020-11-25 02:45:55,103 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:45:55,166 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21472 states to 21451 states and 25859 transitions.
[2020-11-25 02:45:55,166 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4477
[2020-11-25 02:45:55,169 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4477
[2020-11-25 02:45:55,169 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21451 states and 25859 transitions.
[2020-11-25 02:45:55,184 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:55,184 INFO  L728         BuchiCegarLoop]: Abstraction has 21451 states and 25859 transitions.
[2020-11-25 02:45:55,193 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21451 states and 25859 transitions.
[2020-11-25 02:45:55,320 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21451 to 21444.
[2020-11-25 02:45:55,320 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21444 states.
[2020-11-25 02:45:55,356 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21444 states to 21444 states and 25851 transitions.
[2020-11-25 02:45:55,356 INFO  L751         BuchiCegarLoop]: Abstraction has 21444 states and 25851 transitions.
[2020-11-25 02:45:55,357 INFO  L631         BuchiCegarLoop]: Abstraction has 21444 states and 25851 transitions.
[2020-11-25 02:45:55,357 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:45:55,357 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21444 states and 25851 transitions.
[2020-11-25 02:45:55,380 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:45:55,380 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:55,380 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:55,382 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:55,382 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:55,386 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:55,387 INFO  L82        PathProgramCache]: Analyzing trace with hash 62035243, now seen corresponding path program 1 times
[2020-11-25 02:45:55,387 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:55,405 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:55,655 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:45:55,655 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:55,655 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 02:45:55,655 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:55,655 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 02:45:55,656 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=300, Unknown=0, NotChecked=0, Total=342
[2020-11-25 02:45:55,656 INFO  L87              Difference]: Start difference. First operand 21444 states and 25851 transitions. cyclomatic complexity: 4447 Second operand 19 states.
[2020-11-25 02:46:02,729 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:02,729 INFO  L93              Difference]: Finished difference Result 25076 states and 31721 transitions.
[2020-11-25 02:46:02,729 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:46:02,730 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 25076 states and 31721 transitions.
[2020-11-25 02:46:02,805 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:02,898 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 25076 states to 25076 states and 31721 transitions.
[2020-11-25 02:46:02,898 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5457
[2020-11-25 02:46:02,904 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5464
[2020-11-25 02:46:02,904 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25076 states and 31721 transitions.
[2020-11-25 02:46:02,931 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:02,931 INFO  L728         BuchiCegarLoop]: Abstraction has 25076 states and 31721 transitions.
[2020-11-25 02:46:02,941 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25076 states and 31721 transitions.
[2020-11-25 02:46:03,130 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25076 to 23598.
[2020-11-25 02:46:03,130 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23598 states.
[2020-11-25 02:46:03,174 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23598 states to 23598 states and 29007 transitions.
[2020-11-25 02:46:03,174 INFO  L751         BuchiCegarLoop]: Abstraction has 23598 states and 29007 transitions.
[2020-11-25 02:46:03,174 INFO  L631         BuchiCegarLoop]: Abstraction has 23598 states and 29007 transitions.
[2020-11-25 02:46:03,174 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:46:03,174 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23598 states and 29007 transitions.
[2020-11-25 02:46:03,202 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:03,202 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:03,202 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:03,204 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:03,204 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:03,208 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:03,208 INFO  L82        PathProgramCache]: Analyzing trace with hash 1173141785, now seen corresponding path program 1 times
[2020-11-25 02:46:03,210 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:03,228 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:03,396 INFO  L134       CoverageAnalysis]: Checked inductivity of 916 backedges. 12 proven. 11 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 02:46:03,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:46:03,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:46:03,396 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:03,397 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:46:03,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:46:03,397 INFO  L87              Difference]: Start difference. First operand 23598 states and 29007 transitions. cyclomatic complexity: 5483 Second operand 8 states.
[2020-11-25 02:46:03,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:03,609 INFO  L93              Difference]: Finished difference Result 23619 states and 29030 transitions.
[2020-11-25 02:46:03,609 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:46:03,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23619 states and 29030 transitions.
[2020-11-25 02:46:03,714 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:03,784 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23619 states to 23598 states and 29006 transitions.
[2020-11-25 02:46:03,784 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5412
[2020-11-25 02:46:03,787 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5412
[2020-11-25 02:46:03,787 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23598 states and 29006 transitions.
[2020-11-25 02:46:03,807 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:03,807 INFO  L728         BuchiCegarLoop]: Abstraction has 23598 states and 29006 transitions.
[2020-11-25 02:46:03,816 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23598 states and 29006 transitions.
[2020-11-25 02:46:03,984 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23598 to 23598.
[2020-11-25 02:46:03,984 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23598 states.
[2020-11-25 02:46:04,028 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23598 states to 23598 states and 29006 transitions.
[2020-11-25 02:46:04,028 INFO  L751         BuchiCegarLoop]: Abstraction has 23598 states and 29006 transitions.
[2020-11-25 02:46:04,028 INFO  L631         BuchiCegarLoop]: Abstraction has 23598 states and 29006 transitions.
[2020-11-25 02:46:04,028 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:46:04,028 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23598 states and 29006 transitions.
[2020-11-25 02:46:04,056 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:04,056 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:04,056 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:04,058 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:04,058 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:04,065 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:04,065 INFO  L82        PathProgramCache]: Analyzing trace with hash -402868855, now seen corresponding path program 1 times
[2020-11-25 02:46:04,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:04,084 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:04,249 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:46:04,249 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:04,249 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:46:04,250 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:04,250 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:46:04,250 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:46:04,250 INFO  L87              Difference]: Start difference. First operand 23598 states and 29006 transitions. cyclomatic complexity: 5482 Second operand 3 states.
[2020-11-25 02:46:04,385 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:04,385 INFO  L93              Difference]: Finished difference Result 23578 states and 28964 transitions.
[2020-11-25 02:46:04,385 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:46:04,385 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23578 states and 28964 transitions.
[2020-11-25 02:46:04,451 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:04,532 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23578 states to 23578 states and 28964 transitions.
[2020-11-25 02:46:04,532 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5410
[2020-11-25 02:46:04,535 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5410
[2020-11-25 02:46:04,536 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23578 states and 28964 transitions.
[2020-11-25 02:46:04,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:04,555 INFO  L728         BuchiCegarLoop]: Abstraction has 23578 states and 28964 transitions.
[2020-11-25 02:46:04,564 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23578 states and 28964 transitions.
[2020-11-25 02:46:04,735 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23578 to 23392.
[2020-11-25 02:46:04,735 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23392 states.
[2020-11-25 02:46:04,778 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23392 states to 23392 states and 28744 transitions.
[2020-11-25 02:46:04,778 INFO  L751         BuchiCegarLoop]: Abstraction has 23392 states and 28744 transitions.
[2020-11-25 02:46:04,778 INFO  L631         BuchiCegarLoop]: Abstraction has 23392 states and 28744 transitions.
[2020-11-25 02:46:04,778 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:46:04,778 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23392 states and 28744 transitions.
[2020-11-25 02:46:04,807 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:04,807 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:04,807 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:04,809 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:04,809 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6642]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6643]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND TRUE   revert
[L6643]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6644]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:04,813 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:04,813 INFO  L82        PathProgramCache]: Analyzing trace with hash -1166251607, now seen corresponding path program 1 times
[2020-11-25 02:46:04,814 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:04,832 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:04,988 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:46:04,988 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:04,988 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:46:04,988 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:04,989 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 02:46:04,989 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 02:46:04,989 INFO  L87              Difference]: Start difference. First operand 23392 states and 28744 transitions. cyclomatic complexity: 5426 Second operand 5 states.
[2020-11-25 02:46:05,145 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:05,145 INFO  L93              Difference]: Finished difference Result 23543 states and 28876 transitions.
[2020-11-25 02:46:05,145 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:46:05,145 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23543 states and 28876 transitions.
[2020-11-25 02:46:05,206 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:05,279 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23543 states to 23207 states and 28477 transitions.
[2020-11-25 02:46:05,279 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5340
[2020-11-25 02:46:05,282 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5340
[2020-11-25 02:46:05,282 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23207 states and 28477 transitions.
[2020-11-25 02:46:05,300 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:05,300 INFO  L728         BuchiCegarLoop]: Abstraction has 23207 states and 28477 transitions.
[2020-11-25 02:46:05,309 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23207 states and 28477 transitions.
[2020-11-25 02:46:05,466 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23207 to 23203.
[2020-11-25 02:46:05,466 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23203 states.
[2020-11-25 02:46:05,508 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23203 states to 23203 states and 28471 transitions.
[2020-11-25 02:46:05,508 INFO  L751         BuchiCegarLoop]: Abstraction has 23203 states and 28471 transitions.
[2020-11-25 02:46:05,508 INFO  L631         BuchiCegarLoop]: Abstraction has 23203 states and 28471 transitions.
[2020-11-25 02:46:05,508 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:46:05,509 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23203 states and 28471 transitions.
[2020-11-25 02:46:05,536 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:05,536 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:05,536 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:05,537 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:05,537 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND TRUE   revert
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:05,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:05,542 INFO  L82        PathProgramCache]: Analyzing trace with hash 1482321563, now seen corresponding path program 1 times
[2020-11-25 02:46:05,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:05,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:05,735 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 02:46:05,735 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:05,735 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:46:05,735 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:05,736 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:46:05,736 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:46:05,736 INFO  L87              Difference]: Start difference. First operand 23203 states and 28471 transitions. cyclomatic complexity: 5342 Second operand 9 states.
[2020-11-25 02:46:06,008 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:06,008 INFO  L93              Difference]: Finished difference Result 23228 states and 28498 transitions.
[2020-11-25 02:46:06,008 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:46:06,008 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23228 states and 28498 transitions.
[2020-11-25 02:46:06,071 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:06,149 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23228 states to 23182 states and 28444 transitions.
[2020-11-25 02:46:06,149 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5338
[2020-11-25 02:46:06,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5338
[2020-11-25 02:46:06,152 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23182 states and 28444 transitions.
[2020-11-25 02:46:06,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:06,171 INFO  L728         BuchiCegarLoop]: Abstraction has 23182 states and 28444 transitions.
[2020-11-25 02:46:06,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23182 states and 28444 transitions.
[2020-11-25 02:46:06,401 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23182 to 23182.
[2020-11-25 02:46:06,401 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23182 states.
[2020-11-25 02:46:06,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23182 states to 23182 states and 28444 transitions.
[2020-11-25 02:46:06,443 INFO  L751         BuchiCegarLoop]: Abstraction has 23182 states and 28444 transitions.
[2020-11-25 02:46:06,443 INFO  L631         BuchiCegarLoop]: Abstraction has 23182 states and 28444 transitions.
[2020-11-25 02:46:06,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:46:06,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23182 states and 28444 transitions.
[2020-11-25 02:46:06,470 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:06,470 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:06,470 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:06,472 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:06,472 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND TRUE   revert
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND TRUE   revert
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:06,476 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:06,477 INFO  L82        PathProgramCache]: Analyzing trace with hash 1069782385, now seen corresponding path program 1 times
[2020-11-25 02:46:06,477 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:06,496 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:06,717 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:46:06,717 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:06,718 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 02:46:06,718 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:06,718 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:46:06,718 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:46:06,718 INFO  L87              Difference]: Start difference. First operand 23182 states and 28444 transitions. cyclomatic complexity: 5336 Second operand 10 states.
[2020-11-25 02:46:10,098 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:10,098 INFO  L93              Difference]: Finished difference Result 23627 states and 29107 transitions.
[2020-11-25 02:46:10,098 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 02:46:10,098 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23627 states and 29107 transitions.
[2020-11-25 02:46:10,164 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:10,240 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23627 states to 23627 states and 29107 transitions.
[2020-11-25 02:46:10,240 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5490
[2020-11-25 02:46:10,243 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5490
[2020-11-25 02:46:10,243 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23627 states and 29107 transitions.
[2020-11-25 02:46:10,262 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:10,262 INFO  L728         BuchiCegarLoop]: Abstraction has 23627 states and 29107 transitions.
[2020-11-25 02:46:10,271 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23627 states and 29107 transitions.
[2020-11-25 02:46:10,431 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23627 to 23348.
[2020-11-25 02:46:10,431 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23348 states.
[2020-11-25 02:46:10,473 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23348 states to 23348 states and 28710 transitions.
[2020-11-25 02:46:10,473 INFO  L751         BuchiCegarLoop]: Abstraction has 23348 states and 28710 transitions.
[2020-11-25 02:46:10,473 INFO  L631         BuchiCegarLoop]: Abstraction has 23348 states and 28710 transitions.
[2020-11-25 02:46:10,473 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 02:46:10,473 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23348 states and 28710 transitions.
[2020-11-25 02:46:10,500 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:10,500 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:10,500 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:10,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:10,502 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND FALSE  !(!(b_s82 <= a_s82))
[L5719]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5720]               __ret_0_ := c_s82;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND FALSE  !(revert)
[L6875]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s904];
[L6876]               __tmp___balances_ERC20[this][from_s904] := __var_21;
[L6877]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s904];
[L6878]   CALL        call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L6878]   RET         call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L6879]   COND TRUE   revert
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND FALSE  !(!(b_s82 <= a_s82))
[L5719]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5720]               __ret_0_ := c_s82;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND FALSE  !(revert)
[L6875]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s904];
[L6876]               __tmp___balances_ERC20[this][from_s904] := __var_21;
[L6877]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s904];
[L6878]   CALL        call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L6878]   RET         call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L6879]   COND TRUE   revert
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND TRUE   revert
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:10,507 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:10,507 INFO  L82        PathProgramCache]: Analyzing trace with hash 1034083733, now seen corresponding path program 1 times
[2020-11-25 02:46:10,508 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:10,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:11,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:46:11,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:11,060 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 02:46:11,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:11,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 02:46:11,061 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=208, Unknown=0, NotChecked=0, Total=240
[2020-11-25 02:46:11,061 INFO  L87              Difference]: Start difference. First operand 23348 states and 28710 transitions. cyclomatic complexity: 5442 Second operand 16 states.
[2020-11-25 02:46:19,014 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:19,014 INFO  L93              Difference]: Finished difference Result 23617 states and 29059 transitions.
[2020-11-25 02:46:19,014 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:46:19,014 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23617 states and 29059 transitions.
[2020-11-25 02:46:19,077 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:19,153 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23617 states to 23617 states and 29059 transitions.
[2020-11-25 02:46:19,153 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5482
[2020-11-25 02:46:19,156 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5482
[2020-11-25 02:46:19,156 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23617 states and 29059 transitions.
[2020-11-25 02:46:19,174 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:19,174 INFO  L728         BuchiCegarLoop]: Abstraction has 23617 states and 29059 transitions.
[2020-11-25 02:46:19,183 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23617 states and 29059 transitions.
[2020-11-25 02:46:19,334 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23617 to 23236.
[2020-11-25 02:46:19,334 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23236 states.
[2020-11-25 02:46:19,377 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23236 states to 23236 states and 28461 transitions.
[2020-11-25 02:46:19,378 INFO  L751         BuchiCegarLoop]: Abstraction has 23236 states and 28461 transitions.
[2020-11-25 02:46:19,378 INFO  L631         BuchiCegarLoop]: Abstraction has 23236 states and 28461 transitions.
[2020-11-25 02:46:19,378 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 02:46:19,378 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23236 states and 28461 transitions.
[2020-11-25 02:46:19,405 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:46:19,405 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:19,405 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:19,407 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:19,407 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND FALSE  !(!(b_s82 <= a_s82))
[L5719]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5720]               __ret_0_ := c_s82;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND FALSE  !(revert)
[L6875]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s904];
[L6876]               __tmp___balances_ERC20[this][from_s904] := __var_21;
[L6877]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s904];
[L6878]   CALL        call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6878]   RET         call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L6879]   COND FALSE  !(revert)
[L6882]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s904];
[L6883]               __tmp___balances_ERC20[this][to_s904] := __var_22;
[L6884]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s904];
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND FALSE  !(revert)
[L6655]               __ret_0_ := true;
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND FALSE  !(revert)
[L7166]               __ret_0_ := __var_30;
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND FALSE  !(revert)
[L7640]               __ret_0_ := __var_43;
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND FALSE  !(revert)
[L7153]   COND TRUE   __tmp__DType[this] == ONIT
[L7154]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6637]   COND TRUE   __tmp__DType[this] == ONIT
[L6638]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6866]               __var_20 := null;
[L6867]   COND FALSE  !(!(to_s904 != null))
[L6871]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L5715]   COND FALSE  !(!(b_s82 <= a_s82))
[L5719]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5720]               __ret_0_ := c_s82;
[L6871]   RET         call __var_21 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s904], value_s904);
[L6872]   COND FALSE  !(revert)
[L6875]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s904];
[L6876]               __tmp___balances_ERC20[this][from_s904] := __var_21;
[L6877]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s904];
[L6878]   CALL        call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6878]   RET         call __var_22 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s904], value_s904);
[L6879]   COND FALSE  !(revert)
[L6882]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s904];
[L6883]               __tmp___balances_ERC20[this][to_s904] := __var_22;
[L6884]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s904];
[L6638]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6639]   COND FALSE  !(revert)
[L6655]               __ret_0_ := true;
[L7154]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7155]   COND FALSE  !(revert)
[L7166]               __ret_0_ := __var_30;
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND FALSE  !(revert)
[L7640]               __ret_0_ := __var_43;
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:19,413 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:19,413 INFO  L82        PathProgramCache]: Analyzing trace with hash 2009989383, now seen corresponding path program 1 times
[2020-11-25 02:46:19,414 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:19,432 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:19,594 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:46:19,594 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:19,594 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:46:19,594 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:19,594 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 02:46:19,594 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 02:46:19,594 INFO  L87              Difference]: Start difference. First operand 23236 states and 28461 transitions. cyclomatic complexity: 5305 Second operand 5 states.
[2020-11-25 02:46:21,389 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:21,389 INFO  L93              Difference]: Finished difference Result 26891 states and 33274 transitions.
[2020-11-25 02:46:21,389 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:46:21,389 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26891 states and 33274 transitions.
[2020-11-25 02:46:21,475 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 144
[2020-11-25 02:46:21,575 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26891 states to 25297 states and 31523 transitions.
[2020-11-25 02:46:21,575 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4594
[2020-11-25 02:46:21,578 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4594
[2020-11-25 02:46:21,578 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25297 states and 31523 transitions.
[2020-11-25 02:46:21,601 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:21,601 INFO  L728         BuchiCegarLoop]: Abstraction has 25297 states and 31523 transitions.
[2020-11-25 02:46:21,610 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25297 states and 31523 transitions.
[2020-11-25 02:46:21,784 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25297 to 20391.
[2020-11-25 02:46:21,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20391 states.
[2020-11-25 02:46:21,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20391 states to 20391 states and 24245 transitions.
[2020-11-25 02:46:21,816 INFO  L751         BuchiCegarLoop]: Abstraction has 20391 states and 24245 transitions.
[2020-11-25 02:46:21,816 INFO  L631         BuchiCegarLoop]: Abstraction has 20391 states and 24245 transitions.
[2020-11-25 02:46:21,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 02:46:21,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20391 states and 24245 transitions.
[2020-11-25 02:46:21,838 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 72
[2020-11-25 02:46:21,838 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:21,838 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:21,839 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:21,839 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:21,844 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:21,844 INFO  L82        PathProgramCache]: Analyzing trace with hash -1736476351, now seen corresponding path program 1 times
[2020-11-25 02:46:21,845 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:21,863 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:22,057 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:46:22,057 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:22,057 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:46:22,057 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:22,057 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:46:22,057 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:46:22,058 INFO  L87              Difference]: Start difference. First operand 20391 states and 24245 transitions. cyclomatic complexity: 3926 Second operand 8 states.
[2020-11-25 02:46:22,235 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:22,235 INFO  L93              Difference]: Finished difference Result 20817 states and 24685 transitions.
[2020-11-25 02:46:22,235 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:46:22,235 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20817 states and 24685 transitions.
[2020-11-25 02:46:22,281 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 72
[2020-11-25 02:46:22,334 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20817 states to 20241 states and 24035 transitions.
[2020-11-25 02:46:22,334 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3965
[2020-11-25 02:46:22,336 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3965
[2020-11-25 02:46:22,336 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20241 states and 24035 transitions.
[2020-11-25 02:46:22,350 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:22,350 INFO  L728         BuchiCegarLoop]: Abstraction has 20241 states and 24035 transitions.
[2020-11-25 02:46:22,357 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20241 states and 24035 transitions.
[2020-11-25 02:46:22,468 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20241 to 20241.
[2020-11-25 02:46:22,468 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20241 states.
[2020-11-25 02:46:22,499 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20241 states to 20241 states and 24035 transitions.
[2020-11-25 02:46:22,499 INFO  L751         BuchiCegarLoop]: Abstraction has 20241 states and 24035 transitions.
[2020-11-25 02:46:22,499 INFO  L631         BuchiCegarLoop]: Abstraction has 20241 states and 24035 transitions.
[2020-11-25 02:46:22,499 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 02:46:22,499 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20241 states and 24035 transitions.
[2020-11-25 02:46:22,520 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 72
[2020-11-25 02:46:22,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:22,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:22,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:22,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:22,525 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:22,526 INFO  L82        PathProgramCache]: Analyzing trace with hash -1991188233, now seen corresponding path program 1 times
[2020-11-25 02:46:22,526 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:22,544 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:22,769 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:46:22,769 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:46:22,769 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:46:22,770 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:22,770 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:46:22,770 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:46:22,770 INFO  L87              Difference]: Start difference. First operand 20241 states and 24035 transitions. cyclomatic complexity: 3866 Second operand 14 states.
[2020-11-25 02:46:27,808 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:46:27,809 INFO  L93              Difference]: Finished difference Result 21513 states and 25554 transitions.
[2020-11-25 02:46:27,809 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:46:27,809 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21513 states and 25554 transitions.
[2020-11-25 02:46:27,859 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 58
[2020-11-25 02:46:27,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21513 states to 21513 states and 25554 transitions.
[2020-11-25 02:46:27,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4273
[2020-11-25 02:46:27,919 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4273
[2020-11-25 02:46:27,919 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21513 states and 25554 transitions.
[2020-11-25 02:46:27,933 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:46:27,933 INFO  L728         BuchiCegarLoop]: Abstraction has 21513 states and 25554 transitions.
[2020-11-25 02:46:27,940 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21513 states and 25554 transitions.
[2020-11-25 02:46:28,063 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21513 to 19329.
[2020-11-25 02:46:28,063 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19329 states.
[2020-11-25 02:46:28,090 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19329 states to 19329 states and 22642 transitions.
[2020-11-25 02:46:28,091 INFO  L751         BuchiCegarLoop]: Abstraction has 19329 states and 22642 transitions.
[2020-11-25 02:46:28,091 INFO  L631         BuchiCegarLoop]: Abstraction has 19329 states and 22642 transitions.
[2020-11-25 02:46:28,091 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 02:46:28,091 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19329 states and 22642 transitions.
[2020-11-25 02:46:28,111 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 34
[2020-11-25 02:46:28,111 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:46:28,111 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:46:28,112 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:46:28,112 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:46:28,117 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:46:28,117 INFO  L82        PathProgramCache]: Analyzing trace with hash 2092866610, now seen corresponding path program 1 times
[2020-11-25 02:46:28,118 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:46:28,173 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:46:29,964 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 10 proven. 4 refuted. 0 times theorem prover too weak. 916 trivial. 0 not checked.
[2020-11-25 02:46:29,965 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:46:29,965 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 02:46:29,965 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:46:29,965 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 02:46:29,966 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=109, Invalid=1531, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 02:46:29,966 INFO  L87              Difference]: Start difference. First operand 19329 states and 22642 transitions. cyclomatic complexity: 3380 Second operand 41 states.
[2020-11-25 02:47:03,989 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:03,989 INFO  L93              Difference]: Finished difference Result 20075 states and 24063 transitions.
[2020-11-25 02:47:03,989 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 02:47:03,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20075 states and 24063 transitions.
[2020-11-25 02:47:04,038 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 56
[2020-11-25 02:47:04,096 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20075 states to 20075 states and 24063 transitions.
[2020-11-25 02:47:04,096 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3899
[2020-11-25 02:47:04,098 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3899
[2020-11-25 02:47:04,098 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20075 states and 24063 transitions.
[2020-11-25 02:47:04,113 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:04,113 INFO  L728         BuchiCegarLoop]: Abstraction has 20075 states and 24063 transitions.
[2020-11-25 02:47:04,121 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20075 states and 24063 transitions.
[2020-11-25 02:47:04,239 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20075 to 19958.
[2020-11-25 02:47:04,239 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19958 states.
[2020-11-25 02:47:04,273 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19958 states to 19958 states and 23887 transitions.
[2020-11-25 02:47:04,273 INFO  L751         BuchiCegarLoop]: Abstraction has 19958 states and 23887 transitions.
[2020-11-25 02:47:04,273 INFO  L631         BuchiCegarLoop]: Abstraction has 19958 states and 23887 transitions.
[2020-11-25 02:47:04,273 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 02:47:04,273 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19958 states and 23887 transitions.
[2020-11-25 02:47:04,294 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 56
[2020-11-25 02:47:04,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:04,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:04,297 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:04,297 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND TRUE   DType[this] == ERC20Pausable
[L10866]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10866]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10867]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:04,303 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:04,303 INFO  L82        PathProgramCache]: Analyzing trace with hash -560718646, now seen corresponding path program 1 times
[2020-11-25 02:47:04,304 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:04,329 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:04,663 INFO  L134       CoverageAnalysis]: Checked inductivity of 1243 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1238 trivial. 0 not checked.
[2020-11-25 02:47:04,664 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:04,664 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:47:04,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:04,664 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:47:04,664 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:47:04,665 INFO  L87              Difference]: Start difference. First operand 19958 states and 23887 transitions. cyclomatic complexity: 4028 Second operand 3 states.
[2020-11-25 02:47:04,760 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:04,760 INFO  L93              Difference]: Finished difference Result 19998 states and 23997 transitions.
[2020-11-25 02:47:04,760 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:47:04,760 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19998 states and 23997 transitions.
[2020-11-25 02:47:04,808 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 56
[2020-11-25 02:47:04,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19998 states to 19998 states and 23997 transitions.
[2020-11-25 02:47:04,865 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3897
[2020-11-25 02:47:04,867 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3897
[2020-11-25 02:47:04,867 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19998 states and 23997 transitions.
[2020-11-25 02:47:04,881 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:04,881 INFO  L728         BuchiCegarLoop]: Abstraction has 19998 states and 23997 transitions.
[2020-11-25 02:47:04,889 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19998 states and 23997 transitions.
[2020-11-25 02:47:05,004 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19998 to 19968.
[2020-11-25 02:47:05,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19968 states.
[2020-11-25 02:47:05,037 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19968 states to 19968 states and 23897 transitions.
[2020-11-25 02:47:05,037 INFO  L751         BuchiCegarLoop]: Abstraction has 19968 states and 23897 transitions.
[2020-11-25 02:47:05,037 INFO  L631         BuchiCegarLoop]: Abstraction has 19968 states and 23897 transitions.
[2020-11-25 02:47:05,037 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 02:47:05,038 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19968 states and 23897 transitions.
[2020-11-25 02:47:05,059 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 56
[2020-11-25 02:47:05,059 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:05,059 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:05,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:05,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND TRUE   choice == 6
[L12299]              gas := gas - 21000;
[L12300]  COND TRUE   gas >= 0
[L12301]              assume msgvalue_MSG == 0;
[L12302]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7809]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7809]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7810]   COND FALSE  !(revert)
[L7813]   COND FALSE  !(!frozenAccount_ONIT[this][holder_s1379])
[L7817]               frozenAccount_ONIT[this][holder_s1379] := false;
[L7818]               assert { :EventEmitted "Unfreeze_ONIT" } true;
[L7819]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12302]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND FALSE  !(choice == 3)
[L12327]  COND FALSE  !(choice == 2)
[L12333]  COND TRUE   choice == 1
[L12334]              gas := gas - 21000;
[L12335]  COND TRUE   gas >= 0
[L12336]              assume value_s1663 >= 0 && value_s1663 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12337]              assume msgvalue_MSG == 0;
[L12338]  CALL        call __ret_0_mint := mint~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L3884]               havoc __exception;
[L3885]               revert := false;
[L3886]   COND FALSE  !(__exception)
[L3922]   CALL        call __ret_0_ := mint~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L8401]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8401]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8402]   COND FALSE  !(revert)
[L8405]   COND TRUE   DType[this] == ONIT
[L8406]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1663);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L8406]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1663);
[L8407]   COND FALSE  !(revert)
[L8413]               __ret_0_ := true;
[L3922]   RET         call __ret_0_ := mint~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L3923]               assume !revert && gas >= 0;
[L12338]  RET         call __ret_0_mint := mint~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:05,067 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:05,068 INFO  L82        PathProgramCache]: Analyzing trace with hash -52097172, now seen corresponding path program 1 times
[2020-11-25 02:47:05,068 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:05,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:05,386 INFO  L134       CoverageAnalysis]: Checked inductivity of 1243 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1242 trivial. 0 not checked.
[2020-11-25 02:47:05,386 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:05,386 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:47:05,387 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:05,387 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:47:05,387 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:47:05,387 INFO  L87              Difference]: Start difference. First operand 19968 states and 23897 transitions. cyclomatic complexity: 4028 Second operand 4 states.
[2020-11-25 02:47:05,458 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:05,458 INFO  L93              Difference]: Finished difference Result 19983 states and 23922 transitions.
[2020-11-25 02:47:05,458 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:47:05,458 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19983 states and 23922 transitions.
[2020-11-25 02:47:05,505 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 56
[2020-11-25 02:47:05,563 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19983 states to 19983 states and 23922 transitions.
[2020-11-25 02:47:05,563 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3897
[2020-11-25 02:47:05,565 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3897
[2020-11-25 02:47:05,565 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19983 states and 23922 transitions.
[2020-11-25 02:47:05,580 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:05,581 INFO  L728         BuchiCegarLoop]: Abstraction has 19983 states and 23922 transitions.
[2020-11-25 02:47:05,588 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19983 states and 23922 transitions.
[2020-11-25 02:47:05,707 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19983 to 19968.
[2020-11-25 02:47:05,707 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19968 states.
[2020-11-25 02:47:05,740 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19968 states to 19968 states and 23882 transitions.
[2020-11-25 02:47:05,740 INFO  L751         BuchiCegarLoop]: Abstraction has 19968 states and 23882 transitions.
[2020-11-25 02:47:05,740 INFO  L631         BuchiCegarLoop]: Abstraction has 19968 states and 23882 transitions.
[2020-11-25 02:47:05,740 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 02:47:05,740 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19968 states and 23882 transitions.
[2020-11-25 02:47:05,761 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 56
[2020-11-25 02:47:05,761 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:05,761 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:05,763 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:05,763 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:05,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:05,768 INFO  L82        PathProgramCache]: Analyzing trace with hash 1854166475, now seen corresponding path program 1 times
[2020-11-25 02:47:05,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:05,795 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:06,242 INFO  L134       CoverageAnalysis]: Checked inductivity of 1243 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 1242 trivial. 0 not checked.
[2020-11-25 02:47:06,242 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:06,242 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 02:47:06,243 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:06,243 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:47:06,243 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:47:06,243 INFO  L87              Difference]: Start difference. First operand 19968 states and 23882 transitions. cyclomatic complexity: 4013 Second operand 12 states.
[2020-11-25 02:47:10,344 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:10,344 INFO  L93              Difference]: Finished difference Result 22030 states and 26897 transitions.
[2020-11-25 02:47:10,344 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 02:47:10,344 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22030 states and 26897 transitions.
[2020-11-25 02:47:10,403 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:10,476 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22030 states to 22030 states and 26897 transitions.
[2020-11-25 02:47:10,476 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4421
[2020-11-25 02:47:10,478 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4421
[2020-11-25 02:47:10,479 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22030 states and 26897 transitions.
[2020-11-25 02:47:10,496 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:10,496 INFO  L728         BuchiCegarLoop]: Abstraction has 22030 states and 26897 transitions.
[2020-11-25 02:47:10,503 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22030 states and 26897 transitions.
[2020-11-25 02:47:10,650 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22030 to 21255.
[2020-11-25 02:47:10,650 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21255 states.
[2020-11-25 02:47:10,691 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21255 states to 21255 states and 25889 transitions.
[2020-11-25 02:47:10,691 INFO  L751         BuchiCegarLoop]: Abstraction has 21255 states and 25889 transitions.
[2020-11-25 02:47:10,691 INFO  L631         BuchiCegarLoop]: Abstraction has 21255 states and 25889 transitions.
[2020-11-25 02:47:10,691 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 02:47:10,691 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21255 states and 25889 transitions.
[2020-11-25 02:47:10,715 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:10,715 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:10,715 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:10,716 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:10,716 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:10,721 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:10,721 INFO  L82        PathProgramCache]: Analyzing trace with hash -2027075555, now seen corresponding path program 1 times
[2020-11-25 02:47:10,721 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:10,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:10,915 INFO  L134       CoverageAnalysis]: Checked inductivity of 941 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 941 trivial. 0 not checked.
[2020-11-25 02:47:10,915 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:10,915 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:47:10,916 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:10,916 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:47:10,916 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:47:10,916 INFO  L87              Difference]: Start difference. First operand 21255 states and 25889 transitions. cyclomatic complexity: 4777 Second operand 3 states.
[2020-11-25 02:47:11,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:11,028 INFO  L93              Difference]: Finished difference Result 21085 states and 25574 transitions.
[2020-11-25 02:47:11,029 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:47:11,029 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21085 states and 25574 transitions.
[2020-11-25 02:47:11,085 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:11,153 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21085 states to 21085 states and 25574 transitions.
[2020-11-25 02:47:11,154 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4084
[2020-11-25 02:47:11,155 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4084
[2020-11-25 02:47:11,155 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21085 states and 25574 transitions.
[2020-11-25 02:47:11,172 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:11,172 INFO  L728         BuchiCegarLoop]: Abstraction has 21085 states and 25574 transitions.
[2020-11-25 02:47:11,179 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21085 states and 25574 transitions.
[2020-11-25 02:47:11,341 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21085 to 20917.
[2020-11-25 02:47:11,341 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20917 states.
[2020-11-25 02:47:11,385 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20917 states to 20917 states and 25331 transitions.
[2020-11-25 02:47:11,385 INFO  L751         BuchiCegarLoop]: Abstraction has 20917 states and 25331 transitions.
[2020-11-25 02:47:11,385 INFO  L631         BuchiCegarLoop]: Abstraction has 20917 states and 25331 transitions.
[2020-11-25 02:47:11,385 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 02:47:11,385 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20917 states and 25331 transitions.
[2020-11-25 02:47:11,411 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:11,411 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:11,411 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:11,413 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:11,413 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND TRUE   choice == 6
[L12299]              gas := gas - 21000;
[L12300]  COND TRUE   gas >= 0
[L12301]              assume msgvalue_MSG == 0;
[L12302]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7809]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7809]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7810]   COND FALSE  !(revert)
[L7813]   COND FALSE  !(!frozenAccount_ONIT[this][holder_s1379])
[L7817]               frozenAccount_ONIT[this][holder_s1379] := false;
[L7818]               assert { :EventEmitted "Unfreeze_ONIT" } true;
[L7819]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12302]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:11,418 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:11,418 INFO  L82        PathProgramCache]: Analyzing trace with hash -600259496, now seen corresponding path program 1 times
[2020-11-25 02:47:11,418 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:11,437 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:11,676 INFO  L134       CoverageAnalysis]: Checked inductivity of 1049 backedges. 1 proven. 98 refuted. 0 times theorem prover too weak. 950 trivial. 0 not checked.
[2020-11-25 02:47:11,676 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:11,676 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 02:47:11,677 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:11,677 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 02:47:11,677 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-11-25 02:47:11,677 INFO  L87              Difference]: Start difference. First operand 20917 states and 25331 transitions. cyclomatic complexity: 4547 Second operand 11 states.
[2020-11-25 02:47:15,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:15,140 INFO  L93              Difference]: Finished difference Result 20929 states and 25396 transitions.
[2020-11-25 02:47:15,140 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 02:47:15,140 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20929 states and 25396 transitions.
[2020-11-25 02:47:15,198 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:15,267 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20929 states to 20929 states and 25396 transitions.
[2020-11-25 02:47:15,267 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4082
[2020-11-25 02:47:15,269 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4082
[2020-11-25 02:47:15,269 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20929 states and 25396 transitions.
[2020-11-25 02:47:15,285 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:15,285 INFO  L728         BuchiCegarLoop]: Abstraction has 20929 states and 25396 transitions.
[2020-11-25 02:47:15,293 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20929 states and 25396 transitions.
[2020-11-25 02:47:15,420 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20929 to 20929.
[2020-11-25 02:47:15,420 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20929 states.
[2020-11-25 02:47:15,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20929 states to 20929 states and 25396 transitions.
[2020-11-25 02:47:15,463 INFO  L751         BuchiCegarLoop]: Abstraction has 20929 states and 25396 transitions.
[2020-11-25 02:47:15,463 INFO  L631         BuchiCegarLoop]: Abstraction has 20929 states and 25396 transitions.
[2020-11-25 02:47:15,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 02:47:15,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20929 states and 25396 transitions.
[2020-11-25 02:47:15,486 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:15,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:15,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:15,488 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:15,488 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7626]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7627]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8289]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8300]               idx_s1645 := 0;
[L8301]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8303]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8314]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8315]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8100]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8111]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8112]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8113]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8124]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8135]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8146]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5715]   COND TRUE   !(b_s82 <= a_s82)
[L5716]               revert := true;
[L8146]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8147]   COND TRUE   revert
[L8315]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8316]   COND TRUE   revert
[L7627]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7628]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:15,493 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:15,493 INFO  L82        PathProgramCache]: Analyzing trace with hash -1288034713, now seen corresponding path program 1 times
[2020-11-25 02:47:15,493 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:15,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:15,541 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:15,707 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:15,708 INFO  L82        PathProgramCache]: Analyzing trace with hash -2055259945, now seen corresponding path program 1 times
[2020-11-25 02:47:15,708 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:15,714 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:15,734 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:47:15,734 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:15,734 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:47:15,735 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 02:47:15,735 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:47:15,735 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:47:15,735 INFO  L87              Difference]: Start difference. First operand 20929 states and 25396 transitions. cyclomatic complexity: 4600 Second operand 7 states.
[2020-11-25 02:47:18,529 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:18,530 INFO  L93              Difference]: Finished difference Result 21075 states and 25574 transitions.
[2020-11-25 02:47:18,530 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:47:18,530 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21075 states and 25574 transitions.
[2020-11-25 02:47:18,611 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:18,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21075 states to 21035 states and 25518 transitions.
[2020-11-25 02:47:18,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4104
[2020-11-25 02:47:18,706 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4117
[2020-11-25 02:47:18,706 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21035 states and 25518 transitions.
[2020-11-25 02:47:18,730 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:18,730 INFO  L728         BuchiCegarLoop]: Abstraction has 21035 states and 25518 transitions.
[2020-11-25 02:47:18,742 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21035 states and 25518 transitions.
[2020-11-25 02:47:18,877 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21035 to 20869.
[2020-11-25 02:47:18,877 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20869 states.
[2020-11-25 02:47:18,916 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20869 states to 20869 states and 25296 transitions.
[2020-11-25 02:47:18,916 INFO  L751         BuchiCegarLoop]: Abstraction has 20869 states and 25296 transitions.
[2020-11-25 02:47:18,916 INFO  L631         BuchiCegarLoop]: Abstraction has 20869 states and 25296 transitions.
[2020-11-25 02:47:18,916 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 02:47:18,916 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20869 states and 25296 transitions.
[2020-11-25 02:47:18,940 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:18,940 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:18,940 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:18,941 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:18,942 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND TRUE   choice == 22
[L12197]              gas := gas - 21000;
[L12198]  COND TRUE   gas >= 0
[L12199]              assume msgvalue_MSG == 0;
[L12200]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1449]               havoc __exception;
[L1450]               revert := false;
[L1451]   COND FALSE  !(__exception)
[L1487]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6505]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L6505]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6506]   COND FALSE  !(revert)
[L6509]   CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10915]  COND FALSE  !(!_paused_Pausable[this])
[L6509]   RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6510]   COND FALSE  !(revert)
[L6513]               _paused_Pausable[this] := false;
[L6514]               assert { :EventEmitted "Unpaused_Pausable" } true;
[L1487]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1488]               assume !revert && gas >= 0;
[L12200]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND FALSE  !(revert)
[L7615]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7616]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7616]   RET         call __var_41 := FreshRefGenerator__fail();
[L7617]   COND FALSE  !(revert)
[L7620]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7621]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7622]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7623]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7624]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7626]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7632]   COND TRUE   __tmp__DType[this] == ONIT
[L7633]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7149]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10891]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10892]              revert := true;
[L7149]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]   COND TRUE   revert
[L7633]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7634]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:18,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:18,946 INFO  L82        PathProgramCache]: Analyzing trace with hash 1778979147, now seen corresponding path program 1 times
[2020-11-25 02:47:18,947 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:18,966 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:19,243 INFO  L134       CoverageAnalysis]: Checked inductivity of 1048 backedges. 7 proven. 97 refuted. 0 times theorem prover too weak. 944 trivial. 0 not checked.
[2020-11-25 02:47:19,243 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:19,243 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 02:47:19,244 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:19,244 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:47:19,244 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:47:19,244 INFO  L87              Difference]: Start difference. First operand 20869 states and 25296 transitions. cyclomatic complexity: 4558 Second operand 14 states.
[2020-11-25 02:47:24,098 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:24,098 INFO  L93              Difference]: Finished difference Result 20881 states and 25362 transitions.
[2020-11-25 02:47:24,098 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 02:47:24,099 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20881 states and 25362 transitions.
[2020-11-25 02:47:24,158 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:24,253 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20881 states to 20881 states and 25362 transitions.
[2020-11-25 02:47:24,253 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4102
[2020-11-25 02:47:24,255 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4102
[2020-11-25 02:47:24,255 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20881 states and 25362 transitions.
[2020-11-25 02:47:24,272 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:24,272 INFO  L728         BuchiCegarLoop]: Abstraction has 20881 states and 25362 transitions.
[2020-11-25 02:47:24,279 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20881 states and 25362 transitions.
[2020-11-25 02:47:24,403 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20881 to 20881.
[2020-11-25 02:47:24,403 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20881 states.
[2020-11-25 02:47:24,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20881 states to 20881 states and 25362 transitions.
[2020-11-25 02:47:24,444 INFO  L751         BuchiCegarLoop]: Abstraction has 20881 states and 25362 transitions.
[2020-11-25 02:47:24,444 INFO  L631         BuchiCegarLoop]: Abstraction has 20881 states and 25362 transitions.
[2020-11-25 02:47:24,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 02:47:24,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20881 states and 25362 transitions.
[2020-11-25 02:47:24,468 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 80
[2020-11-25 02:47:24,468 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:24,468 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:24,469 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:24,469 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_Ownable := owner_Ownable;
[L3203]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_ERC20 := _balances_ERC20;
[L3207]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]               __tmp__implementation_ONIT := implementation_ONIT;
[L3215]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]              revert := true;
[L7611]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:24,475 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:24,475 INFO  L82        PathProgramCache]: Analyzing trace with hash -1288034713, now seen corresponding path program 2 times
[2020-11-25 02:47:24,476 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:24,497 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:24,522 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:24,621 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:24,621 INFO  L82        PathProgramCache]: Analyzing trace with hash 1401645690, now seen corresponding path program 1 times
[2020-11-25 02:47:24,622 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:24,625 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:24,629 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:24,639 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:24,639 INFO  L82        PathProgramCache]: Analyzing trace with hash 1224982624, now seen corresponding path program 1 times
[2020-11-25 02:47:24,640 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:24,665 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:24,694 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 3517 to 7027
[2020-11-25 02:47:25,082 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 285 DAG size of output: 275
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 02:47:25,250 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification that was a NOOP. DAG size: 418
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.003s / 0.007s total
Resizing node table from 10513 to 21023
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 02:47:25,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 02:47:26,252 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:47:27,475 WARN  L188               SmtUtils]: Spent 962.00 ms on a formula simplification. DAG size of input: 447 DAG size of output: 421
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 02:47:27,810 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:47:28,052 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-25 02:47:28,219 WARN  L188               SmtUtils]: Spent 162.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 02:47:28,502 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification. DAG size of input: 337 DAG size of output: 256
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 02:47:28,711 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification that was a NOOP. DAG size: 413
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 02:47:29,075 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 345
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
[2020-11-25 02:47:29,270 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification that was a NOOP. DAG size: 273
[2020-11-25 02:47:29,790 WARN  L188               SmtUtils]: Spent 517.00 ms on a formula simplification. DAG size of input: 368 DAG size of output: 329
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4357 to 8713
[2020-11-25 02:47:29,934 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 187
[2020-11-25 02:47:30,150 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification that was a NOOP. DAG size: 445
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 02:47:30,371 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification that was a NOOP. DAG size: 356
[2020-11-25 02:47:33,062 WARN  L188               SmtUtils]: Spent 2.69 s on a formula simplification. DAG size of input: 956 DAG size of output: 942
Garbage collection #1: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #2: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #3: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #4: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #5: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #6: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #7: 25073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25073 to 50131
Garbage collection #8: 50131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 50131 to 100129
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 02:47:33,462 WARN  L188               SmtUtils]: Spent 357.00 ms on a formula simplification. DAG size of input: 339 DAG size of output: 336
[2020-11-25 02:47:33,798 WARN  L188               SmtUtils]: Spent 301.00 ms on a formula simplification that was a NOOP. DAG size: 493
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 02:47:33,971 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification that was a NOOP. DAG size: 336
[2020-11-25 02:47:34,682 WARN  L188               SmtUtils]: Spent 709.00 ms on a formula simplification. DAG size of input: 495 DAG size of output: 494
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-11-25 02:47:35,033 WARN  L188               SmtUtils]: Spent 345.00 ms on a formula simplification that was a NOOP. DAG size: 490
[2020-11-25 02:47:35,061 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:35,095 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:47:35,108 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:47:35 BasicIcfg
[2020-11-25 02:47:35,108 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:47:35,108 INFO  L168              Benchmark]: Toolchain (without parser) took 132229.99 ms. Allocated memory was 1.0 GB in the beginning and 5.2 GB in the end (delta: 4.1 GB). Free memory was 924.5 MB in the beginning and 1.8 GB in the end (delta: -894.4 MB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,109 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,109 INFO  L168              Benchmark]: Boogie Preprocessor took 155.15 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 892.0 MB in the end (delta: 32.5 MB). Peak memory consumption was 32.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,109 INFO  L168              Benchmark]: UtopiaSpecLang took 88.81 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,109 INFO  L168              Benchmark]: Boogie Printer took 27.90 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 870.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,110 INFO  L168              Benchmark]: RCFGBuilder took 1342.57 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 870.5 MB in the beginning and 754.7 MB in the end (delta: 115.8 MB). Peak memory consumption was 180.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,110 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.64 ms. Allocated memory is still 1.1 GB. Free memory was 754.7 MB in the beginning and 745.2 MB in the end (delta: 9.5 MB). Peak memory consumption was 9.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,110 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3326.79 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 451.9 MB). Free memory was 745.2 MB in the beginning and 803.2 MB in the end (delta: -58.0 MB). Peak memory consumption was 393.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,111 INFO  L168              Benchmark]: BlockEncodingV2 took 302.98 ms. Allocated memory is still 1.5 GB. Free memory was 803.2 MB in the beginning and 643.9 MB in the end (delta: 159.4 MB). Peak memory consumption was 159.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,111 INFO  L168              Benchmark]: BuchiAutomizer took 126947.34 ms. Allocated memory was 1.5 GB in the beginning and 5.2 GB in the end (delta: 3.6 GB). Free memory was 643.9 MB in the beginning and 1.8 GB in the end (delta: -1.2 GB). Peak memory consumption was 3.5 GB. Max. memory is 15.3 GB.
[2020-11-25 02:47:35,113 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11592 locations, 20999 edges
  - StatisticsResult: Encoded RCFG
    11446 locations, 20596 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 155.15 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 892.0 MB in the end (delta: 32.5 MB). Peak memory consumption was 32.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 88.81 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 27.90 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 870.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1342.57 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 870.5 MB in the beginning and 754.7 MB in the end (delta: 115.8 MB). Peak memory consumption was 180.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.64 ms. Allocated memory is still 1.1 GB. Free memory was 754.7 MB in the beginning and 745.2 MB in the end (delta: 9.5 MB). Peak memory consumption was 9.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3326.79 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 451.9 MB). Free memory was 745.2 MB in the beginning and 803.2 MB in the end (delta: -58.0 MB). Peak memory consumption was 393.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 302.98 ms. Allocated memory is still 1.5 GB. Free memory was 803.2 MB in the beginning and 643.9 MB in the end (delta: 159.4 MB). Peak memory consumption was 159.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 126947.34 ms. Allocated memory was 1.5 GB in the beginning and 5.2 GB in the end (delta: 3.6 GB). Free memory was 643.9 MB in the beginning and 1.8 GB in the end (delta: -1.2 GB). Peak memory consumption was 3.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4668 locations, 6455 edges
  - StatisticsResult: BuchiProgram size
    11592 locations, 20999 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 31 terminating modules (31 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.31 modules have a trivial ranking function, the largest among these consists of 41 locations. The remainder module has 20881 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 126.8s and 32 iterations.  TraceHistogramMax:8. Analysis of lassos took 19.7s. Construction of modules took 76.4s. BÃ¼chi inclusion checks took 20.1s. Highest rank in rank-based complementation 0. Minimization of det autom 31. Minimization of nondet autom 0. Automata minimization 5.2s AutomataMinimizationTime, 31 MinimizatonAttempts, 20704 StatesRemovedByMinimization, 24 NontrivialMinimizations. Non-live state removal took 3.6s Buchi closure took 0.0s. Biggest automaton had 23598 states and ocurred in iteration 14.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 238297 SDtfs, 162601 SDslu, 785284 SDs, 0 SdLazy, 766551 SolverSat, 26995 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 76.4s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU30 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(789885600000000000000000024) = (new ONIT)({from : 789885600000000000000000026});
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
ONIT(789885600000000000000000024).freezeAccount~address.gas(3979002)({from : 789885600000000000000000026, holder : 789885600000000000000000031});
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
ONIT(789885600000000000000000024).transfer~address~uint256.gas(3979003)({from : 789885600000000000000000031, to : 789885600000000000000000031, value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ONIT0 := true;
[L2]                 call_transfer_ONIT0 := false;
[L2]                 revert := revert_hold;
[L3182]              havoc __exception;
[L3183]              revert := false;
[L3184]   COND TRUE  __exception
[L3185]              __tmp__Balance := Balance;
[L3186]              __tmp__DType := DType;
[L3187]              __tmp__Alloc := Alloc;
[L3188]              __tmp__balance_ADDR := balance_ADDR;
[L3189]              __tmp__M_Ref_bool := M_Ref_bool;
[L3190]              __tmp__sum := sum;
[L3191]              __tmp__M_Ref_int := M_Ref_int;
[L3192]              __tmp__sum__balances0 := sum__balances0;
[L3193]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3194]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]              __tmp__sum__allowed1 := sum__allowed1;
[L3196]              __tmp__M_int_Ref := M_int_Ref;
[L3197]              __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3198]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]              __tmp__Length := Length;
[L3200]              __tmp__now := now;
[L3201]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]              __tmp__owner_Ownable := owner_Ownable;
[L3203]              __tmp__newOwner_Ownable := newOwner_Ownable;
[L3204]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]              __tmp___paused_Pausable := _paused_Pausable;
[L3206]              __tmp___balances_ERC20 := _balances_ERC20;
[L3207]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L3208]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3209]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]              __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3213]              __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3214]              __tmp__implementation_ONIT := implementation_ONIT;
[L3215]              __tmp__timelockList_ONIT := timelockList_ONIT;
[L3216]              __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3217]   CALL       call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7611]   CALL       call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10923]  COND TRUE  !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10924]             revert := true;
[L7611]   RET        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7612]   COND TRUE  revert
[L3217]   RET        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]              assume revert || gas < 0;
[L12207]  RET        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

Loop:
Ownable(789885600000000000000000024).transferOwnership~address.gas(3979001)({from : 789885600000000000000000018, _newOwner : 789885600000000000000000006});
[L452]               havoc __exception;
[L453]               revert := false;
[L454]    COND TRUE  __exception
[L455]               __tmp__Balance := Balance;
[L456]               __tmp__DType := DType;
[L457]               __tmp__Alloc := Alloc;
[L458]               __tmp__balance_ADDR := balance_ADDR;
[L459]               __tmp__M_Ref_bool := M_Ref_bool;
[L460]               __tmp__sum := sum;
[L461]               __tmp__M_Ref_int := M_Ref_int;
[L462]               __tmp__sum__balances0 := sum__balances0;
[L463]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]               __tmp__sum__allowed1 := sum__allowed1;
[L466]               __tmp__M_int_Ref := M_int_Ref;
[L467]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]               __tmp__Length := Length;
[L470]               __tmp__now := now;
[L471]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]               __tmp__owner_Ownable := owner_Ownable;
[L473]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]               __tmp___paused_Pausable := _paused_Pausable;
[L476]               __tmp___balances_ERC20 := _balances_ERC20;
[L477]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]               __tmp__implementation_ONIT := implementation_ONIT;
[L485]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL       call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL       call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE  !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]             revert := true;
[L5987]   RET        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE  revert
[L487]    RET        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]               assume revert || gas < 0;
[L12152]  RET        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
