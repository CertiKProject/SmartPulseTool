This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:39:21,892 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:39:21,893 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:39:21,903 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:39:21,904 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:39:21,904 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:39:21,905 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:39:21,907 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:39:21,908 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:39:21,909 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:39:21,909 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:39:21,910 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:39:21,910 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:39:21,911 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:39:21,912 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:39:21,912 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:39:21,913 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:39:21,914 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:39:21,915 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:39:21,916 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:39:21,917 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:39:21,918 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:39:21,919 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:39:21,919 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:39:21,919 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:39:21,920 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:39:21,920 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:39:21,921 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:39:21,921 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:39:21,921 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:39:21,922 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:39:21,922 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:39:21,923 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:39:21,923 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:39:21,924 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:39:21,924 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:39:21,924 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:39:21,925 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:39:21,925 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:39:21,925 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:39:21,926 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:39:21,926 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:39:21,933 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:39:21,934 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:39:21,934 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:39:21,934 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:39:21,935 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:39:21,935 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:39:21,935 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:39:21,935 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:39:21,935 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:39:21,935 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:39:21,935 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:39:21,936 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:39:21,936 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:39:21,937 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:39:21,937 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:39:21,937 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:39:21,937 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:39:21,937 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:39:21,937 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:39:21,960 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:39:21,972 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:39:21,975 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:39:21,976 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:39:21,976 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:39:21,977 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl
[2020-11-25 11:39:21,977 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl'
[2020-11-25 11:39:22,040 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:39:22,041 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:39:22,042 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:39:22,042 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:39:22,042 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:39:22,058 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,059 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,082 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,083 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,098 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,104 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,109 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,114 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:39:22,115 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:39:22,115 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:39:22,118 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:39:22,121 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/1) ...
[2020-11-25 11:39:22,134 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ZXL.transferFrom(from, to, value), from != to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender] || balanceOf_ZXL[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:22,139 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ZXL.transferFrom(from, to, value), from != to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender] || balanceOf_ZXL[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:22,147 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ZXL.transferFrom(from, to, value), from != to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender] || balanceOf_ZXL[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:22,153 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s200!=_to_s200 && ( ( _value_s200>balanceOf_ZXL[this][_from_s200] || _value_s200>allowance_ZXL[this][_from_s200][msg.sender] ) || ( balanceOf_ZXL[this][_to_s200] + _value_s200 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s200>=0 ) && _value_s200<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_ZXL[this][_to_s200]>=0 ) && balanceOf_ZXL[this][_to_s200]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_ZXL[this][_from_s200]>=0 ) && balanceOf_ZXL[this][_from_s200]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_ZXL[this][_from_s200][msg.sender]>=0 ) && allowance_ZXL[this][_from_s200][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],IdentifierExpression[_to_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_to_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_to_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_to_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_ZXL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[_from_s200,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZXL>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:39:22,157 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ZXL.transferFrom(from, to, value), from != to && (value > balanceOf_ZXL[this][from] || value > allowance_ZXL[this][from][msg.sender] || balanceOf_ZXL[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][to] >= 0 && balanceOf_ZXL[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_ZXL[this][from] >= 0 &&  balanceOf_ZXL[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_ZXL[this][from][msg.sender] >= 0 && allowance_ZXL[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZXL.transferFrom)))
[2020-11-25 11:39:22,157 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ZXL0) ==> ( <>AP(fail_transferFrom_ZXL0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:39:22,162 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:22 PropertyContainer
[2020-11-25 11:39:22,162 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:39:22,163 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:39:22,163 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:39:22,163 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:39:22,164 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/2) ...
[2020-11-25 11:39:22,164 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:39:22,164 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:39:22,173 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:22" (2/2) ...
[2020-11-25 11:39:22,173 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:39:22,174 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:39:22,174 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:39:22,174 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:39:22,174 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/2) ...
[2020-11-25 11:39:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:39:22,227 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 11:39:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 11:39:22,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 11:39:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 11:39:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL_NoBaseCtor__success
[2020-11-25 11:39:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL
[2020-11-25 11:39:22,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL
[2020-11-25 11:39:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ZXL__success
[2020-11-25 11:39:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZXL
[2020-11-25 11:39:22,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZXL
[2020-11-25 11:39:22,228 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZXL
[2020-11-25 11:39:22,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZXL
[2020-11-25 11:39:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZXL
[2020-11-25 11:39:22,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZXL
[2020-11-25 11:39:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_ZXL
[2020-11-25 11:39:22,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_ZXL
[2020-11-25 11:39:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZXL
[2020-11-25 11:39:22,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZXL
[2020-11-25 11:39:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ZXL
[2020-11-25 11:39:22,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ZXL
[2020-11-25 11:39:22,229 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZXL
[2020-11-25 11:39:22,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZXL
[2020-11-25 11:39:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZXL
[2020-11-25 11:39:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZXL
[2020-11-25 11:39:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZXL
[2020-11-25 11:39:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZXL
[2020-11-25 11:39:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZXL
[2020-11-25 11:39:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZXL
[2020-11-25 11:39:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZXL
[2020-11-25 11:39:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZXL
[2020-11-25 11:39:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZXL
[2020-11-25 11:39:22,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZXL
[2020-11-25 11:39:22,230 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZXL
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL_NoBaseCtor__fail
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL__success
[2020-11-25 11:39:22,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ZXL_ZXL__fail
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ZXL__fail
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZXL__success
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZXL__fail
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZXL__success
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZXL__fail
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZXL__success
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZXL__fail
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_ZXL__success
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_ZXL__fail
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZXL__success
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZXL__fail
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ZXL__success
[2020-11-25 11:39:22,232 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ZXL__fail
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZXL__success
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZXL__fail
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZXL__success
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZXL__fail
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZXL__success
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZXL__fail
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZXL__success
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZXL__fail
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZXL__success
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZXL__fail
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZXL__success
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZXL__fail
[2020-11-25 11:39:22,233 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:39:22,234 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:39:22,234 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL_NoBaseCtor__fail
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL_NoBaseCtor__success
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL__fail
[2020-11-25 11:39:22,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZXL_ZXL__success
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ZXL__fail
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ZXL__success
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZXL__fail
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZXL__success
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZXL__fail
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZXL__success
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZXL__fail
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZXL__success
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_ZXL__fail
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_ZXL__success
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZXL__fail
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZXL__success
[2020-11-25 11:39:22,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ZXL__fail
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ZXL__success
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZXL__fail
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZXL__success
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZXL__fail
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZXL__success
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZXL__fail
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZXL__success
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZXL__fail
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZXL__success
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZXL__fail
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZXL__success
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZXL__fail
[2020-11-25 11:39:22,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZXL__success
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZXL
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:39:22,237 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:39:22,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:39:22,503 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:39:22,503 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:39:22,694 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:39:22,695 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 11:39:22,696 INFO  L202        PluginConnector]: Adding new model ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:22 BoogieIcfgContainer
[2020-11-25 11:39:22,696 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:22" (2/2) ...
[2020-11-25 11:39:22,696 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:39:22,697 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@41f3aac8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:22, skipping insertion in model container
[2020-11-25 11:39:22,697 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:39:22,697 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:39:22,697 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:39:22,698 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:39:22,699 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/3) ...
[2020-11-25 11:39:22,699 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2266f8e3 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:22, skipping insertion in model container
[2020-11-25 11:39:22,699 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:22" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:39:22,733 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:22 NWAContainer
[2020-11-25 11:39:22,733 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:39:22,733 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:39:22,733 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:39:22,734 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:39:22,735 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:22" (3/4) ...
[2020-11-25 11:39:22,736 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5a782ea and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:22, skipping insertion in model container
[2020-11-25 11:39:22,736 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:22" (4/4) ...
[2020-11-25 11:39:22,739 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:39:22,742 INFO  L110   BuchiProductObserver]: Initial RCFG 817 locations, 988 edges
[2020-11-25 11:39:22,742 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:39:22,751 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:39:23,659 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:39:23,662 INFO  L110   BuchiProductObserver]: BuchiProgram size 1900 locations, 3176 edges
[2020-11-25 11:39:23,662 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:23 BoogieIcfgContainer
[2020-11-25 11:39:23,662 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:39:23,663 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:39:23,663 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:39:23,664 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:39:23,664 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:23" (1/1) ...
[2020-11-25 11:39:23,709 INFO  L313           BlockEncoder]: Initial Icfg 1900 locations, 3176 edges
[2020-11-25 11:39:23,709 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:39:23,710 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:39:23,710 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:39:23,710 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:39:23,717 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 11:39:23,721 INFO  L70        RemoveSinkStates]: Removed 42 edges and 21 locations by removing sink states
[2020-11-25 11:39:23,726 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:39:23,729 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:39:23,730 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:39:23,730 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:39:23,732 INFO  L313           BlockEncoder]: Encoded RCFG 1862 locations, 3093 edges
[2020-11-25 11:39:23,733 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:39:23 BasicIcfg
[2020-11-25 11:39:23,733 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:39:23,733 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:39:23,733 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:39:23,735 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:39:23,735 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:23,735 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:39:22" (1/6) ...
[2020-11-25 11:39:23,736 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2531818 and model type ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:39:23, skipping insertion in model container
[2020-11-25 11:39:23,736 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:23,736 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:39:22" (2/6) ...
[2020-11-25 11:39:23,736 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2531818 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:39:23, skipping insertion in model container
[2020-11-25 11:39:23,736 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:23,736 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:39:22" (3/6) ...
[2020-11-25 11:39:23,736 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2531818 and model type ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:39:23, skipping insertion in model container
[2020-11-25 11:39:23,736 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:23,737 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:39:22" (4/6) ...
[2020-11-25 11:39:23,737 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2531818 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:39:23, skipping insertion in model container
[2020-11-25 11:39:23,737 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:23,737 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:39:23" (5/6) ...
[2020-11-25 11:39:23,737 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2531818 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:39:23, skipping insertion in model container
[2020-11-25 11:39:23,737 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:39:23,737 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:39:23" (6/6) ...
[2020-11-25 11:39:23,738 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZXL_0xfb3B4D413Fb8dF96C6336E8DD103f8af38B48F87_transferfrom-fail.bpl_BEv2
[2020-11-25 11:39:23,773 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:39:23,773 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:39:23,773 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:39:23,774 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:39:23,774 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:39:23,774 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:39:23,774 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:39:23,774 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:39:23,774 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:39:23,793 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1862 states.
[2020-11-25 11:39:23,830 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:23,831 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:23,831 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:23,840 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:23,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:23,840 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:39:23,840 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1862 states.
[2020-11-25 11:39:23,850 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:23,850 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:23,850 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:23,852 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:23,852 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND TRUE   choice == 12
[L2103]              gas := gas - 21000;
[L2104]  COND FALSE  !(gas >= 0)
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:23,865 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:23,866 INFO  L82        PathProgramCache]: Analyzing trace with hash 246116040, now seen corresponding path program 1 times
[2020-11-25 11:39:23,870 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:23,900 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:23,943 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:23,945 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:23,945 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:39:23,949 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:24,069 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:39:24,070 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:39:24,071 INFO  L87              Difference]: Start difference. First operand 1862 states. Second operand 4 states.
[2020-11-25 11:39:24,315 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:24,316 INFO  L93              Difference]: Finished difference Result 1477 states and 1607 transitions.
[2020-11-25 11:39:24,316 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:39:24,318 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1477 states and 1607 transitions.
[2020-11-25 11:39:24,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:24,340 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1477 states to 1475 states and 1603 transitions.
[2020-11-25 11:39:24,341 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 11:39:24,343 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 669
[2020-11-25 11:39:24,343 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1475 states and 1603 transitions.
[2020-11-25 11:39:24,347 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:24,348 INFO  L728         BuchiCegarLoop]: Abstraction has 1475 states and 1603 transitions.
[2020-11-25 11:39:24,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1475 states and 1603 transitions.
[2020-11-25 11:39:24,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1475 to 1475.
[2020-11-25 11:39:24,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1475 states.
[2020-11-25 11:39:24,392 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1475 states to 1475 states and 1603 transitions.
[2020-11-25 11:39:24,393 INFO  L751         BuchiCegarLoop]: Abstraction has 1475 states and 1603 transitions.
[2020-11-25 11:39:24,393 INFO  L631         BuchiCegarLoop]: Abstraction has 1475 states and 1603 transitions.
[2020-11-25 11:39:24,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:39:24,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1475 states and 1603 transitions.
[2020-11-25 11:39:24,397 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:24,397 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:24,397 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:24,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:24,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND TRUE   !(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG])
[L1301]              revert := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND TRUE   !(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG])
[L1301]              revert := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:24,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:24,402 INFO  L82        PathProgramCache]: Analyzing trace with hash 1706158200, now seen corresponding path program 1 times
[2020-11-25 11:39:24,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:24,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:24,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:24,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:24,434 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:39:24,435 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:24,435 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:39:24,435 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:39:24,435 INFO  L87              Difference]: Start difference. First operand 1475 states and 1603 transitions. cyclomatic complexity: 130 Second operand 3 states.
[2020-11-25 11:39:24,469 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:24,469 INFO  L93              Difference]: Finished difference Result 1906 states and 2112 transitions.
[2020-11-25 11:39:24,469 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:39:24,469 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1906 states and 2112 transitions.
[2020-11-25 11:39:24,477 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:39:24,485 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1906 states to 1828 states and 2022 transitions.
[2020-11-25 11:39:24,485 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 841
[2020-11-25 11:39:24,486 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 841
[2020-11-25 11:39:24,486 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1828 states and 2022 transitions.
[2020-11-25 11:39:24,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:24,488 INFO  L728         BuchiCegarLoop]: Abstraction has 1828 states and 2022 transitions.
[2020-11-25 11:39:24,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1828 states and 2022 transitions.
[2020-11-25 11:39:24,504 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1828 to 1580.
[2020-11-25 11:39:24,504 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1580 states.
[2020-11-25 11:39:24,508 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1580 states to 1580 states and 1713 transitions.
[2020-11-25 11:39:24,508 INFO  L751         BuchiCegarLoop]: Abstraction has 1580 states and 1713 transitions.
[2020-11-25 11:39:24,508 INFO  L631         BuchiCegarLoop]: Abstraction has 1580 states and 1713 transitions.
[2020-11-25 11:39:24,508 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:39:24,508 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1580 states and 1713 transitions.
[2020-11-25 11:39:24,512 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:39:24,512 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:24,512 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:24,514 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:24,514 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:24,517 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:24,517 INFO  L82        PathProgramCache]: Analyzing trace with hash -979524524, now seen corresponding path program 1 times
[2020-11-25 11:39:24,517 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:24,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:24,635 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:24,636 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:24,636 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 11:39:24,636 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:24,636 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 11:39:24,636 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 11:39:24,637 INFO  L87              Difference]: Start difference. First operand 1580 states and 1713 transitions. cyclomatic complexity: 135 Second operand 12 states.
[2020-11-25 11:39:25,713 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:25,713 INFO  L93              Difference]: Finished difference Result 1665 states and 1810 transitions.
[2020-11-25 11:39:25,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 11:39:25,716 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1665 states and 1810 transitions.
[2020-11-25 11:39:25,725 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:39:25,734 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1665 states to 1665 states and 1810 transitions.
[2020-11-25 11:39:25,734 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 798
[2020-11-25 11:39:25,735 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 798
[2020-11-25 11:39:25,735 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1665 states and 1810 transitions.
[2020-11-25 11:39:25,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:25,738 INFO  L728         BuchiCegarLoop]: Abstraction has 1665 states and 1810 transitions.
[2020-11-25 11:39:25,740 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1665 states and 1810 transitions.
[2020-11-25 11:39:25,759 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1665 to 1515.
[2020-11-25 11:39:25,759 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1515 states.
[2020-11-25 11:39:25,765 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1515 states to 1515 states and 1627 transitions.
[2020-11-25 11:39:25,765 INFO  L751         BuchiCegarLoop]: Abstraction has 1515 states and 1627 transitions.
[2020-11-25 11:39:25,765 INFO  L631         BuchiCegarLoop]: Abstraction has 1515 states and 1627 transitions.
[2020-11-25 11:39:25,765 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:39:25,765 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1515 states and 1627 transitions.
[2020-11-25 11:39:25,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:25,773 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:25,773 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:25,775 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:25,775 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND TRUE   __exception
[L148]               __tmp__Balance := Balance;
[L149]               __tmp__DType := DType;
[L150]               __tmp__Alloc := Alloc;
[L151]               __tmp__balance_ADDR := balance_ADDR;
[L152]               __tmp__M_Ref_int := M_Ref_int;
[L153]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L154]               __tmp__alloc_allowance_ZXL_lvl0 := alloc_allowance_ZXL_lvl0;
[L155]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L156]               __tmp__sum_allowance1 := sum_allowance1;
[L157]               __tmp__Length := Length;
[L158]               __tmp__now := now;
[L159]               __tmp__name_ZXL := name_ZXL;
[L160]               __tmp__symbol_ZXL := symbol_ZXL;
[L161]               __tmp__decimals_ZXL := decimals_ZXL;
[L162]               __tmp__totalSupply_ZXL := totalSupply_ZXL;
[L163]               __tmp__owner_ZXL := owner_ZXL;
[L164]               __tmp__balanceOf_ZXL := balanceOf_ZXL;
[L165]               __tmp__allowance_ZXL := allowance_ZXL;
[L166]   CALL        call ZXL_ZXL__fail(this, msgsender_MSG, msgvalue_MSG);
[L1197]  CALL        call ZXL_ZXL_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1156]              assume msgsender_MSG != null;
[L1157]              __tmp__Balance[this] := 0;
[L1158]              __tmp__name_ZXL[this] := -1880820303;
[L1159]              __tmp__symbol_ZXL[this] := -1880820303;
[L1160]              __tmp__decimals_ZXL[this] := 18;
[L1161]              __tmp__totalSupply_ZXL[this] := 13000000000000000000000000;
[L1162]              __tmp__owner_ZXL[this] := null;
[L1163]              __tmp__balanceOf_ZXL[this] := zeroRefintArr();
[L1164]              __tmp__sum_balanceOf0[this] := 0;
[L1165]              __tmp__allowance_ZXL[this] := zeroRefRefintArr();
[L1166]              __tmp__sum_allowance1[this] := 0;
[L1168]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_ZXL[this][msgsender_MSG];
[L1169]              __tmp__balanceOf_ZXL[this][msgsender_MSG] := __tmp__totalSupply_ZXL[this];
[L1170]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_ZXL[this][msgsender_MSG];
[L1171]              __tmp__owner_ZXL[this] := msgsender_MSG;
[L1197]  RET         call ZXL_ZXL_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1198]  COND FALSE  !(revert)
[L166]   RET         call ZXL_ZXL__fail(this, msgsender_MSG, msgvalue_MSG);
[L167]               assume revert || gas < 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:25,779 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:25,779 INFO  L82        PathProgramCache]: Analyzing trace with hash 230267063, now seen corresponding path program 1 times
[2020-11-25 11:39:25,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:25,788 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:25,814 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:39:25,814 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:25,814 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:39:25,814 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:25,815 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:39:25,815 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:39:25,815 INFO  L87              Difference]: Start difference. First operand 1515 states and 1627 transitions. cyclomatic complexity: 115 Second operand 4 states.
[2020-11-25 11:39:25,952 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:25,952 INFO  L93              Difference]: Finished difference Result 2009 states and 2253 transitions.
[2020-11-25 11:39:25,952 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:39:25,952 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2009 states and 2253 transitions.
[2020-11-25 11:39:25,962 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 11:39:25,972 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2009 states to 1960 states and 2204 transitions.
[2020-11-25 11:39:25,972 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 916
[2020-11-25 11:39:25,973 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 916
[2020-11-25 11:39:25,973 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1960 states and 2204 transitions.
[2020-11-25 11:39:25,976 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:25,976 INFO  L728         BuchiCegarLoop]: Abstraction has 1960 states and 2204 transitions.
[2020-11-25 11:39:25,978 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1960 states and 2204 transitions.
[2020-11-25 11:39:25,994 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1960 to 1479.
[2020-11-25 11:39:25,994 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1479 states.
[2020-11-25 11:39:25,997 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1479 states to 1479 states and 1588 transitions.
[2020-11-25 11:39:25,997 INFO  L751         BuchiCegarLoop]: Abstraction has 1479 states and 1588 transitions.
[2020-11-25 11:39:25,997 INFO  L631         BuchiCegarLoop]: Abstraction has 1479 states and 1588 transitions.
[2020-11-25 11:39:25,997 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:39:25,997 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1479 states and 1588 transitions.
[2020-11-25 11:39:26,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:26,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:26,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:26,003 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:26,003 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND FALSE  !(choice == 5)
[L2152]  COND TRUE   choice == 4
[L2153]              gas := gas - 21000;
[L2154]  COND TRUE   gas >= 0
[L2155]              assume _value_s221 >= 0 && _value_s221 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2156]              assume msgvalue_MSG == 0;
[L2157]  CALL        call success_s221 := approve~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s221 := approve~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L1326]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_ZXL[this][msgsender_MSG][_spender_s221];
[L1327]              allowance_ZXL[this][msgsender_MSG][_spender_s221] := _value_s221;
[L1328]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_ZXL[this][msgsender_MSG][_spender_s221];
[L1329]              success_s221 := true;
[L337]   RET         call success_s221 := approve~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L338]               assume !revert && gas >= 0;
[L2157]  RET         call success_s221 := approve~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _spender_s221, _value_s221);
[L2198]  RET         call CorralChoice_ZXL(this);
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:26,007 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:26,007 INFO  L82        PathProgramCache]: Analyzing trace with hash 1676798249, now seen corresponding path program 1 times
[2020-11-25 11:39:26,008 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:26,024 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:26,250 INFO  L134       CoverageAnalysis]: Checked inductivity of 50 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 50 trivial. 0 not checked.
[2020-11-25 11:39:26,251 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:26,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 11:39:26,251 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:26,251 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 11:39:26,252 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=265, Unknown=0, NotChecked=0, Total=306
[2020-11-25 11:39:26,252 INFO  L87              Difference]: Start difference. First operand 1479 states and 1588 transitions. cyclomatic complexity: 112 Second operand 18 states.
[2020-11-25 11:39:27,596 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:27,596 INFO  L93              Difference]: Finished difference Result 1540 states and 1660 transitions.
[2020-11-25 11:39:27,597 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 11:39:27,597 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1540 states and 1660 transitions.
[2020-11-25 11:39:27,600 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:27,603 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1540 states to 1540 states and 1660 transitions.
[2020-11-25 11:39:27,604 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 697
[2020-11-25 11:39:27,604 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 697
[2020-11-25 11:39:27,604 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1540 states and 1660 transitions.
[2020-11-25 11:39:27,605 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:27,605 INFO  L728         BuchiCegarLoop]: Abstraction has 1540 states and 1660 transitions.
[2020-11-25 11:39:27,606 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1540 states and 1660 transitions.
[2020-11-25 11:39:27,616 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1540 to 1493.
[2020-11-25 11:39:27,616 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1493 states.
[2020-11-25 11:39:27,617 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1493 states to 1493 states and 1612 transitions.
[2020-11-25 11:39:27,618 INFO  L751         BuchiCegarLoop]: Abstraction has 1493 states and 1612 transitions.
[2020-11-25 11:39:27,618 INFO  L631         BuchiCegarLoop]: Abstraction has 1493 states and 1612 transitions.
[2020-11-25 11:39:27,618 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:39:27,618 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1493 states and 1612 transitions.
[2020-11-25 11:39:27,620 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:39:27,620 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:39:27,620 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:39:27,621 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:39:27,621 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZXL0 := false;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]     CALL        call main();
[L2188]              assume null == 0;
[L2189]  CALL        call this := FreshRefGenerator__success();
[L1115]              havoc newRef;
[L1116]              assume Alloc[newRef] == false;
[L1117]              Alloc[newRef] := true;
[L1118]              assume newRef != null;
[L2189]  RET         call this := FreshRefGenerator__success();
[L2190]              assume now >= 0;
[L2191]              assume DType[this] == ZXL;
[L2192]              assume msgvalue_MSG == 0;
[L2193]              gas := gas - 53000;
[L2194]  CALL        call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L169]   CALL        call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L1205]  CALL        call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1177]              assume msgsender_MSG != null;
[L1178]              Balance[this] := 0;
[L1179]              name_ZXL[this] := -1880820303;
[L1180]              symbol_ZXL[this] := -1880820303;
[L1181]              decimals_ZXL[this] := 18;
[L1182]              totalSupply_ZXL[this] := 13000000000000000000000000;
[L1183]              owner_ZXL[this] := null;
[L1184]              balanceOf_ZXL[this] := zeroRefintArr();
[L1185]              sum_balanceOf0[this] := 0;
[L1186]              allowance_ZXL[this] := zeroRefRefintArr();
[L1187]              sum_allowance1[this] := 0;
[L1189]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][msgsender_MSG];
[L1190]              balanceOf_ZXL[this][msgsender_MSG] := totalSupply_ZXL[this];
[L1191]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][msgsender_MSG];
[L1192]              owner_ZXL[this] := msgsender_MSG;
[L1205]  RET         call ZXL_ZXL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1206]  COND FALSE  !(revert)
[L169]   RET         call ZXL_ZXL__success(this, msgsender_MSG, msgvalue_MSG);
[L170]               assume !revert && gas >= 0;
[L2194]  RET         call ZXL_ZXL(this, msgsender_MSG, msgvalue_MSG);
[L2195]              assume !revert && gas >= 0;
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND FALSE  !(choice == 5)
[L2152]  COND FALSE  !(choice == 4)
[L2159]  COND FALSE  !(choice == 3)
[L2166]  COND FALSE  !(choice == 2)
[L2173]  COND TRUE   choice == 1
[L2174]              gas := gas - 21000;
[L2175]  COND TRUE   gas >= 0
[L2176]              assume _value_s350 >= 0 && _value_s350 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2177]              assume msgvalue_MSG == 0;
[L2178]  CALL        call success_s350 := burnFrom~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s350, _value_s350);
[L479]               havoc __exception;
[L480]               revert := false;
[L481]   COND FALSE  !(__exception)
[L503]   CALL        call success_s350 := burnFrom~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s350, _value_s350);
[L1425]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s350] >= _value_s350))
[L1429]  COND FALSE  !(!(_value_s350 <= allowance_ZXL[this][_from_s350][msgsender_MSG]))
[L1433]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s350];
[L1434]              balanceOf_ZXL[this][_from_s350] := (balanceOf_ZXL[this][_from_s350] - _value_s350) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1435]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s350];
[L1436]              sum_allowance1[_from_s350] := sum_allowance1[_from_s350] - allowance_ZXL[this][_from_s350][msgsender_MSG];
[L1437]              allowance_ZXL[this][_from_s350][msgsender_MSG] := (allowance_ZXL[this][_from_s350][msgsender_MSG] - _value_s350) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1438]              sum_allowance1[_from_s350] := sum_allowance1[_from_s350] + allowance_ZXL[this][_from_s350][msgsender_MSG];
[L1439]              totalSupply_ZXL[this] := (totalSupply_ZXL[this] - _value_s350) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1440]              assert { :EventEmitted "Burn_ZXL" } true;
[L1441]              success_s350 := true;
[L503]   RET         call success_s350 := burnFrom~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s350, _value_s350);
[L504]               assume !revert && gas >= 0;
[L2178]  RET         call success_s350 := burnFrom~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s350, _value_s350);
[L2198]  RET         call CorralChoice_ZXL(this);
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

Loop:
[L2198]  CALL        call CorralChoice_ZXL(this);
[L2062]              havoc msgsender_MSG;
[L2063]              havoc msgvalue_MSG;
[L2064]              havoc choice;
[L2065]              havoc __ret_0_name;
[L2066]              havoc __ret_0_symbol;
[L2067]              havoc __ret_0_decimals;
[L2068]              havoc __ret_0_totalSupply;
[L2069]              havoc arg353_s0;
[L2070]              havoc __ret_0_balanceOf;
[L2071]              havoc arg354_s0;
[L2072]              havoc arg355_s0;
[L2073]              havoc __ret_0_allowance;
[L2074]              havoc _to_s160;
[L2075]              havoc _value_s160;
[L2076]              havoc _from_s200;
[L2077]              havoc _to_s200;
[L2078]              havoc _value_s200;
[L2079]              havoc success_s200;
[L2080]              havoc _spender_s221;
[L2081]              havoc _value_s221;
[L2082]              havoc success_s221;
[L2083]              havoc _spender_s259;
[L2084]              havoc _value_s259;
[L2085]              havoc _extraData_s259;
[L2086]              havoc success_s259;
[L2087]              havoc _value_s295;
[L2088]              havoc success_s295;
[L2089]              havoc _from_s350;
[L2090]              havoc _value_s350;
[L2091]              havoc success_s350;
[L2092]              havoc tmpNow;
[L2093]              havoc gas;
[L2094]              assume gas > 4000000 && gas <= 8000000;
[L2095]              tmpNow := now;
[L2096]              havoc now;
[L2097]              assume now > tmpNow;
[L2098]              assume msgsender_MSG != null;
[L2099]              assume DType[msgsender_MSG] != tokenRecipient;
[L2100]              assume DType[msgsender_MSG] != ZXL;
[L2101]              Alloc[msgsender_MSG] := true;
[L2102]  COND FALSE  !(choice == 12)
[L2108]  COND FALSE  !(choice == 11)
[L2114]  COND FALSE  !(choice == 10)
[L2120]  COND FALSE  !(choice == 9)
[L2126]  COND FALSE  !(choice == 8)
[L2132]  COND FALSE  !(choice == 7)
[L2138]  COND FALSE  !(choice == 6)
[L2145]  COND TRUE   choice == 5
[L2146]              gas := gas - 21000;
[L2147]  COND TRUE   gas >= 0
[L2148]              assume _value_s200 >= 0 && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2149]              assume msgvalue_MSG == 0;
[L2150]  CALL        call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s200 != _to_s200 && ((_value_s200 > balanceOf_ZXL[this][_from_s200] || _value_s200 > allowance_ZXL[this][_from_s200][msgsender_MSG]) || balanceOf_ZXL[this][_to_s200] + _value_s200 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s200 >= 0) && _value_s200 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_to_s200] >= 0) && balanceOf_ZXL[this][_to_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_ZXL[this][_from_s200] >= 0) && balanceOf_ZXL[this][_from_s200] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_ZXL[this][_from_s200][msgsender_MSG] >= 0) && allowance_ZXL[this][_from_s200][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZXL0 := true;
[L2]                 call_transferFrom_ZXL0 := false;
[L2]                 revert := revert_hold;
[L259]               havoc __exception;
[L260]               revert := false;
[L261]   COND FALSE  !(__exception)
[L283]   CALL        call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1300]  COND FALSE  !(!(_value_s200 <= allowance_ZXL[this][_from_s200][msgsender_MSG]))
[L1304]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] - allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1305]              allowance_ZXL[this][_from_s200][msgsender_MSG] := (allowance_ZXL[this][_from_s200][msgsender_MSG] - _value_s200) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1306]              sum_allowance1[_from_s200] := sum_allowance1[_from_s200] + allowance_ZXL[this][_from_s200][msgsender_MSG];
[L1307]  CALL        call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1241]              __var_1 := null;
[L1242]  COND FALSE  !(!(_to_s145 != null))
[L1246]  COND FALSE  !(!(balanceOf_ZXL[this][_from_s145] >= _value_s145))
[L1250]  COND FALSE  !(!((balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_ZXL[this][_to_s145]))
[L1254]              previousBalances_s145 := (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1255]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_from_s145];
[L1256]              balanceOf_ZXL[this][_from_s145] := (balanceOf_ZXL[this][_from_s145] - _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_from_s145];
[L1258]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_ZXL[this][_to_s145];
[L1259]              balanceOf_ZXL[this][_to_s145] := (balanceOf_ZXL[this][_to_s145] + _value_s145) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1260]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_ZXL[this][_to_s145];
[L1261]              assert { :EventEmitted "Transfer_ZXL" } true;
[L1262]              assert (balanceOf_ZXL[this][_from_s145] + balanceOf_ZXL[this][_to_s145]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s145;
[L1307]  RET         call _transfer~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L1308]  COND FALSE  !(revert)
[L1311]              success_s200 := true;
[L283]   RET         call success_s200 := transferFrom~address~address~uint256_ZXL__success(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L284]               assume !revert && gas >= 0;
[L2150]  RET         call success_s200 := transferFrom~address~address~uint256_ZXL(this, msgsender_MSG, msgvalue_MSG, _from_s200, _to_s200, _value_s200);
[L2198]  RET         call CorralChoice_ZXL(this);

[2020-11-25 11:39:27,624 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:39:27,624 INFO  L82        PathProgramCache]: Analyzing trace with hash 1832912556, now seen corresponding path program 1 times
[2020-11-25 11:39:27,625 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:39:27,637 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:39:27,704 INFO  L134       CoverageAnalysis]: Checked inductivity of 50 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 50 trivial. 0 not checked.
[2020-11-25 11:39:27,705 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:39:27,705 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 11:39:27,705 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:39:27,705 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 11:39:27,705 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=84, Unknown=0, NotChecked=0, Total=110
[2020-11-25 11:39:27,705 INFO  L87              Difference]: Start difference. First operand 1493 states and 1612 transitions. cyclomatic complexity: 124 Second operand 11 states.
[2020-11-25 11:39:28,187 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:39:28,187 INFO  L93              Difference]: Finished difference Result 869 states and 937 transitions.
[2020-11-25 11:39:28,187 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 11:39:28,187 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 869 states and 937 transitions.
[2020-11-25 11:39:28,189 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:39:28,189 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 869 states to 0 states and 0 transitions.
[2020-11-25 11:39:28,189 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:39:28,189 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:39:28,189 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:39:28,189 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:39:28,189 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:39:28,189 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:39:28,190 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:39:28,190 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:39:28,190 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:39:28,190 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:39:28,190 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:39:28,193 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:39:28 BasicIcfg
[2020-11-25 11:39:28,193 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:39:28,193 INFO  L168              Benchmark]: Toolchain (without parser) took 6152.31 ms. Allocated memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: 457.2 MB). Free memory was 940.6 MB in the beginning and 1.4 GB in the end (delta: -450.8 MB). Peak memory consumption was 6.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,194 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,194 INFO  L168              Benchmark]: Boogie Preprocessor took 72.93 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,194 INFO  L168              Benchmark]: UtopiaSpecLang took 47.52 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,195 INFO  L168              Benchmark]: Boogie Printer took 10.58 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,195 INFO  L168              Benchmark]: RCFGBuilder took 523.34 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.7 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,195 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.77 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,195 INFO  L168              Benchmark]: BÃ¼chi Program Product took 929.42 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 861.8 MB in the beginning and 884.9 MB in the end (delta: -23.2 MB). Peak memory consumption was 145.8 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,196 INFO  L168              Benchmark]: BlockEncodingV2 took 70.24 ms. Allocated memory is still 1.1 GB. Free memory was 884.9 MB in the beginning and 849.9 MB in the end (delta: 35.1 MB). Peak memory consumption was 35.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,196 INFO  L168              Benchmark]: BuchiAutomizer took 4459.65 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 392.7 MB). Free memory was 849.9 MB in the beginning and 1.4 GB in the end (delta: -541.5 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:39:28,199 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1900 locations, 3176 edges
  - StatisticsResult: Encoded RCFG
    1862 locations, 3093 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 72.93 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 47.52 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.58 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 523.34 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.7 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.77 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 929.42 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 861.8 MB in the beginning and 884.9 MB in the end (delta: -23.2 MB). Peak memory consumption was 145.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 70.24 ms. Allocated memory is still 1.1 GB. Free memory was 884.9 MB in the beginning and 849.9 MB in the end (delta: 35.1 MB). Peak memory consumption was 35.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4459.65 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 392.7 MB). Free memory was 849.9 MB in the beginning and 1.4 GB in the end (delta: -541.5 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    817 locations, 988 edges
  - StatisticsResult: BuchiProgram size
    1900 locations, 3176 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.4s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.6s. Construction of modules took 2.4s. BÃ¼chi inclusion checks took 0.9s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 926 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1580 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 8981 SDtfs, 8189 SDslu, 18514 SDs, 0 SdLazy, 27652 SolverSat, 1335 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ZXL0) ==> ( <>(fail_transferFrom_ZXL0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
