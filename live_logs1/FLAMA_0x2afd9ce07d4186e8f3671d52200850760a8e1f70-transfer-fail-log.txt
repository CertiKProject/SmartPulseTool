This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:31:34,238 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:31:34,239 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:31:34,251 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:31:34,251 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:31:34,252 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:31:34,253 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:31:34,255 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:31:34,256 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:31:34,257 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:31:34,258 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:31:34,258 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:31:34,259 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:31:34,259 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:31:34,260 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:31:34,261 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:31:34,261 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:31:34,262 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:31:34,264 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:31:34,265 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:31:34,266 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:31:34,267 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:31:34,268 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:31:34,268 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:31:34,269 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:31:34,269 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:31:34,269 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:31:34,270 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:31:34,270 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:31:34,270 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:31:34,271 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:31:34,272 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:31:34,273 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:31:34,274 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:31:34,275 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:31:34,275 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:31:34,276 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:31:34,276 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:31:34,276 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:31:34,277 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:31:34,278 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:31:34,278 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:31:34,288 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:31:34,288 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:31:34,289 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:31:34,289 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:31:34,289 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:31:34,289 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:31:34,290 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:31:34,290 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:31:34,290 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:31:34,291 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:31:34,291 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:31:34,292 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:31:34,312 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:31:34,323 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:31:34,326 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:31:34,327 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:31:34,327 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:31:34,328 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl
[2020-11-25 16:31:34,328 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl'
[2020-11-25 16:31:34,404 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:31:34,405 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:31:34,405 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:31:34,405 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:31:34,405 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:31:34,423 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,425 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,456 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,457 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,474 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,482 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,488 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,497 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:31:34,497 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:31:34,498 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:31:34,500 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:31:34,504 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/1) ...
[2020-11-25 16:31:34,519 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FLAMA.transfer(to, value), msg.sender != to && (value > _balances_FLAMA[this][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][msg.sender] >= 0 &&  _balances_FLAMA[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transfer)))
[2020-11-25 16:31:34,525 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FLAMA.transfer(to, value), msg.sender != to && (value > _balances_FLAMA[this][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][msg.sender] >= 0 &&  _balances_FLAMA[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transfer)))
[2020-11-25 16:31:34,533 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FLAMA.transfer(to, value), msg.sender != to && (value > _balances_FLAMA[this][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][msg.sender] >= 0 &&  _balances_FLAMA[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transfer)))
[2020-11-25 16:31:34,540 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s343 && ( value_s343>_balances_FLAMA[this][msg.sender] || ( _balances_FLAMA[this][to_s343] + value_s343 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s343>=0 ) && value_s343<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_FLAMA[this][to_s343]>=0 ) && _balances_FLAMA[this][to_s343]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_FLAMA[this][msg.sender]>=0 ) && _balances_FLAMA[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>],IdentifierExpression[to_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],[IdentifierExpression[to_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],IdentifierExpression[value_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],[IdentifierExpression[to_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],[IdentifierExpression[to_s343,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:31:34,544 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FLAMA.transfer(to, value), msg.sender != to && (value > _balances_FLAMA[this][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][msg.sender] >= 0 &&  _balances_FLAMA[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transfer)))
[2020-11-25 16:31:34,544 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_FLAMA0) ==> ( <>AP(fail_transfer_FLAMA0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:31:34,550 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:31:34 PropertyContainer
[2020-11-25 16:31:34,550 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:31:34,550 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:31:34,550 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:31:34,551 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:31:34,551 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/2) ...
[2020-11-25 16:31:34,552 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:31:34,552 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:31:34,562 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:31:34" (2/2) ...
[2020-11-25 16:31:34,563 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:31:34,563 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:31:34,563 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:31:34,563 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:31:34,564 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/2) ...
[2020-11-25 16:31:34,617 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:31:34,617 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:31:34,617 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:31:34,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:31:34,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:31:34,618 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:31:34,619 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:31:34,619 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:31:34,619 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA
[2020-11-25 16:31:34,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA
[2020-11-25 16:31:34,619 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA_NoBaseCtor__success
[2020-11-25 16:31:34,619 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA
[2020-11-25 16:31:34,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA
[2020-11-25 16:31:34,619 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA
[2020-11-25 16:31:34,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA
[2020-11-25 16:31:34,619 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA
[2020-11-25 16:31:34,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA
[2020-11-25 16:31:34,621 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA
[2020-11-25 16:31:34,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA
[2020-11-25 16:31:34,621 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA
[2020-11-25 16:31:34,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA
[2020-11-25 16:31:34,621 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA
[2020-11-25 16:31:34,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA
[2020-11-25 16:31:34,621 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA
[2020-11-25 16:31:34,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA
[2020-11-25 16:31:34,621 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA
[2020-11-25 16:31:34,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA
[2020-11-25 16:31:34,621 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA
[2020-11-25 16:31:34,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA
[2020-11-25 16:31:34,621 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA
[2020-11-25 16:31:34,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA
[2020-11-25 16:31:34,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA
[2020-11-25 16:31:34,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_FLAMA__success
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_FLAMA__success
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:31:34,622 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FLAMA
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,623 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA__success
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA__fail
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA_NoBaseCtor__fail
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA__success
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA__fail
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA__success
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA__fail
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA__success
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA__fail
[2020-11-25 16:31:34,624 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA__success
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA__fail
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA__success
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA__fail
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA__success
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA__fail
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA__success
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA__fail
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA__success
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA__success
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,625 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA__success
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:31:34,626 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:31:34,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:31:34,626 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,627 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA__fail
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA__success
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA_NoBaseCtor__fail
[2020-11-25 16:31:34,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA_NoBaseCtor__success
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA__fail
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA__success
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA__fail
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA__success
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA__fail
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA__success
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA__fail
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA__success
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA__fail
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA__success
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA__fail
[2020-11-25 16:31:34,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA__success
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA__fail
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA__success
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA__success
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA__success
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA__success
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:31:34,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_FLAMA__success
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_FLAMA__fail
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_FLAMA__success
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:31:34,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:31:34,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:31:34,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:31:34,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:31:34,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FLAMA
[2020-11-25 16:31:34,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:31:34,632 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:31:34,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:31:34,816 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:31:34,816 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:31:35,165 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:31:35,166 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 16:31:35,167 INFO  L202        PluginConnector]: Adding new model FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:31:35 BoogieIcfgContainer
[2020-11-25 16:31:35,167 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:31:34" (2/2) ...
[2020-11-25 16:31:35,167 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:31:35,168 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@76d4a780 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:31:35, skipping insertion in model container
[2020-11-25 16:31:35,168 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:31:35,168 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:31:35,168 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:31:35,170 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:31:35,170 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/3) ...
[2020-11-25 16:31:35,170 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@37ee82ff and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:31:35, skipping insertion in model container
[2020-11-25 16:31:35,170 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:31:34" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:31:35,207 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:31:35 NWAContainer
[2020-11-25 16:31:35,207 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:31:35,207 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:31:35,207 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:31:35,208 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:31:35,209 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:31:35" (3/4) ...
[2020-11-25 16:31:35,209 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@21283fa0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:31:35, skipping insertion in model container
[2020-11-25 16:31:35,209 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:31:35" (4/4) ...
[2020-11-25 16:31:35,213 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:31:35,215 INFO  L110   BuchiProductObserver]: Initial RCFG 964 locations, 1208 edges
[2020-11-25 16:31:35,216 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:31:35,227 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:31:36,232 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:31:36,236 INFO  L110   BuchiProductObserver]: BuchiProgram size 2312 locations, 3913 edges
[2020-11-25 16:31:36,236 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:31:36 BoogieIcfgContainer
[2020-11-25 16:31:36,236 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:31:36,237 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:31:36,237 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:31:36,238 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:31:36,239 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:31:36" (1/1) ...
[2020-11-25 16:31:36,293 INFO  L313           BlockEncoder]: Initial Icfg 2312 locations, 3913 edges
[2020-11-25 16:31:36,294 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:31:36,294 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:31:36,294 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:31:36,295 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:31:36,302 INFO  L70    emoveInfeasibleEdges]: Removed 45 edges and 10 locations because of local infeasibility
[2020-11-25 16:31:36,307 INFO  L70        RemoveSinkStates]: Removed 80 edges and 40 locations by removing sink states
[2020-11-25 16:31:36,314 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:31:36,317 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:31:36,319 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:31:36,319 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:31:36,327 INFO  L313           BlockEncoder]: Encoded RCFG 2244 locations, 3762 edges
[2020-11-25 16:31:36,328 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:31:36 BasicIcfg
[2020-11-25 16:31:36,328 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:31:36,329 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:31:36,329 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:31:36,333 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:31:36,333 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:31:36,334 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:31:34" (1/6) ...
[2020-11-25 16:31:36,335 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:31:36, skipping insertion in model container
[2020-11-25 16:31:36,335 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:31:36,335 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:31:34" (2/6) ...
[2020-11-25 16:31:36,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:31:36, skipping insertion in model container
[2020-11-25 16:31:36,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:31:36,336 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:31:35" (3/6) ...
[2020-11-25 16:31:36,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:31:36, skipping insertion in model container
[2020-11-25 16:31:36,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:31:36,336 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:31:35" (4/6) ...
[2020-11-25 16:31:36,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:31:36, skipping insertion in model container
[2020-11-25 16:31:36,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:31:36,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:31:36" (5/6) ...
[2020-11-25 16:31:36,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:31:36, skipping insertion in model container
[2020-11-25 16:31:36,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:31:36,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:31:36" (6/6) ...
[2020-11-25 16:31:36,338 INFO  L404   chiAutomizerObserver]: Analyzing ICFG FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl_BEv2
[2020-11-25 16:31:36,377 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:31:36,378 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:31:36,378 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:31:36,378 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:31:36,378 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:31:36,378 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:31:36,378 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:31:36,378 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:31:36,378 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:31:36,403 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2244 states.
[2020-11-25 16:31:36,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:36,451 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:36,452 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:36,461 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:36,461 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:36,461 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:31:36,461 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2244 states.
[2020-11-25 16:31:36,477 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:36,478 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:36,478 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:36,480 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:36,480 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND TRUE   revert
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:36,497 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:36,498 INFO  L82        PathProgramCache]: Analyzing trace with hash 556990956, now seen corresponding path program 1 times
[2020-11-25 16:31:36,503 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:36,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:31:36,569 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:31:36,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:31:36,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:31:36,575 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:31:36,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:31:36,695 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:31:36,698 INFO  L87              Difference]: Start difference. First operand 2244 states. Second operand 3 states.
[2020-11-25 16:31:36,850 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:31:36,851 INFO  L93              Difference]: Finished difference Result 1693 states and 1884 transitions.
[2020-11-25 16:31:36,851 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:31:36,852 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1693 states and 1884 transitions.
[2020-11-25 16:31:36,865 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:36,882 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1693 states to 1693 states and 1884 transitions.
[2020-11-25 16:31:36,883 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:31:36,884 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 495
[2020-11-25 16:31:36,885 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1693 states and 1884 transitions.
[2020-11-25 16:31:36,891 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:31:36,891 INFO  L728         BuchiCegarLoop]: Abstraction has 1693 states and 1884 transitions.
[2020-11-25 16:31:36,908 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1693 states and 1884 transitions.
[2020-11-25 16:31:36,943 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1693 to 1693.
[2020-11-25 16:31:36,943 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1693 states.
[2020-11-25 16:31:36,948 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1693 states to 1693 states and 1884 transitions.
[2020-11-25 16:31:36,949 INFO  L751         BuchiCegarLoop]: Abstraction has 1693 states and 1884 transitions.
[2020-11-25 16:31:36,949 INFO  L631         BuchiCegarLoop]: Abstraction has 1693 states and 1884 transitions.
[2020-11-25 16:31:36,949 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:31:36,949 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1693 states and 1884 transitions.
[2020-11-25 16:31:36,955 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:36,955 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:36,955 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:36,957 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:36,957 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND TRUE   revert
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND TRUE   revert
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND TRUE   !(to_s598 != null)
[L1764]              revert := true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND TRUE   revert
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND TRUE   !(to_s598 != null)
[L1764]              revert := true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND TRUE   revert
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:36,962 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:36,962 INFO  L82        PathProgramCache]: Analyzing trace with hash -1276739926, now seen corresponding path program 1 times
[2020-11-25 16:31:36,963 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:36,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:31:36,997 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:31:36,998 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:31:36,998 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:31:36,999 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:31:37,000 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:31:37,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:31:37,000 INFO  L87              Difference]: Start difference. First operand 1693 states and 1884 transitions. cyclomatic complexity: 193 Second operand 4 states.
[2020-11-25 16:31:37,330 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:31:37,330 INFO  L93              Difference]: Finished difference Result 2268 states and 2513 transitions.
[2020-11-25 16:31:37,330 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:31:37,331 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2268 states and 2513 transitions.
[2020-11-25 16:31:37,344 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:31:37,357 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2268 states to 2122 states and 2345 transitions.
[2020-11-25 16:31:37,358 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 599
[2020-11-25 16:31:37,358 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 604
[2020-11-25 16:31:37,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2122 states and 2345 transitions.
[2020-11-25 16:31:37,363 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:31:37,363 INFO  L728         BuchiCegarLoop]: Abstraction has 2122 states and 2345 transitions.
[2020-11-25 16:31:37,365 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2122 states and 2345 transitions.
[2020-11-25 16:31:37,390 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2122 to 1860.
[2020-11-25 16:31:37,390 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1860 states.
[2020-11-25 16:31:37,394 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1860 states to 1860 states and 2021 transitions.
[2020-11-25 16:31:37,394 INFO  L751         BuchiCegarLoop]: Abstraction has 1860 states and 2021 transitions.
[2020-11-25 16:31:37,394 INFO  L631         BuchiCegarLoop]: Abstraction has 1860 states and 2021 transitions.
[2020-11-25 16:31:37,394 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:31:37,394 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1860 states and 2021 transitions.
[2020-11-25 16:31:37,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:31:37,400 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:37,401 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:37,403 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:37,404 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:37,409 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:37,409 INFO  L82        PathProgramCache]: Analyzing trace with hash 870507385, now seen corresponding path program 1 times
[2020-11-25 16:31:37,410 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:37,435 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:31:37,633 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 8 proven. 0 refuted. 0 times theorem prover too weak. 7 trivial. 0 not checked.
[2020-11-25 16:31:37,633 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:31:37,633 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:31:37,634 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:31:37,634 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:31:37,634 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:31:37,634 INFO  L87              Difference]: Start difference. First operand 1860 states and 2021 transitions. cyclomatic complexity: 163 Second operand 16 states.
[2020-11-25 16:31:39,306 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:31:39,306 INFO  L93              Difference]: Finished difference Result 1935 states and 2108 transitions.
[2020-11-25 16:31:39,306 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 16:31:39,306 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1935 states and 2108 transitions.
[2020-11-25 16:31:39,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:31:39,320 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1935 states to 1935 states and 2108 transitions.
[2020-11-25 16:31:39,320 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 569
[2020-11-25 16:31:39,320 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 569
[2020-11-25 16:31:39,321 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1935 states and 2108 transitions.
[2020-11-25 16:31:39,323 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:31:39,323 INFO  L728         BuchiCegarLoop]: Abstraction has 1935 states and 2108 transitions.
[2020-11-25 16:31:39,325 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1935 states and 2108 transitions.
[2020-11-25 16:31:39,343 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1935 to 1788.
[2020-11-25 16:31:39,344 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1788 states.
[2020-11-25 16:31:39,348 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1788 states to 1788 states and 1928 transitions.
[2020-11-25 16:31:39,348 INFO  L751         BuchiCegarLoop]: Abstraction has 1788 states and 1928 transitions.
[2020-11-25 16:31:39,348 INFO  L631         BuchiCegarLoop]: Abstraction has 1788 states and 1928 transitions.
[2020-11-25 16:31:39,348 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:31:39,348 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1788 states and 1928 transitions.
[2020-11-25 16:31:39,353 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:39,353 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:39,353 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:39,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:39,357 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND TRUE   __exception
[L264]               __tmp__Balance := Balance;
[L265]               __tmp__DType := DType;
[L266]               __tmp__Alloc := Alloc;
[L267]               __tmp__balance_ADDR := balance_ADDR;
[L268]               __tmp__M_Ref_int := M_Ref_int;
[L269]               __tmp__sum__balances0 := sum__balances0;
[L270]               __tmp__alloc__allowed_FLAMA_lvl0 := alloc__allowed_FLAMA_lvl0;
[L271]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L272]               __tmp__sum__allowed1 := sum__allowed1;
[L273]               __tmp__Length := Length;
[L274]               __tmp__now := now;
[L275]               __tmp___name_FLAMA := _name_FLAMA;
[L276]               __tmp___symbol_FLAMA := _symbol_FLAMA;
[L277]               __tmp___decimals_FLAMA := _decimals_FLAMA;
[L278]               __tmp___totalSupply_FLAMA := _totalSupply_FLAMA;
[L279]               __tmp___balances_FLAMA := _balances_FLAMA;
[L280]               __tmp___allowed_FLAMA := _allowed_FLAMA;
[L281]   CALL        call FLAMA_FLAMA__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1440]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1362]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1347]              assume msgsender_MSG != null;
[L1348]              __tmp__Balance[this] := 0;
[L1362]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1363]  COND FALSE  !(revert)
[L1440]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1441]  COND FALSE  !(revert)
[L1444]  CALL        call FLAMA_FLAMA_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1395]              assume msgsender_MSG != null;
[L1396]              __tmp__Balance[this] := 0;
[L1397]              __tmp___name_FLAMA[this] := 965843050;
[L1398]              __tmp___symbol_FLAMA[this] := 965843050;
[L1399]              __tmp___decimals_FLAMA[this] := 0;
[L1400]              __tmp___totalSupply_FLAMA[this] := 0;
[L1401]              __tmp___balances_FLAMA[this] := zeroRefintArr();
[L1402]              __tmp__sum__balances0[this] := 0;
[L1403]              __tmp___allowed_FLAMA[this] := zeroRefRefintArr();
[L1404]              __tmp__sum__allowed1[this] := 0;
[L1406]              __tmp___name_FLAMA[this] := name_s264;
[L1407]              __tmp___symbol_FLAMA[this] := symbol_s264;
[L1408]              __tmp___decimals_FLAMA[this] := decimals_s264;
[L1409]              __tmp___totalSupply_FLAMA[this] := totalSupply_s264;
[L1410]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_FLAMA[this][msgsender_MSG];
[L1411]              __tmp___balances_FLAMA[this][msgsender_MSG] := __tmp___totalSupply_FLAMA[this];
[L1412]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_FLAMA[this][msgsender_MSG];
[L1444]  RET         call FLAMA_FLAMA_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1445]  COND FALSE  !(revert)
[L281]   RET         call FLAMA_FLAMA__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L282]               assume revert || gas < 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:39,360 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:39,360 INFO  L82        PathProgramCache]: Analyzing trace with hash -683230332, now seen corresponding path program 1 times
[2020-11-25 16:31:39,361 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:39,367 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:31:39,391 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 16:31:39,391 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:31:39,391 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:31:39,391 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:31:39,391 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:31:39,391 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:31:39,392 INFO  L87              Difference]: Start difference. First operand 1788 states and 1928 transitions. cyclomatic complexity: 143 Second operand 4 states.
[2020-11-25 16:31:39,522 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:31:39,522 INFO  L93              Difference]: Finished difference Result 2304 states and 2580 transitions.
[2020-11-25 16:31:39,522 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:31:39,522 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2304 states and 2580 transitions.
[2020-11-25 16:31:39,529 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:31:39,535 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2304 states to 2240 states and 2516 transitions.
[2020-11-25 16:31:39,535 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 646
[2020-11-25 16:31:39,536 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 646
[2020-11-25 16:31:39,536 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2240 states and 2516 transitions.
[2020-11-25 16:31:39,538 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:31:39,538 INFO  L728         BuchiCegarLoop]: Abstraction has 2240 states and 2516 transitions.
[2020-11-25 16:31:39,540 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2240 states and 2516 transitions.
[2020-11-25 16:31:39,556 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2240 to 1724.
[2020-11-25 16:31:39,556 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1724 states.
[2020-11-25 16:31:39,559 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1724 states to 1724 states and 1863 transitions.
[2020-11-25 16:31:39,559 INFO  L751         BuchiCegarLoop]: Abstraction has 1724 states and 1863 transitions.
[2020-11-25 16:31:39,559 INFO  L631         BuchiCegarLoop]: Abstraction has 1724 states and 1863 transitions.
[2020-11-25 16:31:39,559 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:31:39,559 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1724 states and 1863 transitions.
[2020-11-25 16:31:39,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:39,562 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:39,562 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:39,563 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:39,564 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND FALSE  !(choice == 7)
[L2529]  COND TRUE   choice == 6
[L2530]              gas := gas - 21000;
[L2531]  COND TRUE   gas >= 0
[L2532]              assume value_s229 >= 0 && value_s229 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2533]              assume msgvalue_MSG == 0;
[L2534]  CALL        call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L192]               havoc __exception;
[L193]               revert := false;
[L194]   COND FALSE  !(__exception)
[L215]   CALL        call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L1386]  CALL        call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1834]              __var_11 := null;
[L1835]  COND FALSE  !(!(account_s640 != null))
[L1839]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1839]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1840]  COND FALSE  !(revert)
[L1843]              _totalSupply_FLAMA[this] := __var_12;
[L1844]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1844]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1845]  COND FALSE  !(revert)
[L1848]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][account_s640];
[L1849]              _balances_FLAMA[this][account_s640] := __var_13;
[L1850]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][account_s640];
[L1851]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1386]  RET         call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1387]  COND FALSE  !(revert)
[L215]   RET         call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L216]               assume !revert && gas >= 0;
[L2534]  RET         call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:39,567 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:39,567 INFO  L82        PathProgramCache]: Analyzing trace with hash -461987318, now seen corresponding path program 1 times
[2020-11-25 16:31:39,568 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:39,590 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:31:39,769 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 5 proven. 6 refuted. 0 times theorem prover too weak. 59 trivial. 0 not checked.
[2020-11-25 16:31:39,769 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:31:39,769 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 16:31:39,770 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:31:39,770 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 16:31:39,770 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=301, Unknown=0, NotChecked=0, Total=342
[2020-11-25 16:31:39,771 INFO  L87              Difference]: Start difference. First operand 1724 states and 1863 transitions. cyclomatic complexity: 142 Second operand 19 states.
[2020-11-25 16:31:41,677 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:31:41,677 INFO  L93              Difference]: Finished difference Result 1838 states and 1990 transitions.
[2020-11-25 16:31:41,677 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 16:31:41,677 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1838 states and 1990 transitions.
[2020-11-25 16:31:41,682 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:41,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1838 states to 1830 states and 1982 transitions.
[2020-11-25 16:31:41,686 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 541
[2020-11-25 16:31:41,686 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 541
[2020-11-25 16:31:41,686 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1830 states and 1982 transitions.
[2020-11-25 16:31:41,688 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:31:41,688 INFO  L728         BuchiCegarLoop]: Abstraction has 1830 states and 1982 transitions.
[2020-11-25 16:31:41,689 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1830 states and 1982 transitions.
[2020-11-25 16:31:41,699 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1830 to 1792.
[2020-11-25 16:31:41,699 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1792 states.
[2020-11-25 16:31:41,703 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1792 states to 1792 states and 1941 transitions.
[2020-11-25 16:31:41,703 INFO  L751         BuchiCegarLoop]: Abstraction has 1792 states and 1941 transitions.
[2020-11-25 16:31:41,703 INFO  L631         BuchiCegarLoop]: Abstraction has 1792 states and 1941 transitions.
[2020-11-25 16:31:41,703 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:31:41,703 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1792 states and 1941 transitions.
[2020-11-25 16:31:41,707 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:41,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:41,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:41,709 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:41,709 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND FALSE  !(choice == 7)
[L2529]  COND TRUE   choice == 6
[L2530]              gas := gas - 21000;
[L2531]  COND TRUE   gas >= 0
[L2532]              assume value_s229 >= 0 && value_s229 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2533]              assume msgvalue_MSG == 0;
[L2534]  CALL        call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L192]               havoc __exception;
[L193]               revert := false;
[L194]   COND FALSE  !(__exception)
[L215]   CALL        call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L1386]  CALL        call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1834]              __var_11 := null;
[L1835]  COND FALSE  !(!(account_s640 != null))
[L1839]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1839]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1840]  COND FALSE  !(revert)
[L1843]              _totalSupply_FLAMA[this] := __var_12;
[L1844]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1844]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1845]  COND FALSE  !(revert)
[L1848]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][account_s640];
[L1849]              _balances_FLAMA[this][account_s640] := __var_13;
[L1850]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][account_s640];
[L1851]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1386]  RET         call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1387]  COND FALSE  !(revert)
[L215]   RET         call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L216]               assume !revert && gas >= 0;
[L2534]  RET         call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:41,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:41,713 INFO  L82        PathProgramCache]: Analyzing trace with hash -1133213810, now seen corresponding path program 1 times
[2020-11-25 16:31:41,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:41,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:31:42,165 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 12 proven. 1 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-11-25 16:31:42,165 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:31:42,166 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 16:31:42,166 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:31:42,166 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 16:31:42,166 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=578, Unknown=0, NotChecked=0, Total=650
[2020-11-25 16:31:42,166 INFO  L87              Difference]: Start difference. First operand 1792 states and 1941 transitions. cyclomatic complexity: 152 Second operand 26 states.
[2020-11-25 16:31:44,454 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:31:44,454 INFO  L93              Difference]: Finished difference Result 1834 states and 1990 transitions.
[2020-11-25 16:31:44,454 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 16:31:44,454 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1834 states and 1990 transitions.
[2020-11-25 16:31:44,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:44,461 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1834 states to 1834 states and 1990 transitions.
[2020-11-25 16:31:44,461 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 543
[2020-11-25 16:31:44,462 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 543
[2020-11-25 16:31:44,462 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1834 states and 1990 transitions.
[2020-11-25 16:31:44,463 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:31:44,463 INFO  L728         BuchiCegarLoop]: Abstraction has 1834 states and 1990 transitions.
[2020-11-25 16:31:44,465 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1834 states and 1990 transitions.
[2020-11-25 16:31:44,473 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1834 to 1796.
[2020-11-25 16:31:44,473 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1796 states.
[2020-11-25 16:31:44,474 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1796 states to 1796 states and 1949 transitions.
[2020-11-25 16:31:44,475 INFO  L751         BuchiCegarLoop]: Abstraction has 1796 states and 1949 transitions.
[2020-11-25 16:31:44,475 INFO  L631         BuchiCegarLoop]: Abstraction has 1796 states and 1949 transitions.
[2020-11-25 16:31:44,475 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:31:44,475 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1796 states and 1949 transitions.
[2020-11-25 16:31:44,477 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:44,477 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:44,477 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:44,478 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:44,478 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:44,482 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:44,482 INFO  L82        PathProgramCache]: Analyzing trace with hash -859113440, now seen corresponding path program 1 times
[2020-11-25 16:31:44,483 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:44,521 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:44,581 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:44,646 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:44,647 INFO  L82        PathProgramCache]: Analyzing trace with hash -1398045898, now seen corresponding path program 1 times
[2020-11-25 16:31:44,647 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:44,648 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:31:44,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:31:44,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:31:44,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:31:44,652 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 16:31:44,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:31:44,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:31:44,653 INFO  L87              Difference]: Start difference. First operand 1796 states and 1949 transitions. cyclomatic complexity: 157 Second operand 4 states.
[2020-11-25 16:31:44,742 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:31:44,742 INFO  L93              Difference]: Finished difference Result 1917 states and 2069 transitions.
[2020-11-25 16:31:44,742 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:31:44,742 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1917 states and 2069 transitions.
[2020-11-25 16:31:44,748 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:31:44,752 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1917 states to 1917 states and 2069 transitions.
[2020-11-25 16:31:44,752 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 538
[2020-11-25 16:31:44,752 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 538
[2020-11-25 16:31:44,753 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1917 states and 2069 transitions.
[2020-11-25 16:31:44,754 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:31:44,754 INFO  L728         BuchiCegarLoop]: Abstraction has 1917 states and 2069 transitions.
[2020-11-25 16:31:44,755 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1917 states and 2069 transitions.
[2020-11-25 16:31:44,764 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1917 to 1796.
[2020-11-25 16:31:44,764 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1796 states.
[2020-11-25 16:31:44,765 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1796 states to 1796 states and 1925 transitions.
[2020-11-25 16:31:44,765 INFO  L751         BuchiCegarLoop]: Abstraction has 1796 states and 1925 transitions.
[2020-11-25 16:31:44,765 INFO  L631         BuchiCegarLoop]: Abstraction has 1796 states and 1925 transitions.
[2020-11-25 16:31:44,765 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:31:44,765 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1796 states and 1925 transitions.
[2020-11-25 16:31:44,769 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:31:44,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:31:44,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:31:44,770 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:31:44,770 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_FLAMA0 := false;
[L2]                 call_transfer_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s343 && (value_s343 > _balances_FLAMA[this][msgsender_MSG] || _balances_FLAMA[this][to_s343] + value_s343 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s343 >= 0) && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s343] >= 0) && _balances_FLAMA[this][to_s343] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][msgsender_MSG] >= 0) && _balances_FLAMA[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_FLAMA0 := true;
[L2]                 call_transfer_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:31:44,774 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:44,774 INFO  L82        PathProgramCache]: Analyzing trace with hash -859113440, now seen corresponding path program 2 times
[2020-11-25 16:31:44,774 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:44,810 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:44,845 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:44,873 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:44,873 INFO  L82        PathProgramCache]: Analyzing trace with hash -8418392, now seen corresponding path program 1 times
[2020-11-25 16:31:44,873 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:44,885 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:44,893 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:44,904 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:31:44,905 INFO  L82        PathProgramCache]: Analyzing trace with hash -717253527, now seen corresponding path program 1 times
[2020-11-25 16:31:44,905 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:31:44,984 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:45,074 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:31:45,686 WARN  L188               SmtUtils]: Spent 468.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 214
Garbage collection #1: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 16:31:46,150 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 101 DAG size of output: 96
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
[2020-11-25 16:31:46,408 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 116
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
[2020-11-25 16:31:46,523 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification that was a NOOP. DAG size: 83
[2020-11-25 16:31:46,907 WARN  L188               SmtUtils]: Spent 382.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 211
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
[2020-11-25 16:31:47,187 WARN  L188               SmtUtils]: Spent 273.00 ms on a formula simplification that was a NOOP. DAG size: 198
[2020-11-25 16:31:47,811 WARN  L188               SmtUtils]: Spent 622.00 ms on a formula simplification. DAG size of input: 246 DAG size of output: 233
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:31:48,062 WARN  L188               SmtUtils]: Spent 239.00 ms on a formula simplification that was a NOOP. DAG size: 165
[2020-11-25 16:31:48,473 WARN  L188               SmtUtils]: Spent 409.00 ms on a formula simplification that was a NOOP. DAG size: 289
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
[2020-11-25 16:31:48,850 WARN  L188               SmtUtils]: Spent 370.00 ms on a formula simplification that was a NOOP. DAG size: 234
[2020-11-25 16:31:49,192 WARN  L188               SmtUtils]: Spent 340.00 ms on a formula simplification that was a NOOP. DAG size: 234
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5003 to 9973
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:31:49,405 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification that was a NOOP. DAG size: 163
[2020-11-25 16:31:49,422 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 16:31:49,890 WARN  L188               SmtUtils]: Spent 305.00 ms on a formula simplification. DAG size of input: 209 DAG size of output: 204
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 16:31:50,216 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 94
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
[2020-11-25 16:31:50,524 WARN  L188               SmtUtils]: Spent 230.00 ms on a formula simplification. DAG size of input: 198 DAG size of output: 193
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
[2020-11-25 16:31:50,708 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification that was a NOOP. DAG size: 182
[2020-11-25 16:31:51,133 WARN  L188               SmtUtils]: Spent 423.00 ms on a formula simplification. DAG size of input: 229 DAG size of output: 218
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:31:51,269 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 151
[2020-11-25 16:31:51,502 WARN  L188               SmtUtils]: Spent 231.00 ms on a formula simplification that was a NOOP. DAG size: 274
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
[2020-11-25 16:31:51,728 WARN  L188               SmtUtils]: Spent 223.00 ms on a formula simplification that was a NOOP. DAG size: 219
[2020-11-25 16:31:52,149 WARN  L188               SmtUtils]: Spent 382.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 214
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 16:31:52,449 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 101 DAG size of output: 96
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
[2020-11-25 16:31:52,667 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 116
Garbage collection #1: 37 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 16:31:52,782 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 83
[2020-11-25 16:31:53,142 WARN  L188               SmtUtils]: Spent 358.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 211
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 16:31:53,403 WARN  L188               SmtUtils]: Spent 259.00 ms on a formula simplification that was a NOOP. DAG size: 198
[2020-11-25 16:31:54,188 WARN  L188               SmtUtils]: Spent 784.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 233
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:31:54,455 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification that was a NOOP. DAG size: 165
[2020-11-25 16:31:54,777 WARN  L188               SmtUtils]: Spent 321.00 ms on a formula simplification that was a NOOP. DAG size: 289
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 16:31:55,099 WARN  L188               SmtUtils]: Spent 317.00 ms on a formula simplification that was a NOOP. DAG size: 234
[2020-11-25 16:32:03,557 WARN  L188               SmtUtils]: Spent 8.46 s on a formula simplification. DAG size of input: 585 DAG size of output: 570
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7027 to 14051
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 16:32:04,632 WARN  L188               SmtUtils]: Spent 1.06 s on a formula simplification that was a NOOP. DAG size: 245
[2020-11-25 16:32:06,173 WARN  L188               SmtUtils]: Spent 1.53 s on a formula simplification that was a NOOP. DAG size: 314
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 16:32:07,218 WARN  L188               SmtUtils]: Spent 1.04 s on a formula simplification that was a NOOP. DAG size: 245
[2020-11-25 16:32:10,409 WARN  L188               SmtUtils]: Spent 3.19 s on a formula simplification. DAG size of input: 316 DAG size of output: 315
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 16:32:11,928 WARN  L188               SmtUtils]: Spent 1.52 s on a formula simplification that was a NOOP. DAG size: 311
[2020-11-25 16:32:11,962 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:32:11,971 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-25 16:32:11,972 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-25 16:32:11,972 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-25 16:32:11,972 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-25 16:32:11,972 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-25 16:32:11,972 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-25 16:32:11,972 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-25 16:32:11,972 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-25 16:32:11,972 INFO  L131   ssoRankerPreferences]: Filename of dumped script: FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transfer-fail.bpl_BEv2_Iteration8_Lasso
[2020-11-25 16:32:11,972 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-25 16:32:11,972 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:32:12,068 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: function symbols not yet supported
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.constructTransFormulaLR(LassoPartitioneer.java:210)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.doPartition(LassoPartitioneer.java:165)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.<init>(LassoPartitioneer.java:95)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.LassoPartitioneerPreprocessor.process(LassoPartitioneerPreprocessor.java:65)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 16:32:12,069 INFO  L168              Benchmark]: Toolchain (without parser) took 37664.81 ms. Allocated memory was 1.0 GB in the beginning and 3.0 GB in the end (delta: 2.0 GB). Free memory was 945.9 MB in the beginning and 1.9 GB in the end (delta: -924.2 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,069 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,069 INFO  L168              Benchmark]: Boogie Preprocessor took 92.00 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 940.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,069 INFO  L168              Benchmark]: UtopiaSpecLang took 52.80 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,070 INFO  L168              Benchmark]: Boogie Printer took 12.28 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,070 INFO  L168              Benchmark]: RCFGBuilder took 605.07 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,071 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.74 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,071 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1029.25 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.5 MB). Free memory was 861.8 MB in the beginning and 853.2 MB in the end (delta: 8.6 MB). Peak memory consumption was 147.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,071 INFO  L168              Benchmark]: BlockEncodingV2 took 91.98 ms. Allocated memory is still 1.1 GB. Free memory was 853.2 MB in the beginning and 816.1 MB in the end (delta: 37.1 MB). Peak memory consumption was 37.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,071 INFO  L168              Benchmark]: BuchiAutomizer took 35739.21 ms. Allocated memory was 1.1 GB in the beginning and 3.0 GB in the end (delta: 1.9 GB). Free memory was 816.1 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-25 16:32:12,074 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2312 locations, 3913 edges
  - StatisticsResult: Encoded RCFG
    2244 locations, 3762 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 92.00 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 940.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 52.80 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.28 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 605.07 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.74 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1029.25 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.5 MB). Free memory was 861.8 MB in the beginning and 853.2 MB in the end (delta: 8.6 MB). Peak memory consumption was 147.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 91.98 ms. Allocated memory is still 1.1 GB. Free memory was 853.2 MB in the beginning and 816.1 MB in the end (delta: 37.1 MB). Peak memory consumption was 37.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 35739.21 ms. Allocated memory was 1.1 GB in the beginning and 3.0 GB in the end (delta: 1.9 GB). Free memory was 816.1 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    964 locations, 1208 edges
  - StatisticsResult: BuchiProgram size
    2312 locations, 3913 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: function symbols not yet supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: function symbols not yet supported: de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
