This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:48:54,136 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:48:54,137 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:48:54,145 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:48:54,145 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:48:54,145 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:48:54,146 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:48:54,147 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:48:54,148 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:48:54,148 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:48:54,149 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:48:54,149 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:48:54,149 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:48:54,150 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:48:54,151 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:48:54,151 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:48:54,151 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:48:54,152 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:48:54,153 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:48:54,154 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:48:54,154 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:48:54,155 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:48:54,156 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:48:54,157 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:48:54,157 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:48:54,157 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:48:54,157 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:48:54,158 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:48:54,158 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:48:54,158 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:48:54,158 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:48:54,159 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:48:54,159 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:48:54,159 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:48:54,160 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:48:54,160 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:48:54,160 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:48:54,160 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:48:54,160 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:48:54,161 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:48:54,161 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:48:54,161 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:48:54,167 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:48:54,167 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:48:54,167 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:48:54,168 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:48:54,168 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:48:54,168 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:48:54,168 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:48:54,169 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:48:54,169 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:48:54,186 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:48:54,196 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:48:54,197 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:48:54,198 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:48:54,198 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:48:54,199 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl
[2020-11-24 21:48:54,199 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl'
[2020-11-24 21:48:54,300 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:48:54,300 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:48:54,301 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:48:54,301 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:48:54,301 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:48:54,312 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,313 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,347 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,348 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,379 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,407 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,426 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,450 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:48:54,451 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:48:54,451 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:48:54,453 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:48:54,456 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/1) ...
[2020-11-24 21:48:54,491 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:48:54,497 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:48:54,504 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:48:54,514 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s1572 && _value_s1572>balances_BasicToken[this][msg.sender] ) && _value_s1572>=0 ) && _value_s1572<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1572]>=0 ) && balances_BasicToken[this][_to_s1572]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],BinaryExpression[COMPGT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:48:54,520 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:48:54,521 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MainToken0) ==> ( <>AP(fail_transfer_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:48:54,545 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:48:54 PropertyContainer
[2020-11-24 21:48:54,545 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:48:54,545 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:48:54,546 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:48:54,546 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:48:54,546 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/2) ...
[2020-11-24 21:48:54,547 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:48:54,547 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:48:54,571 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:48:54" (2/2) ...
[2020-11-24 21:48:54,571 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:48:54,572 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:48:54,572 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:48:54,572 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:48:54,572 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/2) ...
[2020-11-24 21:48:54,607 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:48:54,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:48:54,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,608 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,609 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,609 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:48:54,609 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:48:54,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:48:54,609 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:48:54,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:48:54,609 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:48:54,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:48:54,609 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:48:54,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:48:54,609 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:48:54,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:48:54,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:48:54,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:48:54,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:48:54,610 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:48:54,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:48:54,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:48:54,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:48:54,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:48:54,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:48:54,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:48:54,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:48:54,611 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:48:54,612 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:48:54,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:48:54,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:48:54,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:48:54,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:48:54,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:48:54,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:48:54,613 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:48:54,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:48:54,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:48:54,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:48:54,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:48:54,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:48:54,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:48:54,614 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:48:54,615 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:48:54,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:48:54,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:48:54,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:48:54,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:48:54,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:48:54,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:48:54,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:48:54,616 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:48:54,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:48:54,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:48:54,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:48:54,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:48:54,617 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:48:54,618 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:48:54,619 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:48:54,620 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,621 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:48:54,622 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:48:54,623 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:48:54,624 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:48:54,625 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:48:54,626 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:48:54,627 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:48:54,628 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:48:54,628 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:48:54,628 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:48:54,628 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:48:54,628 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:48:54,629 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:48:54,629 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:48:54,629 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:48:54,629 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:48:54,629 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:48:54,630 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:48:54,630 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:48:54,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:48:54,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:48:54,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:48:54,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:48:54,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:48:54,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:48:54,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:48:54,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:48:54,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:48:54,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:48:54,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:48:54,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:48:54,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:48:54,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:48:54,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:48:54,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:48:54,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:48:54,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:48:54,635 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:48:54,635 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:48:54,635 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:48:54,635 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:48:54,635 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:48:54,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:48:54,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:48:54,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:48:54,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:48:54,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:48:54,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:48:54,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:48:54,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:48:54,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:48:54,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:48:54,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:48:54,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:48:54,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:48:54,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:48:54,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:48:54,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:48:54,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:48:54,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:48:54,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:48:54,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:48:54,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:48:54,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:48:54,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:48:54,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:48:54,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:48:54,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:48:54,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:48:54,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:48:54,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:48:54,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:48:54,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:48:54,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:48:54,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:48:54,650 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:48:54,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:48:55,931 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:48:55,931 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:48:56,192 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:48:56,192 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:48:56,195 INFO  L202        PluginConnector]: Adding new model MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:48:56 BoogieIcfgContainer
[2020-11-24 21:48:56,195 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:48:54" (2/2) ...
[2020-11-24 21:48:56,195 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:48:56,195 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@709634a6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:48:56, skipping insertion in model container
[2020-11-24 21:48:56,195 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:48:56,196 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:48:56,196 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:48:56,197 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:48:56,198 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/3) ...
[2020-11-24 21:48:56,198 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@366d9074 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:48:56, skipping insertion in model container
[2020-11-24 21:48:56,199 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:48:54" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:48:56,237 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:48:56 NWAContainer
[2020-11-24 21:48:56,237 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:48:56,237 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:48:56,237 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:48:56,238 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:48:56,239 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:48:56" (3/4) ...
[2020-11-24 21:48:56,239 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@78f53024 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:48:56, skipping insertion in model container
[2020-11-24 21:48:56,240 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:48:56" (4/4) ...
[2020-11-24 21:48:56,242 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:48:56,251 INFO  L110   BuchiProductObserver]: Initial RCFG 5388 locations, 7563 edges
[2020-11-24 21:48:56,251 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:48:56,266 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:49:00,403 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:49:00,418 INFO  L110   BuchiProductObserver]: BuchiProgram size 13456 locations, 24726 edges
[2020-11-24 21:49:00,418 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:49:00 BoogieIcfgContainer
[2020-11-24 21:49:00,418 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:49:00,418 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:49:00,418 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:49:00,420 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:49:00,420 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:49:00" (1/1) ...
[2020-11-24 21:49:00,644 INFO  L313           BlockEncoder]: Initial Icfg 13456 locations, 24726 edges
[2020-11-24 21:49:00,644 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:49:00,645 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:49:00,645 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:49:00,645 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:49:00,672 INFO  L70    emoveInfeasibleEdges]: Removed 318 edges and 30 locations because of local infeasibility
[2020-11-24 21:49:00,695 INFO  L70        RemoveSinkStates]: Removed 320 edges and 188 locations by removing sink states
[2020-11-24 21:49:00,720 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:49:00,727 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:49:00,735 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:49:00,735 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:49:00,741 INFO  L313           BlockEncoder]: Encoded RCFG 13170 locations, 23987 edges
[2020-11-24 21:49:00,741 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:49:00 BasicIcfg
[2020-11-24 21:49:00,741 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:49:00,742 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:49:00,742 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:49:00,743 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:49:00,744 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:49:00,744 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:48:54" (1/6) ...
[2020-11-24 21:49:00,745 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:49:00, skipping insertion in model container
[2020-11-24 21:49:00,745 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:49:00,745 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:48:54" (2/6) ...
[2020-11-24 21:49:00,745 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:49:00, skipping insertion in model container
[2020-11-24 21:49:00,746 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:49:00,746 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:48:56" (3/6) ...
[2020-11-24 21:49:00,746 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:49:00, skipping insertion in model container
[2020-11-24 21:49:00,746 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:49:00,746 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:48:56" (4/6) ...
[2020-11-24 21:49:00,746 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:49:00, skipping insertion in model container
[2020-11-24 21:49:00,746 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:49:00,746 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:49:00" (5/6) ...
[2020-11-24 21:49:00,746 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@bf80389 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:49:00, skipping insertion in model container
[2020-11-24 21:49:00,747 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:49:00,747 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:49:00" (6/6) ...
[2020-11-24 21:49:00,747 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_transfer-self-fail.bpl_BEv2
[2020-11-24 21:49:00,774 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:49:00,774 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:49:00,774 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:49:00,774 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:49:00,774 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:49:00,774 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:49:00,774 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:49:00,774 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:49:00,774 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:49:00,849 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13170 states.
[2020-11-24 21:49:00,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:49:00,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:49:00,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:49:00,959 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:00,959 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:00,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:49:00,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13170 states.
[2020-11-24 21:49:01,022 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:49:01,022 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:49:01,023 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:49:01,025 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:01,025 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:49:01,045 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:49:01,045 INFO  L82        PathProgramCache]: Analyzing trace with hash 25578897, now seen corresponding path program 1 times
[2020-11-24 21:49:01,051 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:49:01,077 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:49:01,125 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:49:01,127 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:49:01,127 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:49:01,551 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:49:01,563 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:49:01,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:49:01,565 INFO  L87              Difference]: Start difference. First operand 13170 states. Second operand 4 states.
[2020-11-24 21:49:02,794 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:49:02,794 INFO  L93              Difference]: Finished difference Result 8125 states and 9518 transitions.
[2020-11-24 21:49:02,794 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:49:02,795 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8125 states and 9518 transitions.
[2020-11-24 21:49:02,832 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:49:02,872 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8125 states to 8121 states and 9510 transitions.
[2020-11-24 21:49:02,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 21:49:02,876 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1822
[2020-11-24 21:49:02,876 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8121 states and 9510 transitions.
[2020-11-24 21:49:02,894 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:49:02,894 INFO  L728         BuchiCegarLoop]: Abstraction has 8121 states and 9510 transitions.
[2020-11-24 21:49:02,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8121 states and 9510 transitions.
[2020-11-24 21:49:03,019 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8121 to 8121.
[2020-11-24 21:49:03,019 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8121 states.
[2020-11-24 21:49:03,033 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8121 states to 8121 states and 9510 transitions.
[2020-11-24 21:49:03,033 INFO  L751         BuchiCegarLoop]: Abstraction has 8121 states and 9510 transitions.
[2020-11-24 21:49:03,033 INFO  L631         BuchiCegarLoop]: Abstraction has 8121 states and 9510 transitions.
[2020-11-24 21:49:03,033 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:49:03,034 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8121 states and 9510 transitions.
[2020-11-24 21:49:03,046 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:49:03,046 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:49:03,046 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:49:03,049 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:03,049 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:49:03,053 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:49:03,053 INFO  L82        PathProgramCache]: Analyzing trace with hash 1236306165, now seen corresponding path program 1 times
[2020-11-24 21:49:03,055 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:49:03,069 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:49:03,096 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:49:03,097 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:49:03,097 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:49:03,098 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:49:03,098 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:49:03,098 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:49:03,098 INFO  L87              Difference]: Start difference. First operand 8121 states and 9510 transitions. cyclomatic complexity: 1409 Second operand 3 states.
[2020-11-24 21:49:03,285 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:49:03,285 INFO  L93              Difference]: Finished difference Result 9560 states and 10943 transitions.
[2020-11-24 21:49:03,285 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:49:03,286 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9560 states and 10943 transitions.
[2020-11-24 21:49:03,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:49:03,358 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9560 states to 9560 states and 10943 transitions.
[2020-11-24 21:49:03,358 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2223
[2020-11-24 21:49:03,360 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2223
[2020-11-24 21:49:03,360 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9560 states and 10943 transitions.
[2020-11-24 21:49:03,371 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:49:03,371 INFO  L728         BuchiCegarLoop]: Abstraction has 9560 states and 10943 transitions.
[2020-11-24 21:49:03,382 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9560 states and 10943 transitions.
[2020-11-24 21:49:03,469 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9560 to 8771.
[2020-11-24 21:49:03,469 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8771 states.
[2020-11-24 21:49:03,480 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8771 states to 8771 states and 9974 transitions.
[2020-11-24 21:49:03,480 INFO  L751         BuchiCegarLoop]: Abstraction has 8771 states and 9974 transitions.
[2020-11-24 21:49:03,481 INFO  L631         BuchiCegarLoop]: Abstraction has 8771 states and 9974 transitions.
[2020-11-24 21:49:03,481 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:49:03,481 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8771 states and 9974 transitions.
[2020-11-24 21:49:03,493 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:49:03,493 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:49:03,493 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:49:03,500 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:03,500 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND TRUE   !!initialized_MainToken[this]
[L9755]               revert := true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND TRUE   revert
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:49:03,511 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:49:03,512 INFO  L82        PathProgramCache]: Analyzing trace with hash 1929660777, now seen corresponding path program 1 times
[2020-11-24 21:49:03,513 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:49:03,551 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:49:04,083 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:49:04,084 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:49:04,084 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:49:04,085 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:49:04,085 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:49:04,085 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:49:04,085 INFO  L87              Difference]: Start difference. First operand 8771 states and 9974 transitions. cyclomatic complexity: 1223 Second operand 3 states.
[2020-11-24 21:49:04,214 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:49:04,214 INFO  L93              Difference]: Finished difference Result 9560 states and 10787 transitions.
[2020-11-24 21:49:04,214 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:49:04,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9560 states and 10787 transitions.
[2020-11-24 21:49:04,233 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:49:04,260 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9560 states to 9212 states and 10379 transitions.
[2020-11-24 21:49:04,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2103
[2020-11-24 21:49:04,261 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2132
[2020-11-24 21:49:04,261 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9212 states and 10379 transitions.
[2020-11-24 21:49:04,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:49:04,269 INFO  L728         BuchiCegarLoop]: Abstraction has 9212 states and 10379 transitions.
[2020-11-24 21:49:04,276 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9212 states and 10379 transitions.
[2020-11-24 21:49:04,335 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9212 to 8525.
[2020-11-24 21:49:04,335 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8525 states.
[2020-11-24 21:49:04,345 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8525 states to 8525 states and 9512 transitions.
[2020-11-24 21:49:04,345 INFO  L751         BuchiCegarLoop]: Abstraction has 8525 states and 9512 transitions.
[2020-11-24 21:49:04,345 INFO  L631         BuchiCegarLoop]: Abstraction has 8525 states and 9512 transitions.
[2020-11-24 21:49:04,345 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:49:04,345 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8525 states and 9512 transitions.
[2020-11-24 21:49:04,355 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:49:04,355 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:49:04,355 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:49:04,359 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:04,359 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:49:04,369 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:49:04,370 INFO  L82        PathProgramCache]: Analyzing trace with hash -1442389685, now seen corresponding path program 1 times
[2020-11-24 21:49:04,371 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:49:04,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:49:04,991 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:49:04,991 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:49:04,991 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:49:04,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:49:04,992 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:49:04,992 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:49:04,993 INFO  L87              Difference]: Start difference. First operand 8525 states and 9512 transitions. cyclomatic complexity: 1007 Second operand 7 states.
[2020-11-24 21:49:05,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:49:05,169 INFO  L93              Difference]: Finished difference Result 8536 states and 9523 transitions.
[2020-11-24 21:49:05,170 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:49:05,170 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8536 states and 9523 transitions.
[2020-11-24 21:49:05,185 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:49:05,209 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8536 states to 8525 states and 9511 transitions.
[2020-11-24 21:49:05,209 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2020
[2020-11-24 21:49:05,210 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2020
[2020-11-24 21:49:05,210 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8525 states and 9511 transitions.
[2020-11-24 21:49:05,216 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:49:05,216 INFO  L728         BuchiCegarLoop]: Abstraction has 8525 states and 9511 transitions.
[2020-11-24 21:49:05,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8525 states and 9511 transitions.
[2020-11-24 21:49:05,267 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8525 to 8525.
[2020-11-24 21:49:05,267 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8525 states.
[2020-11-24 21:49:05,276 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8525 states to 8525 states and 9511 transitions.
[2020-11-24 21:49:05,276 INFO  L751         BuchiCegarLoop]: Abstraction has 8525 states and 9511 transitions.
[2020-11-24 21:49:05,276 INFO  L631         BuchiCegarLoop]: Abstraction has 8525 states and 9511 transitions.
[2020-11-24 21:49:05,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:49:05,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8525 states and 9511 transitions.
[2020-11-24 21:49:05,284 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:49:05,284 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:49:05,284 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:49:05,287 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:05,287 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND TRUE   __exception
[L4388]               __tmp__Balance := Balance;
[L4389]               __tmp__DType := DType;
[L4390]               __tmp__Alloc := Alloc;
[L4391]               __tmp__balance_ADDR := balance_ADDR;
[L4392]               __tmp__M_Ref_int := M_Ref_int;
[L4393]               __tmp__sum_balances0 := sum_balances0;
[L4394]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4395]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4396]               __tmp__sum_allowed1 := sum_allowed1;
[L4397]               __tmp__M_int_int := M_int_int;
[L4398]               __tmp__sum_chains2 := sum_chains2;
[L4399]               __tmp__sum_freezings3 := sum_freezings3;
[L4400]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4401]               __tmp__M_int_Ref := M_int_Ref;
[L4402]               __tmp__sum := sum;
[L4403]               __tmp__Length := Length;
[L4404]               __tmp__now := now;
[L4405]               __tmp__balances_BasicToken := balances_BasicToken;
[L4406]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4407]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4408]               __tmp__owner_Ownable := owner_Ownable;
[L4409]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4410]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4411]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4412]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4413]               __tmp__paused_Pausable := paused_Pausable;
[L4414]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4415]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4416]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4417]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4418]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4419]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4420]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4421]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4422]               __tmp__initialized_MainToken := initialized_MainToken;
[L4423]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9454]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9300]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9266]               assume msgsender_MSG != null;
[L9267]               __tmp__Balance[this] := 0;
[L9268]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9269]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9270]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9271]               __tmp__TOKEN_NAME_Consts[this] := -1298559559;
[L9272]               __tmp__TOKEN_SYMBOL_Consts[this] := 120673937;
[L9273]               __tmp__PAUSED_Consts[this] := false;
[L9274]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9275]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9276]               __tmp__CONTINUE_MINTING_Consts[this] := false;
[L9300]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9301]   COND FALSE  !(revert)
[L9454]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9455]   COND FALSE  !(revert)
[L9458]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L9458]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9459]   COND FALSE  !(revert)
[L9462]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L9462]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L9466]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9467]   COND FALSE  !(revert)
[L9470]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L9470]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9471]   COND FALSE  !(revert)
[L9474]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7630]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7630]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   COND FALSE  !(revert)
[L7634]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7634]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7635]   COND FALSE  !(revert)
[L7638]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7638]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7639]   COND FALSE  !(revert)
[L7642]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7642]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7643]   COND FALSE  !(revert)
[L7646]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]               assume msgsender_MSG != null;
[L7604]               __tmp__Balance[this] := 0;
[L7605]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7606]               __tmp__sum_chains2[this] := 0;
[L7607]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7608]               __tmp__sum_freezings3[this] := 0;
[L7609]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7610]               __tmp__sum_freezingBalance4[this] := 0;
[L7646]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7647]   COND FALSE  !(revert)
[L9474]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9475]   COND FALSE  !(revert)
[L9478]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L9478]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9479]   COND FALSE  !(revert)
[L9482]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7445]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7445]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7449]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7453]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7457]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L7461]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L7465]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7428]               assume msgsender_MSG != null;
[L7429]               __tmp__Balance[this] := 0;
[L7430]               __tmp__mintingFinished_MintableToken[this] := false;
[L7465]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7466]   COND FALSE  !(revert)
[L9482]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9483]   COND FALSE  !(revert)
[L9486]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9057]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L9057]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9058]   COND FALSE  !(revert)
[L9061]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L9061]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9062]   COND FALSE  !(revert)
[L9065]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L9065]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9066]   COND FALSE  !(revert)
[L9069]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L9069]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9070]   COND FALSE  !(revert)
[L9073]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7630]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7630]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   COND FALSE  !(revert)
[L7634]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7634]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7635]   COND FALSE  !(revert)
[L7638]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7638]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7639]   COND FALSE  !(revert)
[L7642]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7642]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7643]   COND FALSE  !(revert)
[L7646]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]               assume msgsender_MSG != null;
[L7604]               __tmp__Balance[this] := 0;
[L7605]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7606]               __tmp__sum_chains2[this] := 0;
[L7607]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7608]               __tmp__sum_freezings3[this] := 0;
[L7609]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7610]               __tmp__sum_freezingBalance4[this] := 0;
[L7646]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7647]   COND FALSE  !(revert)
[L9073]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9074]   COND FALSE  !(revert)
[L9077]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L9077]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9078]   COND FALSE  !(revert)
[L9081]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7445]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7445]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7449]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7453]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7027]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L7027]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   COND FALSE  !(revert)
[L7031]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6983]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6983]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   COND FALSE  !(revert)
[L6987]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6968]               assume msgsender_MSG != null;
[L6969]               __tmp__Balance[this] := 0;
[L6987]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6988]   COND FALSE  !(revert)
[L7031]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]   COND FALSE  !(revert)
[L7035]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L7035]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7036]   COND FALSE  !(revert)
[L7039]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]               assume msgsender_MSG != null;
[L7009]               __tmp__Balance[this] := 0;
[L7010]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7011]               __tmp__sum_allowed1[this] := 0;
[L7039]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7040]   COND FALSE  !(revert)
[L7457]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L7461]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L7465]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7428]               assume msgsender_MSG != null;
[L7429]               __tmp__Balance[this] := 0;
[L7430]               __tmp__mintingFinished_MintableToken[this] := false;
[L7465]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7466]   COND FALSE  !(revert)
[L9081]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9082]   COND FALSE  !(revert)
[L9085]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9042]               assume msgsender_MSG != null;
[L9043]               __tmp__Balance[this] := 0;
[L9085]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9086]   COND FALSE  !(revert)
[L9486]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9487]   COND FALSE  !(revert)
[L9490]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8821]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L8821]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8822]   COND FALSE  !(revert)
[L8825]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6854]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6721]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6706]               assume msgsender_MSG != null;
[L6707]               __tmp__Balance[this] := 0;
[L6721]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   COND FALSE  !(revert)
[L6854]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   COND FALSE  !(revert)
[L6858]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6833]               assume msgsender_MSG != null;
[L6834]               __tmp__Balance[this] := 0;
[L6835]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6836]               __tmp__sum_balances0[this] := 0;
[L6837]               __tmp__totalSupply__BasicToken[this] := 0;
[L6858]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L8825]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8826]   COND FALSE  !(revert)
[L8829]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8806]               assume msgsender_MSG != null;
[L8807]               __tmp__Balance[this] := 0;
[L8829]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8830]   COND FALSE  !(revert)
[L9490]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9491]   COND FALSE  !(revert)
[L9494]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8951]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7281]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7262]               assume msgsender_MSG != null;
[L7263]               __tmp__Balance[this] := 0;
[L7264]               __tmp__owner_Ownable[this] := null;
[L7266]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7281]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   COND FALSE  !(revert)
[L8951]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8952]   COND FALSE  !(revert)
[L8955]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8934]               assume msgsender_MSG != null;
[L8935]               __tmp__Balance[this] := 0;
[L8936]               __tmp__paused_Pausable[this] := false;
[L8955]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8956]   COND FALSE  !(revert)
[L9494]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(revert)
[L9498]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9413]               assume msgsender_MSG != null;
[L9414]               __tmp__Balance[this] := 0;
[L9415]               __tmp__initialized_MainToken[this] := false;
[L9417]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9684]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9688]               __tmp__initialized_MainToken[this] := true;
[L9689]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9699]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9700]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9701]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9702]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9703]               __var_59 := 0 % 18446744073709551616;
[L9704]               freezes_s1673 := 0 % 18446744073709551616;
[L9705]               i_s1673 := 0;
[L9706]   COND FALSE  !(i_s1673 < __tmp__Length[addresses_s1673])
[L9730]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9417]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9418]   COND FALSE  !(revert)
[L9421]   COND TRUE   __tmp__DType[this] == MainToken
[L9422]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7320]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12713]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7320]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7321]   COND FALSE  !(revert)
[L7324]   COND TRUE   __tmp__DType[this] == MainToken
[L7325]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7393]               __var_11 := null;
[L7394]   COND FALSE  !(!(_newOwner_s581 != null))
[L7398]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7325]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7326]   COND FALSE  !(revert)
[L9422]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9423]   COND FALSE  !(revert)
[L9498]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9499]   COND FALSE  !(revert)
[L4423]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4424]               assume revert || gas < 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:49:05,295 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:49:05,296 INFO  L82        PathProgramCache]: Analyzing trace with hash -657328955, now seen corresponding path program 1 times
[2020-11-24 21:49:05,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:49:05,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:49:05,922 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:49:05,923 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:49:05,923 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:49:05,924 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:49:05,925 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:49:05,925 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:49:05,925 INFO  L87              Difference]: Start difference. First operand 8525 states and 9511 transitions. cyclomatic complexity: 1006 Second operand 4 states.
[2020-11-24 21:49:07,027 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:49:07,027 INFO  L93              Difference]: Finished difference Result 10515 states and 11956 transitions.
[2020-11-24 21:49:07,027 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:49:07,027 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10515 states and 11956 transitions.
[2020-11-24 21:49:07,049 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:49:07,072 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10515 states to 9606 states and 10905 transitions.
[2020-11-24 21:49:07,072 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2277
[2020-11-24 21:49:07,073 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2286
[2020-11-24 21:49:07,073 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9606 states and 10905 transitions.
[2020-11-24 21:49:07,080 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:49:07,080 INFO  L728         BuchiCegarLoop]: Abstraction has 9606 states and 10905 transitions.
[2020-11-24 21:49:07,087 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9606 states and 10905 transitions.
[2020-11-24 21:49:07,133 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9606 to 8589.
[2020-11-24 21:49:07,133 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8589 states.
[2020-11-24 21:49:07,170 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8589 states to 8589 states and 9618 transitions.
[2020-11-24 21:49:07,170 INFO  L751         BuchiCegarLoop]: Abstraction has 8589 states and 9618 transitions.
[2020-11-24 21:49:07,170 INFO  L631         BuchiCegarLoop]: Abstraction has 8589 states and 9618 transitions.
[2020-11-24 21:49:07,170 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:49:07,170 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8589 states and 9618 transitions.
[2020-11-24 21:49:07,183 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:49:07,183 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:49:07,183 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:49:07,186 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:49:07,186 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := -1298559559;
[L9290]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               CONTINUE_MINTING_Consts[this] := false;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9770]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9801]   COND TRUE   DType[this] == MainToken
[L9802]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7574]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7574]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   COND FALSE  !(revert)
[L7578]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7578]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7579]   COND FALSE  !(revert)
[L7582]               mintingFinished_MintableToken[this] := true;
[L7583]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7584]               __ret_0_ := true;
[L9802]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9803]   COND FALSE  !(revert)
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 > balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:49:07,205 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:49:07,205 INFO  L82        PathProgramCache]: Analyzing trace with hash -1611578164, now seen corresponding path program 1 times
[2020-11-24 21:49:07,206 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:49:07,238 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:49:07,895 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:49:07,895 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:49:07,895 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-24 21:49:07,896 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:49:07,896 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-24 21:49:07,896 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=41, Unknown=0, NotChecked=0, Total=56
[2020-11-24 21:49:07,896 INFO  L87              Difference]: Start difference. First operand 8589 states and 9618 transitions. cyclomatic complexity: 1048 Second operand 8 states.
[2020-11-24 21:49:09,345 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:49:09,345 INFO  L93              Difference]: Finished difference Result 4524 states and 5035 transitions.
[2020-11-24 21:49:09,345 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 21:49:09,345 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4524 states and 5035 transitions.
[2020-11-24 21:49:09,353 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:49:09,353 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4524 states to 0 states and 0 transitions.
[2020-11-24 21:49:09,353 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:49:09,353 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:49:09,353 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:49:09,353 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:49:09,353 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:49:09,353 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:49:09,353 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:49:09,353 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:49:09,353 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:49:09,353 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:49:09,354 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:49:09,356 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:49:09 BasicIcfg
[2020-11-24 21:49:09,357 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:49:09,357 INFO  L168              Benchmark]: Toolchain (without parser) took 15056.94 ms. Allocated memory was 1.0 GB in the beginning and 3.5 GB in the end (delta: 2.4 GB). Free memory was 919.1 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,358 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,358 INFO  L168              Benchmark]: Boogie Preprocessor took 149.69 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.3 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,358 INFO  L168              Benchmark]: UtopiaSpecLang took 94.50 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 876.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,359 INFO  L168              Benchmark]: Boogie Printer took 26.02 ms. Allocated memory is still 1.0 GB. Free memory was 876.0 MB in the beginning and 865.2 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,359 INFO  L168              Benchmark]: RCFGBuilder took 1623.53 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 180.9 MB). Free memory was 865.2 MB in the beginning and 1.1 GB in the end (delta: -238.3 MB). Peak memory consumption was 255.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,359 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.69 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,360 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4180.77 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 360.7 MB). Free memory was 1.1 GB in the beginning and 976.7 MB in the end (delta: 110.6 MB). Peak memory consumption was 829.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,360 INFO  L168              Benchmark]: BlockEncodingV2 took 323.19 ms. Allocated memory is still 1.6 GB. Free memory was 976.7 MB in the beginning and 791.9 MB in the end (delta: 184.8 MB). Peak memory consumption was 184.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,360 INFO  L168              Benchmark]: BuchiAutomizer took 8614.85 ms. Allocated memory was 1.6 GB in the beginning and 3.5 GB in the end (delta: 1.9 GB). Free memory was 791.9 MB in the beginning and 2.0 GB in the end (delta: -1.2 GB). Peak memory consumption was 697.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:49:09,363 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13456 locations, 24726 edges
  - StatisticsResult: Encoded RCFG
    13170 locations, 23987 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 149.69 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.3 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 94.50 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 876.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.02 ms. Allocated memory is still 1.0 GB. Free memory was 876.0 MB in the beginning and 865.2 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1623.53 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 180.9 MB). Free memory was 865.2 MB in the beginning and 1.1 GB in the end (delta: -238.3 MB). Peak memory consumption was 255.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.69 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4180.77 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 360.7 MB). Free memory was 1.1 GB in the beginning and 976.7 MB in the end (delta: 110.6 MB). Peak memory consumption was 829.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 323.19 ms. Allocated memory is still 1.6 GB. Free memory was 976.7 MB in the beginning and 791.9 MB in the end (delta: 184.8 MB). Peak memory consumption was 184.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 8614.85 ms. Allocated memory was 1.6 GB in the beginning and 3.5 GB in the end (delta: 1.9 GB). Free memory was 791.9 MB in the beginning and 2.0 GB in the end (delta: -1.2 GB). Peak memory consumption was 697.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5388 locations, 7563 edges
  - StatisticsResult: BuchiProgram size
    13456 locations, 24726 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 8 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 8.5s and 7 iterations.  TraceHistogramMax:38. Analysis of lassos took 3.1s. Construction of modules took 3.0s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 5 MinimizatonAttempts, 2493 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 8771 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 51916 SDtfs, 33840 SDslu, 75704 SDs, 0 SdLazy, 21226 SolverSat, 5742 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_MainToken0) ==> ( <>(fail_transfer_MainToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
