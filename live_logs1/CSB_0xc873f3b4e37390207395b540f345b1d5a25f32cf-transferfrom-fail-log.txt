This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:53:49,870 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:53:49,871 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:53:49,878 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:53:49,878 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:53:49,879 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:53:49,880 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:53:49,881 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:53:49,882 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:53:49,882 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:53:49,882 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:53:49,883 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:53:49,883 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:53:49,884 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:53:49,884 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:53:49,885 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:53:49,885 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:53:49,886 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:53:49,887 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:53:49,888 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:53:49,888 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:53:49,889 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:53:49,890 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:53:49,890 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:53:49,890 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:53:49,891 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:53:49,891 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:53:49,891 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:53:49,892 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:53:49,892 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:53:49,892 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:53:49,892 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:53:49,893 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:53:49,893 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:53:49,894 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:53:49,894 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:53:49,894 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:53:49,894 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:53:49,894 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:53:49,895 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:53:49,895 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:53:49,895 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:53:49,901 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:53:49,901 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:53:49,901 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:53:49,902 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:53:49,902 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:53:49,902 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:53:49,903 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:53:49,903 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:53:49,903 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:53:49,904 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:53:49,922 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:53:49,934 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:53:49,936 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:53:49,937 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:53:49,938 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:53:49,938 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl
[2020-11-25 12:53:49,939 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl'
[2020-11-25 12:53:50,000 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:53:50,001 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:53:50,002 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:53:50,002 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:53:50,002 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:53:50,018 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,020 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,042 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,042 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,057 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,063 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,068 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,074 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:53:50,074 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:53:50,075 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:53:50,076 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:53:50,080 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/1) ...
[2020-11-25 12:53:50,093 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(CSB.transferFrom(from, to, value), from != to && (value > balances_CSB[this][from] || value > allowed_CSB[this][from][msg.sender] || balances_CSB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(CSB.transferFrom)))
[2020-11-25 12:53:50,098 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(CSB.transferFrom(from, to, value), from != to && (value > balances_CSB[this][from] || value > allowed_CSB[this][from][msg.sender] || balances_CSB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(CSB.transferFrom)))
[2020-11-25 12:53:50,105 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(CSB.transferFrom(from, to, value), from != to && (value > balances_CSB[this][from] || value > allowed_CSB[this][from][msg.sender] || balances_CSB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(CSB.transferFrom)))
[2020-11-25 12:53:50,111 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s239!=_to_s239 && ( ( _value_s239>balances_CSB[this][_from_s239] || _value_s239>allowed_CSB[this][_from_s239][msg.sender] ) || ( balances_CSB[this][_to_s239] + _value_s239 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s239>=0 ) && _value_s239<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_to_s239]>=0 ) && balances_CSB[this][_to_s239]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_from_s239]>=0 ) && balances_CSB[this][_from_s239]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_CSB[this][_from_s239][msg.sender]>=0 ) && allowed_CSB[this][_from_s239][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:53:50,115 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(CSB.transferFrom(from, to, value), from != to && (value > balances_CSB[this][from] || value > allowed_CSB[this][from][msg.sender] || balances_CSB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(CSB.transferFrom)))
[2020-11-25 12:53:50,115 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_CSB0) ==> ( <>AP(fail_transferFrom_CSB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:53:50,120 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:50 PropertyContainer
[2020-11-25 12:53:50,120 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:53:50,120 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:53:50,120 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:53:50,121 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:53:50,121 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/2) ...
[2020-11-25 12:53:50,122 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:53:50,122 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:53:50,131 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:50" (2/2) ...
[2020-11-25 12:53:50,132 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:53:50,132 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:53:50,132 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:53:50,132 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:53:50,133 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/2) ...
[2020-11-25 12:53:50,185 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:53:50,185 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:53:50,185 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface
[2020-11-25 12:53:50,185 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface
[2020-11-25 12:53:50,185 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSBInterface
[2020-11-25 12:53:50,185 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSBInterface
[2020-11-25 12:53:50,185 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSBInterface
[2020-11-25 12:53:50,185 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSBInterface
[2020-11-25 12:53:50,186 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSBInterface
[2020-11-25 12:53:50,186 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface
[2020-11-25 12:53:50,186 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface
[2020-11-25 12:53:50,186 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:53:50,186 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB
[2020-11-25 12:53:50,186 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB
[2020-11-25 12:53:50,186 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB
[2020-11-25 12:53:50,186 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB
[2020-11-25 12:53:50,186 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:53:50,186 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:53:50,187 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB
[2020-11-25 12:53:50,187 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB
[2020-11-25 12:53:50,187 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB
[2020-11-25 12:53:50,187 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB
[2020-11-25 12:53:50,187 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB
[2020-11-25 12:53:50,187 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB
[2020-11-25 12:53:50,187 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB
[2020-11-25 12:53:50,187 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB
[2020-11-25 12:53:50,187 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB
[2020-11-25 12:53:50,187 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB
[2020-11-25 12:53:50,188 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB
[2020-11-25 12:53:50,188 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB
[2020-11-25 12:53:50,188 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSBInterface
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CSBInterface
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSB
[2020-11-25 12:53:50,188 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__success
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__success
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:53:50,189 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__success
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__fail
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__success
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__success
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__fail
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__success
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__fail
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__success
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__fail
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__success
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__fail
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__success
[2020-11-25 12:53:50,190 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__fail
[2020-11-25 12:53:50,191 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__success
[2020-11-25 12:53:50,191 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__fail
[2020-11-25 12:53:50,191 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:53:50,191 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:53:50,191 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:53:50,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__success
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__fail
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__success
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__fail
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__success
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__success
[2020-11-25 12:53:50,192 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__fail
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__success
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__fail
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__success
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__fail
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__success
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__fail
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__success
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__fail
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__success
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__fail
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__success
[2020-11-25 12:53:50,193 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSBInterface
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CSBInterface
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSB
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:53:50,194 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:53:50,194 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:53:50,413 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:53:50,413 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:53:50,633 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:53:50,633 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 12:53:50,635 INFO  L202        PluginConnector]: Adding new model CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:50 BoogieIcfgContainer
[2020-11-25 12:53:50,635 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:50" (2/2) ...
[2020-11-25 12:53:50,635 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:53:50,635 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7d6f6d3d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:50, skipping insertion in model container
[2020-11-25 12:53:50,635 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:53:50,636 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:53:50,636 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:53:50,637 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:53:50,637 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/3) ...
[2020-11-25 12:53:50,638 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4f26a6b7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:50, skipping insertion in model container
[2020-11-25 12:53:50,638 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:50" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:53:50,672 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:50 NWAContainer
[2020-11-25 12:53:50,672 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:53:50,672 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:53:50,672 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:53:50,673 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:53:50,674 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:50" (3/4) ...
[2020-11-25 12:53:50,674 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@fc5c26b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:50, skipping insertion in model container
[2020-11-25 12:53:50,674 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:50" (4/4) ...
[2020-11-25 12:53:50,677 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:53:50,680 INFO  L110   BuchiProductObserver]: Initial RCFG 789 locations, 950 edges
[2020-11-25 12:53:50,680 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:53:50,689 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:53:51,626 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:53:51,629 INFO  L110   BuchiProductObserver]: BuchiProgram size 1826 locations, 3052 edges
[2020-11-25 12:53:51,629 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:51 BoogieIcfgContainer
[2020-11-25 12:53:51,629 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:53:51,630 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:53:51,630 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:53:51,631 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:53:51,632 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:51" (1/1) ...
[2020-11-25 12:53:51,678 INFO  L313           BlockEncoder]: Initial Icfg 1826 locations, 3052 edges
[2020-11-25 12:53:51,678 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:53:51,679 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:53:51,679 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:53:51,679 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:53:51,686 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 12:53:51,690 INFO  L70        RemoveSinkStates]: Removed 42 edges and 21 locations by removing sink states
[2020-11-25 12:53:51,695 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:53:51,697 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:53:51,699 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:53:51,699 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:53:51,701 INFO  L313           BlockEncoder]: Encoded RCFG 1788 locations, 2969 edges
[2020-11-25 12:53:51,701 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:53:51 BasicIcfg
[2020-11-25 12:53:51,702 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:53:51,702 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:53:51,702 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:53:51,704 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:53:51,704 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:51,704 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:49" (1/6) ...
[2020-11-25 12:53:51,705 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@72a13780 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:53:51, skipping insertion in model container
[2020-11-25 12:53:51,705 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:51,705 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:50" (2/6) ...
[2020-11-25 12:53:51,705 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@72a13780 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:53:51, skipping insertion in model container
[2020-11-25 12:53:51,705 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:51,705 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:50" (3/6) ...
[2020-11-25 12:53:51,705 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@72a13780 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:53:51, skipping insertion in model container
[2020-11-25 12:53:51,705 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:51,705 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:50" (4/6) ...
[2020-11-25 12:53:51,705 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@72a13780 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:53:51, skipping insertion in model container
[2020-11-25 12:53:51,706 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:51,706 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:51" (5/6) ...
[2020-11-25 12:53:51,706 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@72a13780 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:53:51, skipping insertion in model container
[2020-11-25 12:53:51,706 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:51,706 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:53:51" (6/6) ...
[2020-11-25 12:53:51,707 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-fail.bpl_BEv2
[2020-11-25 12:53:51,739 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:53:51,739 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:53:51,739 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:53:51,739 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:53:51,739 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:53:51,740 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:53:51,740 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:53:51,740 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:53:51,740 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:53:51,757 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1788 states.
[2020-11-25 12:53:51,795 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:51,795 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:51,795 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:51,804 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:51,804 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:51,804 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:53:51,804 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1788 states.
[2020-11-25 12:53:51,814 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:51,814 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:51,814 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:51,815 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:51,815 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND TRUE   revert
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:51,829 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:51,829 INFO  L82        PathProgramCache]: Analyzing trace with hash -1014169232, now seen corresponding path program 1 times
[2020-11-25 12:53:51,833 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:51,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:51,884 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:51,886 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:51,886 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:53:51,889 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:52,004 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:53:52,005 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:53:52,007 INFO  L87              Difference]: Start difference. First operand 1788 states. Second operand 3 states.
[2020-11-25 12:53:52,112 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:52,112 INFO  L93              Difference]: Finished difference Result 1279 states and 1366 transitions.
[2020-11-25 12:53:52,112 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:53:52,114 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1279 states and 1366 transitions.
[2020-11-25 12:53:52,121 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:52,131 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1279 states to 1279 states and 1366 transitions.
[2020-11-25 12:53:52,131 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 12:53:52,133 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 552
[2020-11-25 12:53:52,133 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1279 states and 1366 transitions.
[2020-11-25 12:53:52,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:52,137 INFO  L728         BuchiCegarLoop]: Abstraction has 1279 states and 1366 transitions.
[2020-11-25 12:53:52,150 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1279 states and 1366 transitions.
[2020-11-25 12:53:52,175 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1279 to 1279.
[2020-11-25 12:53:52,175 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1279 states.
[2020-11-25 12:53:52,178 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1279 states to 1279 states and 1366 transitions.
[2020-11-25 12:53:52,179 INFO  L751         BuchiCegarLoop]: Abstraction has 1279 states and 1366 transitions.
[2020-11-25 12:53:52,179 INFO  L631         BuchiCegarLoop]: Abstraction has 1279 states and 1366 transitions.
[2020-11-25 12:53:52,179 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:53:52,179 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1279 states and 1366 transitions.
[2020-11-25 12:53:52,183 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:52,183 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:52,183 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:52,185 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:52,185 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND TRUE   revert
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND TRUE   !(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1244]              revert := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND TRUE   !(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1244]              revert := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:52,188 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:52,188 INFO  L82        PathProgramCache]: Analyzing trace with hash -1890663501, now seen corresponding path program 1 times
[2020-11-25 12:53:52,189 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:52,198 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:52,214 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:52,214 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:52,214 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:53:52,215 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:52,216 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:53:52,216 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:53:52,216 INFO  L87              Difference]: Start difference. First operand 1279 states and 1366 transitions. cyclomatic complexity: 89 Second operand 4 states.
[2020-11-25 12:53:52,355 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:52,356 INFO  L93              Difference]: Finished difference Result 1730 states and 1925 transitions.
[2020-11-25 12:53:52,356 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:53:52,356 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1730 states and 1925 transitions.
[2020-11-25 12:53:52,363 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:53:52,370 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1730 states to 1710 states and 1905 transitions.
[2020-11-25 12:53:52,371 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 694
[2020-11-25 12:53:52,371 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 694
[2020-11-25 12:53:52,371 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1710 states and 1905 transitions.
[2020-11-25 12:53:52,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:52,374 INFO  L728         BuchiCegarLoop]: Abstraction has 1710 states and 1905 transitions.
[2020-11-25 12:53:52,375 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1710 states and 1905 transitions.
[2020-11-25 12:53:52,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1710 to 1361.
[2020-11-25 12:53:52,390 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1361 states.
[2020-11-25 12:53:52,392 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1361 states to 1361 states and 1462 transitions.
[2020-11-25 12:53:52,392 INFO  L751         BuchiCegarLoop]: Abstraction has 1361 states and 1462 transitions.
[2020-11-25 12:53:52,392 INFO  L631         BuchiCegarLoop]: Abstraction has 1361 states and 1462 transitions.
[2020-11-25 12:53:52,392 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:53:52,392 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1361 states and 1462 transitions.
[2020-11-25 12:53:52,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:53:52,395 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:52,396 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:52,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:52,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:52,400 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:52,400 INFO  L82        PathProgramCache]: Analyzing trace with hash 252237057, now seen corresponding path program 1 times
[2020-11-25 12:53:52,401 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:52,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:52,513 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:52,513 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:52,513 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 12:53:52,513 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:52,513 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 12:53:52,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 12:53:52,514 INFO  L87              Difference]: Start difference. First operand 1361 states and 1462 transitions. cyclomatic complexity: 103 Second operand 13 states.
[2020-11-25 12:53:53,420 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:53,420 INFO  L93              Difference]: Finished difference Result 1408 states and 1529 transitions.
[2020-11-25 12:53:53,421 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 12:53:53,421 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1408 states and 1529 transitions.
[2020-11-25 12:53:53,425 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 12:53:53,430 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1408 states to 1408 states and 1529 transitions.
[2020-11-25 12:53:53,431 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 656
[2020-11-25 12:53:53,432 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 656
[2020-11-25 12:53:53,432 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1408 states and 1529 transitions.
[2020-11-25 12:53:53,433 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:53,433 INFO  L728         BuchiCegarLoop]: Abstraction has 1408 states and 1529 transitions.
[2020-11-25 12:53:53,435 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1408 states and 1529 transitions.
[2020-11-25 12:53:53,446 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1408 to 1316.
[2020-11-25 12:53:53,446 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1316 states.
[2020-11-25 12:53:53,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1316 states to 1316 states and 1398 transitions.
[2020-11-25 12:53:53,448 INFO  L751         BuchiCegarLoop]: Abstraction has 1316 states and 1398 transitions.
[2020-11-25 12:53:53,448 INFO  L631         BuchiCegarLoop]: Abstraction has 1316 states and 1398 transitions.
[2020-11-25 12:53:53,448 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:53:53,449 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1316 states and 1398 transitions.
[2020-11-25 12:53:53,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:53,451 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:53,452 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:53,453 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:53,453 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:53,455 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:53,455 INFO  L82        PathProgramCache]: Analyzing trace with hash 936380545, now seen corresponding path program 1 times
[2020-11-25 12:53:53,456 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:53,468 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:53,525 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:53,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:53,526 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 12:53:53,526 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:53,526 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 12:53:53,526 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=150, Unknown=0, NotChecked=0, Total=182
[2020-11-25 12:53:53,527 INFO  L87              Difference]: Start difference. First operand 1316 states and 1398 transitions. cyclomatic complexity: 85 Second operand 14 states.
[2020-11-25 12:53:54,237 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:54,237 INFO  L93              Difference]: Finished difference Result 1386 states and 1485 transitions.
[2020-11-25 12:53:54,238 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 12:53:54,238 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1386 states and 1485 transitions.
[2020-11-25 12:53:54,250 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:53:54,259 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1386 states to 1386 states and 1485 transitions.
[2020-11-25 12:53:54,259 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 587
[2020-11-25 12:53:54,260 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 587
[2020-11-25 12:53:54,260 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1386 states and 1485 transitions.
[2020-11-25 12:53:54,261 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:54,261 INFO  L728         BuchiCegarLoop]: Abstraction has 1386 states and 1485 transitions.
[2020-11-25 12:53:54,263 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1386 states and 1485 transitions.
[2020-11-25 12:53:54,275 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1386 to 1317.
[2020-11-25 12:53:54,275 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1317 states.
[2020-11-25 12:53:54,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1317 states to 1317 states and 1400 transitions.
[2020-11-25 12:53:54,278 INFO  L751         BuchiCegarLoop]: Abstraction has 1317 states and 1400 transitions.
[2020-11-25 12:53:54,278 INFO  L631         BuchiCegarLoop]: Abstraction has 1317 states and 1400 transitions.
[2020-11-25 12:53:54,278 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:53:54,278 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1317 states and 1400 transitions.
[2020-11-25 12:53:54,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:54,282 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:54,282 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:54,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:54,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND TRUE   __exception
[L206]               __tmp__Balance := Balance;
[L207]               __tmp__DType := DType;
[L208]               __tmp__Alloc := Alloc;
[L209]               __tmp__balance_ADDR := balance_ADDR;
[L210]               __tmp__M_Ref_int := M_Ref_int;
[L211]               __tmp__sum_balances0 := sum_balances0;
[L212]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L213]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L214]               __tmp__sum_allowed1 := sum_allowed1;
[L215]               __tmp__Length := Length;
[L216]               __tmp__now := now;
[L217]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L218]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L219]               __tmp__balances_CSB := balances_CSB;
[L220]               __tmp__allowed_CSB := allowed_CSB;
[L221]               __tmp__name_CSB := name_CSB;
[L222]               __tmp__decimals_CSB := decimals_CSB;
[L223]               __tmp__symbol_CSB := symbol_CSB;
[L224]   CALL        call CSB_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1161]  CALL        call CSBInterface_CSBInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[L1087]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1070]              assume msgsender_MSG != null;
[L1071]              __tmp__Balance[this] := 0;
[L1072]              __tmp__totalSupply_CSBInterface[this] := 0;
[L1087]  RET         call CSBInterface_CSBInterface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1088]  COND FALSE  !(revert)
[L1161]  RET         call CSBInterface_CSBInterface__fail(this, msgsender_MSG, msgvalue_MSG);
[L1162]  COND FALSE  !(revert)
[L1165]  CALL        call CSB_CSB_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1116]              assume msgsender_MSG != null;
[L1117]              __tmp__Balance[this] := 0;
[L1118]              __tmp__MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1119]              __tmp__balances_CSB[this] := zeroRefintArr();
[L1120]              __tmp__sum_balances0[this] := 0;
[L1121]              __tmp__allowed_CSB[this] := zeroRefRefintArr();
[L1122]              __tmp__sum_allowed1[this] := 0;
[L1123]              __tmp__name_CSB[this] := 265230608;
[L1124]              __tmp__decimals_CSB[this] := 0;
[L1125]              __tmp__symbol_CSB[this] := 265230608;
[L1127]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][msgsender_MSG];
[L1128]              __tmp__balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1129]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][msgsender_MSG];
[L1130]              __tmp__totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1131]              __tmp__name_CSB[this] := _tokenName_s131;
[L1132]              __tmp__decimals_CSB[this] := _decimalUnits_s131;
[L1133]              __tmp__symbol_CSB[this] := _tokenSymbol_s131;
[L1165]  RET         call CSB_CSB_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1166]  COND FALSE  !(revert)
[L224]   RET         call CSB_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L225]               assume revert || gas < 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:54,287 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:54,287 INFO  L82        PathProgramCache]: Analyzing trace with hash -2141981888, now seen corresponding path program 1 times
[2020-11-25 12:53:54,288 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:54,295 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:54,320 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:54,320 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:54,320 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:53:54,321 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:54,321 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:53:54,321 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:53:54,321 INFO  L87              Difference]: Start difference. First operand 1317 states and 1400 transitions. cyclomatic complexity: 86 Second operand 4 states.
[2020-11-25 12:53:54,436 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:54,436 INFO  L93              Difference]: Finished difference Result 1742 states and 1946 transitions.
[2020-11-25 12:53:54,436 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:53:54,436 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1742 states and 1946 transitions.
[2020-11-25 12:53:54,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 12:53:54,450 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1742 states to 1676 states and 1880 transitions.
[2020-11-25 12:53:54,451 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 774
[2020-11-25 12:53:54,451 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 774
[2020-11-25 12:53:54,451 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1676 states and 1880 transitions.
[2020-11-25 12:53:54,453 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:54,453 INFO  L728         BuchiCegarLoop]: Abstraction has 1676 states and 1880 transitions.
[2020-11-25 12:53:54,455 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1676 states and 1880 transitions.
[2020-11-25 12:53:54,467 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1676 to 1251.
[2020-11-25 12:53:54,467 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1251 states.
[2020-11-25 12:53:54,469 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1251 states to 1251 states and 1333 transitions.
[2020-11-25 12:53:54,469 INFO  L751         BuchiCegarLoop]: Abstraction has 1251 states and 1333 transitions.
[2020-11-25 12:53:54,469 INFO  L631         BuchiCegarLoop]: Abstraction has 1251 states and 1333 transitions.
[2020-11-25 12:53:54,469 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:53:54,469 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1251 states and 1333 transitions.
[2020-11-25 12:53:54,472 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:54,472 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:54,472 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:54,474 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:54,474 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND FALSE  !(choice == 8)
[L2147]  COND TRUE   choice == 7
[L2148]              gas := gas - 21000;
[L2149]  COND TRUE   gas >= 0
[L2150]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2151]              assume msgvalue_MSG == 0;
[L2152]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:54,477 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:54,477 INFO  L82        PathProgramCache]: Analyzing trace with hash -580078713, now seen corresponding path program 1 times
[2020-11-25 12:53:54,477 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:54,488 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:54,692 INFO  L134       CoverageAnalysis]: Checked inductivity of 47 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 47 trivial. 0 not checked.
[2020-11-25 12:53:54,692 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:54,693 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 12:53:54,693 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:54,693 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 12:53:54,693 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=263, Unknown=0, NotChecked=0, Total=306
[2020-11-25 12:53:54,693 INFO  L87              Difference]: Start difference. First operand 1251 states and 1333 transitions. cyclomatic complexity: 85 Second operand 18 states.
[2020-11-25 12:53:55,770 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:55,770 INFO  L93              Difference]: Finished difference Result 1318 states and 1416 transitions.
[2020-11-25 12:53:55,770 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 12:53:55,770 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1318 states and 1416 transitions.
[2020-11-25 12:53:55,774 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:55,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1318 states to 1318 states and 1416 transitions.
[2020-11-25 12:53:55,777 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 583
[2020-11-25 12:53:55,778 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 583
[2020-11-25 12:53:55,778 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1318 states and 1416 transitions.
[2020-11-25 12:53:55,779 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:55,779 INFO  L728         BuchiCegarLoop]: Abstraction has 1318 states and 1416 transitions.
[2020-11-25 12:53:55,780 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1318 states and 1416 transitions.
[2020-11-25 12:53:55,789 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1318 to 1280.
[2020-11-25 12:53:55,789 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1280 states.
[2020-11-25 12:53:55,791 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1280 states to 1280 states and 1377 transitions.
[2020-11-25 12:53:55,791 INFO  L751         BuchiCegarLoop]: Abstraction has 1280 states and 1377 transitions.
[2020-11-25 12:53:55,791 INFO  L631         BuchiCegarLoop]: Abstraction has 1280 states and 1377 transitions.
[2020-11-25 12:53:55,791 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:53:55,791 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1280 states and 1377 transitions.
[2020-11-25 12:53:55,794 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:55,794 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:55,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:55,795 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:55,795 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND FALSE  !(choice == 8)
[L2147]  COND TRUE   choice == 7
[L2148]              gas := gas - 21000;
[L2149]  COND TRUE   gas >= 0
[L2150]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2151]              assume msgvalue_MSG == 0;
[L2152]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:55,798 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:55,798 INFO  L82        PathProgramCache]: Analyzing trace with hash 263476283, now seen corresponding path program 1 times
[2020-11-25 12:53:55,798 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:55,810 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:55,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 47 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 47 trivial. 0 not checked.
[2020-11-25 12:53:55,970 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:55,970 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 12:53:55,971 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:55,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 12:53:55,971 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=284, Unknown=0, NotChecked=0, Total=342
[2020-11-25 12:53:55,971 INFO  L87              Difference]: Start difference. First operand 1280 states and 1377 transitions. cyclomatic complexity: 102 Second operand 19 states.
[2020-11-25 12:53:57,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:57,040 INFO  L93              Difference]: Finished difference Result 1325 states and 1422 transitions.
[2020-11-25 12:53:57,040 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 12:53:57,040 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1325 states and 1422 transitions.
[2020-11-25 12:53:57,043 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:57,046 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1325 states to 1325 states and 1422 transitions.
[2020-11-25 12:53:57,046 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 583
[2020-11-25 12:53:57,046 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 583
[2020-11-25 12:53:57,046 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1325 states and 1422 transitions.
[2020-11-25 12:53:57,047 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:57,047 INFO  L728         BuchiCegarLoop]: Abstraction has 1325 states and 1422 transitions.
[2020-11-25 12:53:57,048 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1325 states and 1422 transitions.
[2020-11-25 12:53:57,054 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1325 to 1269.
[2020-11-25 12:53:57,054 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1269 states.
[2020-11-25 12:53:57,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1269 states to 1269 states and 1362 transitions.
[2020-11-25 12:53:57,056 INFO  L751         BuchiCegarLoop]: Abstraction has 1269 states and 1362 transitions.
[2020-11-25 12:53:57,056 INFO  L631         BuchiCegarLoop]: Abstraction has 1269 states and 1362 transitions.
[2020-11-25 12:53:57,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:53:57,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1269 states and 1362 transitions.
[2020-11-25 12:53:57,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:57,057 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:57,057 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:57,058 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:57,058 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:57,061 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:57,061 INFO  L82        PathProgramCache]: Analyzing trace with hash -967267680, now seen corresponding path program 1 times
[2020-11-25 12:53:57,062 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:57,074 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:57,213 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 12:53:57,213 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:53:57,213 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 12:53:57,214 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:57,214 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 12:53:57,214 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=318, Unknown=0, NotChecked=0, Total=380
[2020-11-25 12:53:57,214 INFO  L87              Difference]: Start difference. First operand 1269 states and 1362 transitions. cyclomatic complexity: 98 Second operand 20 states.
[2020-11-25 12:53:58,216 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:58,216 INFO  L93              Difference]: Finished difference Result 1305 states and 1411 transitions.
[2020-11-25 12:53:58,216 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 12:53:58,216 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1305 states and 1411 transitions.
[2020-11-25 12:53:58,219 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:58,222 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1305 states to 1305 states and 1411 transitions.
[2020-11-25 12:53:58,222 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 587
[2020-11-25 12:53:58,222 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 587
[2020-11-25 12:53:58,222 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1305 states and 1411 transitions.
[2020-11-25 12:53:58,223 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:58,223 INFO  L728         BuchiCegarLoop]: Abstraction has 1305 states and 1411 transitions.
[2020-11-25 12:53:58,224 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1305 states and 1411 transitions.
[2020-11-25 12:53:58,230 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1305 to 1289.
[2020-11-25 12:53:58,230 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1289 states.
[2020-11-25 12:53:58,231 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1289 states to 1289 states and 1391 transitions.
[2020-11-25 12:53:58,231 INFO  L751         BuchiCegarLoop]: Abstraction has 1289 states and 1391 transitions.
[2020-11-25 12:53:58,231 INFO  L631         BuchiCegarLoop]: Abstraction has 1289 states and 1391 transitions.
[2020-11-25 12:53:58,231 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 12:53:58,231 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1289 states and 1391 transitions.
[2020-11-25 12:53:58,233 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:58,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:58,233 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:58,234 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:58,234 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:58,236 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:58,236 INFO  L82        PathProgramCache]: Analyzing trace with hash 1799117442, now seen corresponding path program 1 times
[2020-11-25 12:53:58,237 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:58,255 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:59,145 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 12:53:59,145 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:53:59,145 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 12:53:59,146 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:59,146 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 12:53:59,146 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=110, Invalid=760, Unknown=0, NotChecked=0, Total=870
[2020-11-25 12:53:59,146 INFO  L87              Difference]: Start difference. First operand 1289 states and 1391 transitions. cyclomatic complexity: 108 Second operand 30 states.
[2020-11-25 12:54:01,003 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 80 DAG size of output: 72
[2020-11-25 12:54:05,300 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:54:05,300 INFO  L93              Difference]: Finished difference Result 1339 states and 1456 transitions.
[2020-11-25 12:54:05,300 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 12:54:05,300 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1339 states and 1456 transitions.
[2020-11-25 12:54:05,302 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:54:05,305 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1339 states to 1339 states and 1456 transitions.
[2020-11-25 12:54:05,305 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 589
[2020-11-25 12:54:05,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 589
[2020-11-25 12:54:05,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1339 states and 1456 transitions.
[2020-11-25 12:54:05,306 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:54:05,306 INFO  L728         BuchiCegarLoop]: Abstraction has 1339 states and 1456 transitions.
[2020-11-25 12:54:05,307 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1339 states and 1456 transitions.
[2020-11-25 12:54:05,313 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1339 to 1291.
[2020-11-25 12:54:05,313 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1291 states.
[2020-11-25 12:54:05,314 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1291 states to 1291 states and 1397 transitions.
[2020-11-25 12:54:05,315 INFO  L751         BuchiCegarLoop]: Abstraction has 1291 states and 1397 transitions.
[2020-11-25 12:54:05,315 INFO  L631         BuchiCegarLoop]: Abstraction has 1291 states and 1397 transitions.
[2020-11-25 12:54:05,315 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 12:54:05,315 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1291 states and 1397 transitions.
[2020-11-25 12:54:05,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:54:05,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:54:05,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:54:05,317 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:54:05,317 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:54:05,320 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:05,320 INFO  L82        PathProgramCache]: Analyzing trace with hash -978607709, now seen corresponding path program 1 times
[2020-11-25 12:54:05,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:05,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:54:05,508 INFO  L134       CoverageAnalysis]: Checked inductivity of 151 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 144 trivial. 0 not checked.
[2020-11-25 12:54:05,508 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:54:05,508 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-11-25 12:54:05,509 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:54:05,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 12:54:05,509 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=100, Invalid=452, Unknown=0, NotChecked=0, Total=552
[2020-11-25 12:54:05,509 INFO  L87              Difference]: Start difference. First operand 1291 states and 1397 transitions. cyclomatic complexity: 113 Second operand 24 states.
[2020-11-25 12:54:06,603 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:54:06,603 INFO  L93              Difference]: Finished difference Result 1340 states and 1450 transitions.
[2020-11-25 12:54:06,603 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 12:54:06,604 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1340 states and 1450 transitions.
[2020-11-25 12:54:06,606 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:54:06,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1340 states to 1340 states and 1450 transitions.
[2020-11-25 12:54:06,608 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 592
[2020-11-25 12:54:06,608 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 592
[2020-11-25 12:54:06,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1340 states and 1450 transitions.
[2020-11-25 12:54:06,609 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:54:06,609 INFO  L728         BuchiCegarLoop]: Abstraction has 1340 states and 1450 transitions.
[2020-11-25 12:54:06,610 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1340 states and 1450 transitions.
[2020-11-25 12:54:06,615 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1340 to 1271.
[2020-11-25 12:54:06,615 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1271 states.
[2020-11-25 12:54:06,616 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1271 states to 1271 states and 1368 transitions.
[2020-11-25 12:54:06,616 INFO  L751         BuchiCegarLoop]: Abstraction has 1271 states and 1368 transitions.
[2020-11-25 12:54:06,616 INFO  L631         BuchiCegarLoop]: Abstraction has 1271 states and 1368 transitions.
[2020-11-25 12:54:06,616 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 12:54:06,616 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1271 states and 1368 transitions.
[2020-11-25 12:54:06,618 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:54:06,618 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:54:06,618 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:54:06,619 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:54:06,619 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND FALSE  !(choice == 8)
[L2147]  COND TRUE   choice == 7
[L2148]              gas := gas - 21000;
[L2149]  COND TRUE   gas >= 0
[L2150]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2151]              assume msgvalue_MSG == 0;
[L2152]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:54:06,622 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:06,622 INFO  L82        PathProgramCache]: Analyzing trace with hash 753647686, now seen corresponding path program 1 times
[2020-11-25 12:54:06,622 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:06,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:06,662 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:06,715 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:06,715 INFO  L82        PathProgramCache]: Analyzing trace with hash -1263992154, now seen corresponding path program 1 times
[2020-11-25 12:54:06,716 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:06,717 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:54:06,720 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:54:06,720 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:54:06,720 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:54:06,720 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 12:54:06,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:54:06,720 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:54:06,721 INFO  L87              Difference]: Start difference. First operand 1271 states and 1368 transitions. cyclomatic complexity: 103 Second operand 4 states.
[2020-11-25 12:54:06,780 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:54:06,781 INFO  L93              Difference]: Finished difference Result 1390 states and 1506 transitions.
[2020-11-25 12:54:06,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:54:06,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1390 states and 1506 transitions.
[2020-11-25 12:54:06,784 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:54:06,787 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1390 states to 1390 states and 1506 transitions.
[2020-11-25 12:54:06,788 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 600
[2020-11-25 12:54:06,788 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 600
[2020-11-25 12:54:06,788 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1390 states and 1506 transitions.
[2020-11-25 12:54:06,789 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:54:06,789 INFO  L728         BuchiCegarLoop]: Abstraction has 1390 states and 1506 transitions.
[2020-11-25 12:54:06,790 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1390 states and 1506 transitions.
[2020-11-25 12:54:06,796 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1390 to 1271.
[2020-11-25 12:54:06,796 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1271 states.
[2020-11-25 12:54:06,797 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1271 states to 1271 states and 1346 transitions.
[2020-11-25 12:54:06,797 INFO  L751         BuchiCegarLoop]: Abstraction has 1271 states and 1346 transitions.
[2020-11-25 12:54:06,797 INFO  L631         BuchiCegarLoop]: Abstraction has 1271 states and 1346 transitions.
[2020-11-25 12:54:06,797 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 12:54:06,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1271 states and 1346 transitions.
[2020-11-25 12:54:06,799 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:54:06,800 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:54:06,800 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:54:06,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:54:06,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND FALSE  !(choice == 8)
[L2147]  COND TRUE   choice == 7
[L2148]              gas := gas - 21000;
[L2149]  COND TRUE   gas >= 0
[L2150]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2151]              assume msgvalue_MSG == 0;
[L2152]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:54:06,803 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:06,803 INFO  L82        PathProgramCache]: Analyzing trace with hash 753647686, now seen corresponding path program 2 times
[2020-11-25 12:54:06,804 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:06,819 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:06,842 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:06,863 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:06,863 INFO  L82        PathProgramCache]: Analyzing trace with hash 398635187, now seen corresponding path program 1 times
[2020-11-25 12:54:06,864 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:06,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:06,872 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:06,877 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:06,877 INFO  L82        PathProgramCache]: Analyzing trace with hash 1243997582, now seen corresponding path program 1 times
[2020-11-25 12:54:06,878 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:06,902 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:54:08,580 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 193 DAG size of output: 48
[2020-11-25 12:54:09,558 WARN  L188               SmtUtils]: Spent 727.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 110
[2020-11-25 12:54:10,314 WARN  L188               SmtUtils]: Spent 380.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 105
[2020-11-25 12:54:10,716 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 64
[2020-11-25 12:54:11,027 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 74
[2020-11-25 12:54:11,271 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 74
[2020-11-25 12:54:11,683 INFO  L134       CoverageAnalysis]: Checked inductivity of 169 backedges. 2 proven. 29 refuted. 0 times theorem prover too weak. 138 trivial. 0 not checked.
[2020-11-25 12:54:11,684 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:54:11,685 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 12:54:11,685 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 12:54:11,686 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=159, Invalid=1481, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 12:54:11,686 INFO  L87              Difference]: Start difference. First operand 1271 states and 1346 transitions. cyclomatic complexity: 81 Second operand 41 states.
[2020-11-25 12:54:14,360 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 126
[2020-11-25 12:54:18,070 WARN  L188               SmtUtils]: Spent 1.97 s on a formula simplification. DAG size of input: 162 DAG size of output: 158
[2020-11-25 12:54:19,139 WARN  L188               SmtUtils]: Spent 664.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 154
[2020-11-25 12:54:25,090 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:54:25,090 INFO  L93              Difference]: Finished difference Result 1352 states and 1476 transitions.
[2020-11-25 12:54:25,090 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 12:54:25,090 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1352 states and 1476 transitions.
[2020-11-25 12:54:25,093 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:54:25,095 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1352 states to 1352 states and 1476 transitions.
[2020-11-25 12:54:25,096 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 596
[2020-11-25 12:54:25,096 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 596
[2020-11-25 12:54:25,096 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1352 states and 1476 transitions.
[2020-11-25 12:54:25,097 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:54:25,097 INFO  L728         BuchiCegarLoop]: Abstraction has 1352 states and 1476 transitions.
[2020-11-25 12:54:25,098 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1352 states and 1476 transitions.
[2020-11-25 12:54:25,104 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1352 to 1305.
[2020-11-25 12:54:25,104 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1305 states.
[2020-11-25 12:54:25,105 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1305 states to 1305 states and 1407 transitions.
[2020-11-25 12:54:25,106 INFO  L751         BuchiCegarLoop]: Abstraction has 1305 states and 1407 transitions.
[2020-11-25 12:54:25,106 INFO  L631         BuchiCegarLoop]: Abstraction has 1305 states and 1407 transitions.
[2020-11-25 12:54:25,106 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 12:54:25,106 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1305 states and 1407 transitions.
[2020-11-25 12:54:25,107 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:54:25,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:54:25,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:54:25,108 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:54:25,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_CSB0 := false;
[L2]                 call_transferFrom_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND FALSE  !(choice == 8)
[L2147]  COND TRUE   choice == 7
[L2148]              gas := gas - 21000;
[L2149]  COND TRUE   gas >= 0
[L2150]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2151]              assume msgvalue_MSG == 0;
[L2152]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND FALSE  !(choice == 8)
[L2147]  COND TRUE   choice == 7
[L2148]              gas := gas - 21000;
[L2149]  COND TRUE   gas >= 0
[L2150]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2151]              assume msgvalue_MSG == 0;
[L2152]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:54:25,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:25,111 INFO  L82        PathProgramCache]: Analyzing trace with hash 564173596, now seen corresponding path program 1 times
[2020-11-25 12:54:25,111 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:25,129 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:25,153 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:25,173 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:25,173 INFO  L82        PathProgramCache]: Analyzing trace with hash -1698771174, now seen corresponding path program 1 times
[2020-11-25 12:54:25,174 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:25,176 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:25,178 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:25,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:54:25,183 INFO  L82        PathProgramCache]: Analyzing trace with hash 463481973, now seen corresponding path program 1 times
[2020-11-25 12:54:25,183 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:54:25,203 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:25,229 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 12:54:25,695 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
[2020-11-25 12:54:26,259 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 156
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 12:54:26,428 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 184
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 12:54:26,790 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 100
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 12:54:26,987 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification. DAG size of input: 137 DAG size of output: 128
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 12:54:27,361 WARN  L188               SmtUtils]: Spent 317.00 ms on a formula simplification. DAG size of input: 228 DAG size of output: 223
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
[2020-11-25 12:54:27,588 WARN  L188               SmtUtils]: Spent 224.00 ms on a formula simplification that was a NOOP. DAG size: 208
[2020-11-25 12:54:28,115 WARN  L188               SmtUtils]: Spent 525.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 241
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 12:54:28,253 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification that was a NOOP. DAG size: 167
[2020-11-25 12:54:28,486 WARN  L188               SmtUtils]: Spent 231.00 ms on a formula simplification that was a NOOP. DAG size: 289
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 12:54:28,844 WARN  L188               SmtUtils]: Spent 351.00 ms on a formula simplification that was a NOOP. DAG size: 230
[2020-11-25 12:54:37,981 WARN  L188               SmtUtils]: Spent 9.13 s on a formula simplification. DAG size of input: 727 DAG size of output: 716
Garbage collection #1: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #2: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #3: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #4: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #5: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #6: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #7: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-25 12:54:38,778 WARN  L188               SmtUtils]: Spent 767.00 ms on a formula simplification that was a NOOP. DAG size: 260
[2020-11-25 12:54:40,159 WARN  L188               SmtUtils]: Spent 1.37 s on a formula simplification that was a NOOP. DAG size: 333
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 12:54:40,888 WARN  L188               SmtUtils]: Spent 723.00 ms on a formula simplification that was a NOOP. DAG size: 260
[2020-11-25 12:54:43,465 WARN  L188               SmtUtils]: Spent 2.58 s on a formula simplification. DAG size of input: 335 DAG size of output: 334
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 12:54:44,674 WARN  L188               SmtUtils]: Spent 1.21 s on a formula simplification that was a NOOP. DAG size: 330
[2020-11-25 12:54:44,714 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:44,746 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:54:44,754 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:54:44 BasicIcfg
[2020-11-25 12:54:44,754 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 12:54:44,755 INFO  L168              Benchmark]: Toolchain (without parser) took 54754.45 ms. Allocated memory was 1.0 GB in the beginning and 3.8 GB in the end (delta: 2.7 GB). Free memory was 940.6 MB in the beginning and 2.7 GB in the end (delta: -1.7 GB). Peak memory consumption was 2.9 GB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,755 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,755 INFO  L168              Benchmark]: Boogie Preprocessor took 72.57 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,756 INFO  L168              Benchmark]: UtopiaSpecLang took 45.72 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,757 INFO  L168              Benchmark]: Boogie Printer took 11.30 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,757 INFO  L168              Benchmark]: RCFGBuilder took 503.65 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,757 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.25 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,757 INFO  L168              Benchmark]: BÃ¼chi Program Product took 957.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 50.9 MB). Free memory was 867.2 MB in the beginning and 867.8 MB in the end (delta: -605.8 kB). Peak memory consumption was 151.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,757 INFO  L168              Benchmark]: BlockEncodingV2 took 71.92 ms. Allocated memory is still 1.1 GB. Free memory was 867.8 MB in the beginning and 840.8 MB in the end (delta: 27.0 MB). Peak memory consumption was 27.0 MB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,758 INFO  L168              Benchmark]: BuchiAutomizer took 53052.66 ms. Allocated memory was 1.1 GB in the beginning and 3.8 GB in the end (delta: 2.7 GB). Free memory was 834.8 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 2.8 GB. Max. memory is 15.3 GB.
[2020-11-25 12:54:44,761 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1826 locations, 3052 edges
  - StatisticsResult: Encoded RCFG
    1788 locations, 2969 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 72.57 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 45.72 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 11.30 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 503.65 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.25 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 957.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 50.9 MB). Free memory was 867.2 MB in the beginning and 867.8 MB in the end (delta: -605.8 kB). Peak memory consumption was 151.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 71.92 ms. Allocated memory is still 1.1 GB. Free memory was 867.8 MB in the beginning and 840.8 MB in the end (delta: 27.0 MB). Peak memory consumption was 27.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 53052.66 ms. Allocated memory was 1.1 GB in the beginning and 3.8 GB in the end (delta: 2.7 GB). Free memory was 834.8 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 2.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    789 locations, 950 edges
  - StatisticsResult: BuchiProgram size
    1826 locations, 3052 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.12 modules have a trivial ranking function, the largest among these consists of 41 locations. The remainder module has 1305 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 52.9s and 13 iterations.  TraceHistogramMax:3. Analysis of lassos took 26.5s. Construction of modules took 18.5s. BÃ¼chi inclusion checks took 7.4s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 12 MinimizatonAttempts, 1328 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1361 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 15238 SDtfs, 21707 SDslu, 47763 SDs, 0 SdLazy, 109120 SolverSat, 2656 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc1 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(231584178474632390847141970017375815706539969331281128078915168015826259279881) = (new CSB)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279886, _initialAmount : 231584178474632390847141970017375815706539969331281128078915168015826259279873, _tokenName : 231584178474632390847141970017375815706539969331281128078915168015826259279878, _decimalUnits : 231584178474632390847141970017375815706539969331281128078915168015826259279874, _tokenSymbol : 231584178474632390847141970017375815706539969331281128078915168015826259279883});
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
CSB(231584178474632390847141970017375815706539969331281128078915168015826259279881).approve~address~uint256.gas(3979002)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279886, _spender : 231584178474632390847141970017375815706539969331281128078915168015826259279886, _value : 8});
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
CSB(231584178474632390847141970017375815706539969331281128078915168015826259279881).transfer~address~uint256.gas(3979003)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279886, _to : 231584178474632390847141970017375815706539969331281128078915168015826259279884, _value : 115792089237316195423570985008687907853269984665640564039457584007913129639929});
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
CSB(231584178474632390847141970017375815706539969331281128078915168015826259279881).transferFrom~address~address~uint256.gas(3979004)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279886, _from : 231584178474632390847141970017375815706539969331281128078915168015826259279886, _to : 231584178474632390847141970017375815706539969331281128078915168015826259279884, _value : 8});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s239 != _to_s239 && ((_value_s239 > balances_CSB[this][_from_s239] || _value_s239 > allowed_CSB[this][_from_s239][msgsender_MSG]) || balances_CSB[this][_to_s239] + _value_s239 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_CSB0 := true;
[L2]                 call_transferFrom_CSB0 := false;
[L2]                 revert := revert_hold;
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);

Loop:
CSB(231584178474632390847141970017375815706539969331281128078915168015826259279881).approve~address~uint256.gas(3979001)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279879, _spender : 231584178474632390847141970017375815706539969331281128078915168015826259279880, _value : 0});
[L419]               havoc __exception;
[L420]               revert := false;
[L421]   COND FALSE  !(__exception)
[L443]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1286]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1287]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1288]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1289]              assert { :EventEmitted "Approval_CSB" } true;
[L1290]              success_s279 := true;
[L443]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L444]               assume !revert && gas >= 0;
[L2152]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
