This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:56:44,409 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:56:44,411 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:56:44,421 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:56:44,422 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:56:44,422 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:56:44,423 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:56:44,425 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:56:44,426 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:56:44,427 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:56:44,428 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:56:44,428 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:56:44,429 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:56:44,429 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:56:44,430 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:56:44,431 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:56:44,432 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:56:44,433 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:56:44,434 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:56:44,435 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:56:44,436 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:56:44,437 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:56:44,438 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:56:44,438 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:56:44,439 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:56:44,439 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:56:44,439 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:56:44,440 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:56:44,440 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:56:44,441 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:56:44,441 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:56:44,441 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:56:44,442 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:56:44,442 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:56:44,443 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:56:44,443 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:56:44,444 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:56:44,444 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:56:44,444 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:56:44,445 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:56:44,445 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:56:44,446 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:56:44,453 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:56:44,454 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:56:44,454 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:56:44,454 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:56:44,455 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:56:44,455 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:56:44,455 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:56:44,455 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:56:44,455 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:56:44,455 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:56:44,455 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:56:44,455 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:56:44,455 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:56:44,456 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:56:44,456 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:56:44,457 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:56:44,457 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:56:44,457 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:56:44,481 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:56:44,495 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:56:44,499 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:56:44,501 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:56:44,501 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:56:44,502 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl
[2020-11-25 06:56:44,502 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl'
[2020-11-25 06:56:44,596 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:56:44,598 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:56:44,598 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:56:44,598 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:56:44,598 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:56:44,615 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,617 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,654 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,655 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,687 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,707 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,720 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,734 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:56:44,734 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:56:44,735 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:56:44,737 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:56:44,742 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/1) ...
[2020-11-25 06:56:44,759 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 06:56:44,767 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 06:56:44,776 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 06:56:44,783 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s286 && _value_s286>balances_BasicToken[this][msg.sender] ) && _value_s286>=0 ) && _value_s286<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s286]>=0 ) && balances_BasicToken[this][_to_s286]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IdentifierExpression[_to_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],BinaryExpression[COMPGT,IdentifierExpression[_value_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s286,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 06:56:44,794 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BasicToken.transfer)))
[2020-11-25 06:56:44,795 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BasicToken0) ==> ( <>AP(fail_transfer_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:56:44,807 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:56:44 PropertyContainer
[2020-11-25 06:56:44,807 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:56:44,808 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:56:44,808 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:56:44,808 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:56:44,809 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/2) ...
[2020-11-25 06:56:44,809 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:56:44,809 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:56:44,835 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:56:44" (2/2) ...
[2020-11-25 06:56:44,835 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:56:44,835 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:56:44,836 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:56:44,836 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:56:44,836 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/2) ...
[2020-11-25 06:56:44,901 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:56:44,902 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:56:44,902 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 06:56:44,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 06:56:44,903 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,903 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,903 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,904 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,904 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 06:56:44,904 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 06:56:44,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 06:56:44,904 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 06:56:44,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 06:56:44,905 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 06:56:44,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 06:56:44,905 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 06:56:44,905 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 06:56:44,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 06:56:44,906 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 06:56:44,906 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 06:56:44,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 06:56:44,906 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 06:56:44,906 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 06:56:44,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 06:56:44,906 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 06:56:44,906 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 06:56:44,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 06:56:44,907 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 06:56:44,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 06:56:44,907 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 06:56:44,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 06:56:44,907 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 06:56:44,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 06:56:44,907 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:56:44,907 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 06:56:44,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 06:56:44,907 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 06:56:44,907 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 06:56:44,908 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 06:56:44,908 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 06:56:44,908 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 06:56:44,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 06:56:44,908 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 06:56:44,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 06:56:44,908 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 06:56:44,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 06:56:44,908 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 06:56:44,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 06:56:44,908 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 06:56:44,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 06:56:44,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 06:56:44,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 06:56:44,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 06:56:44,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 06:56:44,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 06:56:44,909 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken
[2020-11-25 06:56:44,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken
[2020-11-25 06:56:44,910 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken
[2020-11-25 06:56:44,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken
[2020-11-25 06:56:44,910 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken
[2020-11-25 06:56:44,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken
[2020-11-25 06:56:44,910 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken_NoBaseCtor__success
[2020-11-25 06:56:44,910 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken
[2020-11-25 06:56:44,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken
[2020-11-25 06:56:44,910 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken
[2020-11-25 06:56:44,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken
[2020-11-25 06:56:44,910 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken
[2020-11-25 06:56:44,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken
[2020-11-25 06:56:44,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 06:56:44,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CappedToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CappedToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TSTToken
[2020-11-25 06:56:44,912 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 06:56:44,913 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 06:56:44,914 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 06:56:44,915 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 06:56:44,915 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 06:56:44,915 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 06:56:44,916 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 06:56:44,916 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 06:56:44,916 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 06:56:44,916 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 06:56:44,917 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 06:56:44,917 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 06:56:44,917 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 06:56:44,917 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 06:56:44,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:56:44,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 06:56:44,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 06:56:44,918 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 06:56:44,919 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 06:56:44,919 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 06:56:44,919 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 06:56:44,919 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,920 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 06:56:44,920 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,920 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 06:56:44,920 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 06:56:44,920 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:56:44,921 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,921 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:56:44,921 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,922 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 06:56:44,922 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 06:56:44,922 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 06:56:44,922 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 06:56:44,923 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 06:56:44,923 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 06:56:44,923 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 06:56:44,923 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 06:56:44,924 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 06:56:44,924 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 06:56:44,924 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__success
[2020-11-25 06:56:44,924 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__fail
[2020-11-25 06:56:44,924 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__success
[2020-11-25 06:56:44,924 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 06:56:44,924 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__success
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__fail
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken_NoBaseCtor__fail
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken__success
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken__fail
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken__success
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken__fail
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken__success
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken__fail
[2020-11-25 06:56:44,925 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken__success
[2020-11-25 06:56:44,926 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken__fail
[2020-11-25 06:56:44,926 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:56:44,926 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:56:44,926 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:56:44,926 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 06:56:44,926 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 06:56:44,926 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 06:56:44,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:56:44,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 06:56:44,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 06:56:44,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:56:44,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 06:56:44,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 06:56:44,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__fail
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__success
[2020-11-25 06:56:44,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__success
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__fail
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__success
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken_NoBaseCtor__fail
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken_NoBaseCtor__success
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken__fail
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken__success
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken__fail
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken__success
[2020-11-25 06:56:44,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken__fail
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken__success
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken__fail
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken__success
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:56:44,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 06:56:44,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CappedToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CappedToken
[2020-11-25 06:56:44,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TSTToken
[2020-11-25 06:56:44,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:56:44,938 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:56:44,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:56:45,561 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:56:45,561 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:56:46,033 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:56:46,033 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 06:56:46,036 INFO  L202        PluginConnector]: Adding new model TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:56:46 BoogieIcfgContainer
[2020-11-25 06:56:46,036 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:56:44" (2/2) ...
[2020-11-25 06:56:46,036 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:56:46,036 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@51760609 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:56:46, skipping insertion in model container
[2020-11-25 06:56:46,036 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:56:46,036 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:56:46,036 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:56:46,038 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:56:46,038 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/3) ...
[2020-11-25 06:56:46,038 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1b9a1f8 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:56:46, skipping insertion in model container
[2020-11-25 06:56:46,038 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:56:44" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:56:46,076 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:56:46 NWAContainer
[2020-11-25 06:56:46,076 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:56:46,076 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:56:46,076 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:56:46,077 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:56:46,078 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:56:46" (3/4) ...
[2020-11-25 06:56:46,079 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7e19a152 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:56:46, skipping insertion in model container
[2020-11-25 06:56:46,079 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:56:46" (4/4) ...
[2020-11-25 06:56:46,082 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:56:46,086 INFO  L110   BuchiProductObserver]: Initial RCFG 2301 locations, 3213 edges
[2020-11-25 06:56:46,086 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:56:46,098 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:56:47,983 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:56:47,990 INFO  L110   BuchiProductObserver]: BuchiProgram size 5814 locations, 10614 edges
[2020-11-25 06:56:47,990 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:56:47 BoogieIcfgContainer
[2020-11-25 06:56:47,990 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:56:47,991 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:56:47,991 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:56:47,992 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:56:47,993 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:56:47" (1/1) ...
[2020-11-25 06:56:48,119 INFO  L313           BlockEncoder]: Initial Icfg 5814 locations, 10614 edges
[2020-11-25 06:56:48,119 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:56:48,120 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:56:48,120 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:56:48,120 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:56:48,137 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 21 locations because of local infeasibility
[2020-11-25 06:56:48,150 INFO  L70        RemoveSinkStates]: Removed 58 edges and 31 locations by removing sink states
[2020-11-25 06:56:48,166 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:56:48,170 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:56:48,176 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:56:48,176 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:56:48,180 INFO  L313           BlockEncoder]: Encoded RCFG 5724 locations, 10398 edges
[2020-11-25 06:56:48,181 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:56:48 BasicIcfg
[2020-11-25 06:56:48,181 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:56:48,181 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:56:48,181 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:56:48,184 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:56:48,184 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:56:48,184 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:56:44" (1/6) ...
[2020-11-25 06:56:48,186 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55d425da and model type TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:56:48, skipping insertion in model container
[2020-11-25 06:56:48,186 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:56:48,186 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:56:44" (2/6) ...
[2020-11-25 06:56:48,186 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55d425da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:56:48, skipping insertion in model container
[2020-11-25 06:56:48,186 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:56:48,186 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:56:46" (3/6) ...
[2020-11-25 06:56:48,187 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55d425da and model type TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:56:48, skipping insertion in model container
[2020-11-25 06:56:48,187 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:56:48,187 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:56:46" (4/6) ...
[2020-11-25 06:56:48,187 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55d425da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:56:48, skipping insertion in model container
[2020-11-25 06:56:48,187 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:56:48,187 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:56:47" (5/6) ...
[2020-11-25 06:56:48,188 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55d425da and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:56:48, skipping insertion in model container
[2020-11-25 06:56:48,188 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:56:48,188 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:56:48" (6/6) ...
[2020-11-25 06:56:48,189 INFO  L404   chiAutomizerObserver]: Analyzing ICFG TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_transfer-self-fail.bpl_BEv2
[2020-11-25 06:56:48,226 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:56:48,227 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:56:48,227 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:56:48,227 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:56:48,227 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:56:48,227 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:56:48,227 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:56:48,227 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:56:48,227 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:56:48,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5724 states.
[2020-11-25 06:56:48,341 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:56:48,341 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:56:48,341 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:56:48,350 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:56:48,350 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:56:48,351 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:56:48,351 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5724 states.
[2020-11-25 06:56:48,375 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:56:48,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:56:48,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:56:48,378 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:56:48,378 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:56:48,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:56:48,395 INFO  L82        PathProgramCache]: Analyzing trace with hash -802288460, now seen corresponding path program 1 times
[2020-11-25 06:56:48,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:56:48,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:56:48,456 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:56:48,458 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:56:48,459 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:56:48,797 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:56:48,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:56:48,806 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:56:48,807 INFO  L87              Difference]: Start difference. First operand 5724 states. Second operand 3 states.
[2020-11-25 06:56:49,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:56:49,063 INFO  L93              Difference]: Finished difference Result 2895 states and 3310 transitions.
[2020-11-25 06:56:49,063 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:56:49,064 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2895 states and 3310 transitions.
[2020-11-25 06:56:49,082 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:56:49,105 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2895 states to 2891 states and 3302 transitions.
[2020-11-25 06:56:49,105 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 06:56:49,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 727
[2020-11-25 06:56:49,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2891 states and 3302 transitions.
[2020-11-25 06:56:49,114 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:56:49,114 INFO  L728         BuchiCegarLoop]: Abstraction has 2891 states and 3302 transitions.
[2020-11-25 06:56:49,128 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2891 states and 3302 transitions.
[2020-11-25 06:56:49,174 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2891 to 2891.
[2020-11-25 06:56:49,174 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2891 states.
[2020-11-25 06:56:49,179 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2891 states to 2891 states and 3302 transitions.
[2020-11-25 06:56:49,180 INFO  L751         BuchiCegarLoop]: Abstraction has 2891 states and 3302 transitions.
[2020-11-25 06:56:49,180 INFO  L631         BuchiCegarLoop]: Abstraction has 2891 states and 3302 transitions.
[2020-11-25 06:56:49,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:56:49,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2891 states and 3302 transitions.
[2020-11-25 06:56:49,187 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:56:49,187 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:56:49,187 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:56:49,188 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:56:49,188 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 > balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 > balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:56:49,192 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:56:49,192 INFO  L82        PathProgramCache]: Analyzing trace with hash 1009768347, now seen corresponding path program 1 times
[2020-11-25 06:56:49,193 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:56:49,201 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:56:49,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:56:49,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:56:49,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:56:49,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:56:49,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:56:49,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:56:49,223 INFO  L87              Difference]: Start difference. First operand 2891 states and 3302 transitions. cyclomatic complexity: 413 Second operand 3 states.
[2020-11-25 06:56:49,300 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:56:49,300 INFO  L93              Difference]: Finished difference Result 3603 states and 4071 transitions.
[2020-11-25 06:56:49,300 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:56:49,301 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3603 states and 4071 transitions.
[2020-11-25 06:56:49,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:56:49,325 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3603 states to 3603 states and 4071 transitions.
[2020-11-25 06:56:49,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 917
[2020-11-25 06:56:49,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 917
[2020-11-25 06:56:49,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3603 states and 4071 transitions.
[2020-11-25 06:56:49,332 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:56:49,332 INFO  L728         BuchiCegarLoop]: Abstraction has 3603 states and 4071 transitions.
[2020-11-25 06:56:49,335 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3603 states and 4071 transitions.
[2020-11-25 06:56:49,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3603 to 3195.
[2020-11-25 06:56:49,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3195 states.
[2020-11-25 06:56:49,368 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3195 states to 3195 states and 3576 transitions.
[2020-11-25 06:56:49,368 INFO  L751         BuchiCegarLoop]: Abstraction has 3195 states and 3576 transitions.
[2020-11-25 06:56:49,368 INFO  L631         BuchiCegarLoop]: Abstraction has 3195 states and 3576 transitions.
[2020-11-25 06:56:49,368 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:56:49,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3195 states and 3576 transitions.
[2020-11-25 06:56:49,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:56:49,374 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:56:49,374 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:56:49,379 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:56:49,379 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND TRUE   !(_cap_s704 > 0)
[L3424]              revert := true;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND TRUE   revert
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND TRUE   revert
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 > balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 > balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND TRUE   !(_value_s286 <= balances_BasicToken[this][msgsender_MSG])
[L2894]              revert := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:56:49,387 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:56:49,387 INFO  L82        PathProgramCache]: Analyzing trace with hash -379826986, now seen corresponding path program 1 times
[2020-11-25 06:56:49,388 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:56:49,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:56:49,650 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:56:49,650 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:56:49,650 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:56:49,651 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:56:49,651 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:56:49,651 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:56:49,652 INFO  L87              Difference]: Start difference. First operand 3195 states and 3576 transitions. cyclomatic complexity: 383 Second operand 3 states.
[2020-11-25 06:56:49,708 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:56:49,708 INFO  L93              Difference]: Finished difference Result 3603 states and 4005 transitions.
[2020-11-25 06:56:49,708 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:56:49,708 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3603 states and 4005 transitions.
[2020-11-25 06:56:49,719 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:56:49,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3603 states to 3437 states and 3817 transitions.
[2020-11-25 06:56:49,737 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 864
[2020-11-25 06:56:49,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 879
[2020-11-25 06:56:49,738 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3437 states and 3817 transitions.
[2020-11-25 06:56:49,744 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:56:49,744 INFO  L728         BuchiCegarLoop]: Abstraction has 3437 states and 3817 transitions.
[2020-11-25 06:56:49,748 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3437 states and 3817 transitions.
[2020-11-25 06:56:49,771 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3437 to 3089.
[2020-11-25 06:56:49,771 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3089 states.
[2020-11-25 06:56:49,774 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3089 states to 3089 states and 3382 transitions.
[2020-11-25 06:56:49,774 INFO  L751         BuchiCegarLoop]: Abstraction has 3089 states and 3382 transitions.
[2020-11-25 06:56:49,774 INFO  L631         BuchiCegarLoop]: Abstraction has 3089 states and 3382 transitions.
[2020-11-25 06:56:49,774 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:56:49,774 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3089 states and 3382 transitions.
[2020-11-25 06:56:49,778 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:56:49,778 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:56:49,778 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:56:49,782 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:56:49,782 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == TSTToken;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2963]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2963]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  COND FALSE  !(revert)
[L2967]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              Balance[this] := 0;
[L2967]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2968]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2834]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2834]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  COND FALSE  !(revert)
[L2838]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]              assume msgsender_MSG != null;
[L2813]              Balance[this] := 0;
[L2814]              balances_BasicToken[this] := zeroRefintArr();
[L2815]              sum_balances0[this] := 0;
[L2816]              totalSupply__BasicToken[this] := 0;
[L2838]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_TSTToken[this] := 1406741980;
[L3583]              symbol_TSTToken[this] := 57413297;
[L3584]              decimals_TSTToken[this] := 18;
[L3654]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 > balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6521]  CALL        call CorralChoice_TSTToken(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s298;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s286;
[L6342]              havoc _value_s286;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != BasicToken;
[L6382]              assume DType[msgsender_MSG] != ERC20;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != TSTToken;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s286 >= 0 && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s286 && _value_s286 > balances_BasicToken[this][msgsender_MSG]) && _value_s286 >= 0) && _value_s286 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s286] >= 0) && balances_BasicToken[this][_to_s286] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L555]               havoc __exception;
[L556]               revert := false;
[L557]   COND FALSE  !(__exception)
[L581]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L2893]  COND FALSE  !(!(_value_s286 <= balances_BasicToken[this][msgsender_MSG]))
[L2897]              __var_3 := null;
[L2898]  COND FALSE  !(!(_to_s286 != null))
[L2902]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2902]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s286);
[L2903]  COND FALSE  !(revert)
[L2906]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2907]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2908]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2909]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2909]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s286], _value_s286);
[L2910]  COND FALSE  !(revert)
[L2913]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s286];
[L2914]              balances_BasicToken[this][_to_s286] := __var_5;
[L2915]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s286];
[L2916]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2917]              __ret_0_ := true;
[L581]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L582]               assume !revert && gas >= 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s286, _value_s286);
[L6521]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:56:49,792 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:56:49,792 INFO  L82        PathProgramCache]: Analyzing trace with hash 291214597, now seen corresponding path program 1 times
[2020-11-25 06:56:49,793 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:56:49,822 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:56:50,073 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:56:50,073 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:56:50,073 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 06:56:50,074 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:56:50,074 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 06:56:50,074 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 06:56:50,074 INFO  L87              Difference]: Start difference. First operand 3089 states and 3382 transitions. cyclomatic complexity: 295 Second operand 7 states.
[2020-11-25 06:56:50,636 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:56:50,636 INFO  L93              Difference]: Finished difference Result 1800 states and 1949 transitions.
[2020-11-25 06:56:50,636 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:56:50,636 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1800 states and 1949 transitions.
[2020-11-25 06:56:50,640 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:56:50,640 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1800 states to 0 states and 0 transitions.
[2020-11-25 06:56:50,640 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 06:56:50,640 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 06:56:50,640 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 06:56:50,640 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:56:50,640 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:56:50,640 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:56:50,640 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:56:50,640 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:56:50,640 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 06:56:50,641 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:56:50,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 06:56:50,644 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:56:50 BasicIcfg
[2020-11-25 06:56:50,644 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 06:56:50,644 INFO  L168              Benchmark]: Toolchain (without parser) took 6047.24 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 857.7 MB). Free memory was 929.8 MB in the beginning and 1.1 GB in the end (delta: -139.9 MB). Peak memory consumption was 717.8 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,645 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,645 INFO  L168              Benchmark]: Boogie Preprocessor took 136.11 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,645 INFO  L168              Benchmark]: UtopiaSpecLang took 73.14 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,646 INFO  L168              Benchmark]: Boogie Printer took 27.35 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,646 INFO  L168              Benchmark]: RCFGBuilder took 1200.80 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -99.7 MB). Peak memory consumption was 190.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,646 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.83 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 989.7 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,646 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1914.19 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.4 MB). Free memory was 989.7 MB in the beginning and 914.3 MB in the end (delta: 75.4 MB). Peak memory consumption was 495.1 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,647 INFO  L168              Benchmark]: BlockEncodingV2 took 190.23 ms. Allocated memory is still 1.3 GB. Free memory was 914.3 MB in the beginning and 811.5 MB in the end (delta: 102.8 MB). Peak memory consumption was 102.8 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,647 INFO  L168              Benchmark]: BuchiAutomizer took 2462.47 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 633.3 MB). Free memory was 811.5 MB in the beginning and 1.1 GB in the end (delta: -258.3 MB). Peak memory consumption was 375.0 MB. Max. memory is 15.3 GB.
[2020-11-25 06:56:50,650 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5814 locations, 10614 edges
  - StatisticsResult: Encoded RCFG
    5724 locations, 10398 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 136.11 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 73.14 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 27.35 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1200.80 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -99.7 MB). Peak memory consumption was 190.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.83 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 989.7 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1914.19 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.4 MB). Free memory was 989.7 MB in the beginning and 914.3 MB in the end (delta: 75.4 MB). Peak memory consumption was 495.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 190.23 ms. Allocated memory is still 1.3 GB. Free memory was 914.3 MB in the beginning and 811.5 MB in the end (delta: 102.8 MB). Peak memory consumption was 102.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2462.47 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 633.3 MB). Free memory was 811.5 MB in the beginning and 1.1 GB in the end (delta: -258.3 MB). Peak memory consumption was 375.0 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2301 locations, 3213 edges
  - StatisticsResult: BuchiProgram size
    5814 locations, 10614 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 4 terminating modules (4 trivial, 0 deterministic, 0 nondeterministic). 4 modules have a trivial ranking function, the largest among these consists of 7 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.4s and 5 iterations.  TraceHistogramMax:24. Analysis of lassos took 1.0s. Construction of modules took 0.6s. BÃ¼chi inclusion checks took 0.3s. Highest rank in rank-based complementation 0. Minimization of det autom 4. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 3 MinimizatonAttempts, 756 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 3195 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 12012 SDtfs, 8573 SDslu, 5861 SDs, 0 SdLazy, 6197 SolverSat, 2000 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU4 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_(fail_transfer_BasicToken0)asicToken0) ==> ( <>(fail_transfer_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
