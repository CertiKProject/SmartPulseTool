This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:52:14,174 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:52:14,175 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:52:14,182 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:52:14,182 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:52:14,183 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:52:14,184 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:52:14,185 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:52:14,186 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:52:14,186 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:52:14,186 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:52:14,186 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:52:14,187 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:52:14,187 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:52:14,188 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:52:14,189 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:52:14,189 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:52:14,190 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:52:14,191 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:52:14,191 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:52:14,192 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:52:14,192 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:52:14,194 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:52:14,194 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:52:14,194 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:52:14,194 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:52:14,195 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:52:14,195 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:52:14,195 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:52:14,195 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:52:14,196 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:52:14,196 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:52:14,196 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:52:14,197 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:52:14,197 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:52:14,197 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:52:14,197 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:52:14,198 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:52:14,198 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:52:14,198 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:52:14,198 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:52:14,198 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:52:14,204 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:52:14,204 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:52:14,204 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:52:14,205 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:52:14,205 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:52:14,205 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:52:14,205 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:52:14,206 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:52:14,206 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:52:14,225 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:52:14,237 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:52:14,240 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:52:14,241 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:52:14,241 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:52:14,241 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl
[2020-11-25 12:52:14,242 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl'
[2020-11-25 12:52:14,303 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:52:14,304 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:52:14,305 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:52:14,305 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:52:14,305 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:52:14,325 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,328 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,351 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,352 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,369 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,378 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,384 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,391 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:52:14,392 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:52:14,392 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:52:14,394 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:52:14,397 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/1) ...
[2020-11-25 12:52:14,411 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(CSB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && balances_CSB[this][from] == old(balances_CSB[this][from]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:52:14,416 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(CSB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && balances_CSB[this][from] == old(balances_CSB[this][from]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:52:14,425 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(CSB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && balances_CSB[this][from] == old(balances_CSB[this][from]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:52:14,435 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s239 && p1!=_to_s239 ) && ( p2!=_from_s239 || p3!=msg.sender ) ) && _from_s239!=_to_s239 ) && _value_s239<=balances_CSB[this][_from_s239] ) && _value_s239<=allowed_CSB[this][_from_s239][msg.sender] ) && ( balances_CSB[this][_to_s239] + _value_s239 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s239>=0 ) && _value_s239<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_to_s239]>=0 ) && balances_CSB[this][_to_s239]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_from_s239]>=0 ) && balances_CSB[this][_from_s239]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_CSB[this][_from_s239][msg.sender]>=0 ) && allowed_CSB[this][_from_s239][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:52:14,440 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s239==true && balances_CSB[this][_from_s239]==( ( old(balances_CSB[this][_from_s239]) ) - _value_s239 ) ) && balances_CSB[this][_to_s239]==( ( old(balances_CSB[this][_to_s239]) ) + _value_s239 ) ) && allowed_CSB[this][_from_s239][msg.sender]==( ( old(allowed_CSB[this][_from_s239][msg.sender]) ) - _value_s239 ) ) && totalSupply_CSBInterface[this]==( old(totalSupply_CSBInterface[this]) ) ) && balances_CSB[this][p1]==( old(balances_CSB[this][p1]) ) ) && allowed_CSB[this][p2][p3]==( old(allowed_CSB[this][p2][p3]) ) ) && name_CSB[this]==( old(name_CSB[this]) ) ) && decimals_CSB[this]==( old(decimals_CSB[this]) ) ) && symbol_CSB[this]==( old(symbol_CSB[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s239,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_CSB>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]]
[2020-11-25 12:52:14,444 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(CSB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && balances_CSB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && balances_CSB[this][from] == old(balances_CSB[this][from]) - value && balances_CSB[this][to] == old(balances_CSB[this][to]) + value && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this][p1] == old(balances_CSB[this][p1]) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:52:14,444 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_CSB0) ==> ( <>AP(success_transferFrom_CSB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:52:14,450 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:52:14 PropertyContainer
[2020-11-25 12:52:14,450 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:52:14,450 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:52:14,450 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:52:14,450 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:52:14,451 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/2) ...
[2020-11-25 12:52:14,451 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:52:14,451 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:52:14,461 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:52:14" (2/2) ...
[2020-11-25 12:52:14,461 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:52:14,462 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:52:14,462 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:52:14,462 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:52:14,463 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/2) ...
[2020-11-25 12:52:14,516 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:52:14,516 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:52:14,516 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface
[2020-11-25 12:52:14,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface
[2020-11-25 12:52:14,517 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSBInterface
[2020-11-25 12:52:14,517 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSBInterface
[2020-11-25 12:52:14,517 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSBInterface
[2020-11-25 12:52:14,517 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSBInterface
[2020-11-25 12:52:14,517 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSBInterface
[2020-11-25 12:52:14,517 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface
[2020-11-25 12:52:14,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface
[2020-11-25 12:52:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:52:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB
[2020-11-25 12:52:14,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB
[2020-11-25 12:52:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB
[2020-11-25 12:52:14,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB
[2020-11-25 12:52:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:52:14,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:52:14,518 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB
[2020-11-25 12:52:14,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB
[2020-11-25 12:52:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB
[2020-11-25 12:52:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB
[2020-11-25 12:52:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB
[2020-11-25 12:52:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB
[2020-11-25 12:52:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB
[2020-11-25 12:52:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB
[2020-11-25 12:52:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB
[2020-11-25 12:52:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB
[2020-11-25 12:52:14,519 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB
[2020-11-25 12:52:14,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB
[2020-11-25 12:52:14,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB
[2020-11-25 12:52:14,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSBInterface
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CSBInterface
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSB
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:52:14,520 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__success
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__success
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:52:14,521 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__success
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__fail
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__success
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__success
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__fail
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__success
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__fail
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__success
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__fail
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__success
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__fail
[2020-11-25 12:52:14,522 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__success
[2020-11-25 12:52:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__fail
[2020-11-25 12:52:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__success
[2020-11-25 12:52:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__fail
[2020-11-25 12:52:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:52:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:52:14,523 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:52:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:52:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:52:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:52:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:52:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:52:14,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__success
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__fail
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__success
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__fail
[2020-11-25 12:52:14,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__success
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__success
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__fail
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__success
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__fail
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__success
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__fail
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__success
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__fail
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__success
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__fail
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__success
[2020-11-25 12:52:14,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__fail
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__success
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSBInterface
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CSBInterface
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSB
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:52:14,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:52:14,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:52:14,662 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:52:14,753 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:52:14,753 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:52:14,754 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:52:14,978 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:52:14,979 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 12:52:14,980 INFO  L202        PluginConnector]: Adding new model CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:52:14 BoogieIcfgContainer
[2020-11-25 12:52:14,980 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:52:14" (2/2) ...
[2020-11-25 12:52:14,980 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:52:14,981 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1ea733d1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:52:14, skipping insertion in model container
[2020-11-25 12:52:14,981 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:52:14,981 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:52:14,981 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:52:14,982 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:52:14,983 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/3) ...
[2020-11-25 12:52:14,983 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4a4ed5da and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:52:14, skipping insertion in model container
[2020-11-25 12:52:14,983 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:52:14" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:52:15,020 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:52:15 NWAContainer
[2020-11-25 12:52:15,020 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:52:15,020 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:52:15,021 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:52:15,021 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:52:15,022 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:52:14" (3/4) ...
[2020-11-25 12:52:15,023 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@db05159 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:52:15, skipping insertion in model container
[2020-11-25 12:52:15,023 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:52:15" (4/4) ...
[2020-11-25 12:52:15,026 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:52:15,029 INFO  L110   BuchiProductObserver]: Initial RCFG 793 locations, 955 edges
[2020-11-25 12:52:15,029 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:52:15,038 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:52:16,027 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:52:16,030 INFO  L110   BuchiProductObserver]: BuchiProgram size 1834 locations, 3067 edges
[2020-11-25 12:52:16,030 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:52:16 BoogieIcfgContainer
[2020-11-25 12:52:16,030 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:52:16,031 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:52:16,031 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:52:16,033 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:52:16,033 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:52:16" (1/1) ...
[2020-11-25 12:52:16,085 INFO  L313           BlockEncoder]: Initial Icfg 1834 locations, 3067 edges
[2020-11-25 12:52:16,085 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:52:16,085 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:52:16,086 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:52:16,086 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:52:16,093 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 12:52:16,097 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 12:52:16,103 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:52:16,105 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:52:16,106 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:52:16,106 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:52:16,109 INFO  L313           BlockEncoder]: Encoded RCFG 1816 locations, 3024 edges
[2020-11-25 12:52:16,109 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:52:16 BasicIcfg
[2020-11-25 12:52:16,109 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:52:16,109 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:52:16,109 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:52:16,111 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:52:16,111 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:52:16,112 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:52:14" (1/6) ...
[2020-11-25 12:52:16,113 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:52:16, skipping insertion in model container
[2020-11-25 12:52:16,113 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:52:16,113 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:52:14" (2/6) ...
[2020-11-25 12:52:16,114 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:52:16, skipping insertion in model container
[2020-11-25 12:52:16,114 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:52:16,114 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:52:14" (3/6) ...
[2020-11-25 12:52:16,114 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:52:16, skipping insertion in model container
[2020-11-25 12:52:16,114 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:52:16,114 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:52:15" (4/6) ...
[2020-11-25 12:52:16,114 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:52:16, skipping insertion in model container
[2020-11-25 12:52:16,114 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:52:16,114 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:52:16" (5/6) ...
[2020-11-25 12:52:16,114 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7576cae7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:52:16, skipping insertion in model container
[2020-11-25 12:52:16,114 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:52:16,114 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:52:16" (6/6) ...
[2020-11-25 12:52:16,115 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl_BEv2
[2020-11-25 12:52:16,143 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:52:16,143 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:52:16,143 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:52:16,143 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:52:16,143 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:52:16,143 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:52:16,143 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:52:16,143 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:52:16,143 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:52:16,165 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1816 states.
[2020-11-25 12:52:16,202 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:52:16,202 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:16,203 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:16,216 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:16,216 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:16,216 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:52:16,216 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1816 states.
[2020-11-25 12:52:16,229 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:52:16,229 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:16,229 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:16,231 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:16,231 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND TRUE   revert
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND TRUE   choice == 11
[L2123]              gas := gas - 21000;
[L2124]  COND FALSE  !(gas >= 0)
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:52:16,249 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:16,249 INFO  L82        PathProgramCache]: Analyzing trace with hash 1483380177, now seen corresponding path program 1 times
[2020-11-25 12:52:16,254 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:16,273 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:52:16,310 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:52:16,312 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:52:16,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:52:16,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:52:16,432 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:52:16,432 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:52:16,434 INFO  L87              Difference]: Start difference. First operand 1816 states. Second operand 3 states.
[2020-11-25 12:52:16,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:52:16,559 INFO  L93              Difference]: Finished difference Result 1325 states and 1416 transitions.
[2020-11-25 12:52:16,562 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:52:16,563 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1325 states and 1416 transitions.
[2020-11-25 12:52:16,578 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:52:16,590 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1325 states to 1325 states and 1416 transitions.
[2020-11-25 12:52:16,591 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 12:52:16,593 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 594
[2020-11-25 12:52:16,594 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1325 states and 1416 transitions.
[2020-11-25 12:52:16,599 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:52:16,599 INFO  L728         BuchiCegarLoop]: Abstraction has 1325 states and 1416 transitions.
[2020-11-25 12:52:16,615 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1325 states and 1416 transitions.
[2020-11-25 12:52:16,645 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1325 to 1325.
[2020-11-25 12:52:16,645 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1325 states.
[2020-11-25 12:52:16,649 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1325 states to 1325 states and 1416 transitions.
[2020-11-25 12:52:16,650 INFO  L751         BuchiCegarLoop]: Abstraction has 1325 states and 1416 transitions.
[2020-11-25 12:52:16,650 INFO  L631         BuchiCegarLoop]: Abstraction has 1325 states and 1416 transitions.
[2020-11-25 12:52:16,650 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:52:16,650 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1325 states and 1416 transitions.
[2020-11-25 12:52:16,655 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:52:16,656 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:16,656 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:16,658 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:16,658 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND TRUE   revert
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND TRUE   !(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1245]              revert := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND TRUE   !(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1245]              revert := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:52:16,663 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:16,663 INFO  L82        PathProgramCache]: Analyzing trace with hash -1745444392, now seen corresponding path program 1 times
[2020-11-25 12:52:16,664 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:16,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:52:16,698 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:52:16,698 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:52:16,698 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:52:16,700 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:52:16,700 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:52:16,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:52:16,700 INFO  L87              Difference]: Start difference. First operand 1325 states and 1416 transitions. cyclomatic complexity: 93 Second operand 4 states.
[2020-11-25 12:52:16,882 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:52:16,882 INFO  L93              Difference]: Finished difference Result 1923 states and 2176 transitions.
[2020-11-25 12:52:16,882 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:52:16,883 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1923 states and 2176 transitions.
[2020-11-25 12:52:16,894 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 12:52:16,906 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1923 states to 1903 states and 2156 transitions.
[2020-11-25 12:52:16,906 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 883
[2020-11-25 12:52:16,907 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 883
[2020-11-25 12:52:16,907 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1903 states and 2156 transitions.
[2020-11-25 12:52:16,911 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:52:16,911 INFO  L728         BuchiCegarLoop]: Abstraction has 1903 states and 2156 transitions.
[2020-11-25 12:52:16,913 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1903 states and 2156 transitions.
[2020-11-25 12:52:16,934 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1903 to 1321.
[2020-11-25 12:52:16,934 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1321 states.
[2020-11-25 12:52:16,937 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1321 states to 1321 states and 1402 transitions.
[2020-11-25 12:52:16,937 INFO  L751         BuchiCegarLoop]: Abstraction has 1321 states and 1402 transitions.
[2020-11-25 12:52:16,937 INFO  L631         BuchiCegarLoop]: Abstraction has 1321 states and 1402 transitions.
[2020-11-25 12:52:16,937 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:52:16,937 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1321 states and 1402 transitions.
[2020-11-25 12:52:16,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:52:16,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:16,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:16,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:16,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:52:16,947 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:16,948 INFO  L82        PathProgramCache]: Analyzing trace with hash 686168408, now seen corresponding path program 1 times
[2020-11-25 12:52:16,948 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:16,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:52:17,096 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:52:17,096 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:52:17,096 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 12:52:17,097 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:52:17,097 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 12:52:17,097 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-11-25 12:52:17,097 INFO  L87              Difference]: Start difference. First operand 1321 states and 1402 transitions. cyclomatic complexity: 83 Second operand 13 states.
[2020-11-25 12:52:18,008 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:52:18,008 INFO  L93              Difference]: Finished difference Result 1381 states and 1482 transitions.
[2020-11-25 12:52:18,008 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 12:52:18,008 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1381 states and 1482 transitions.
[2020-11-25 12:52:18,013 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:52:18,017 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1381 states to 1381 states and 1482 transitions.
[2020-11-25 12:52:18,018 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 619
[2020-11-25 12:52:18,018 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 619
[2020-11-25 12:52:18,019 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1381 states and 1482 transitions.
[2020-11-25 12:52:18,020 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:52:18,020 INFO  L728         BuchiCegarLoop]: Abstraction has 1381 states and 1482 transitions.
[2020-11-25 12:52:18,021 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1381 states and 1482 transitions.
[2020-11-25 12:52:18,033 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1381 to 1377.
[2020-11-25 12:52:18,033 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1377 states.
[2020-11-25 12:52:18,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1377 states to 1377 states and 1469 transitions.
[2020-11-25 12:52:18,036 INFO  L751         BuchiCegarLoop]: Abstraction has 1377 states and 1469 transitions.
[2020-11-25 12:52:18,036 INFO  L631         BuchiCegarLoop]: Abstraction has 1377 states and 1469 transitions.
[2020-11-25 12:52:18,036 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:52:18,036 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1377 states and 1469 transitions.
[2020-11-25 12:52:18,038 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:52:18,039 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:18,039 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:18,040 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:18,040 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1255]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1256]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1255]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1256]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:52:18,043 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:18,043 INFO  L82        PathProgramCache]: Analyzing trace with hash 565264170, now seen corresponding path program 1 times
[2020-11-25 12:52:18,044 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:18,091 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:52:18,933 WARN  L188               SmtUtils]: Spent 240.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 71
[2020-11-25 12:52:19,199 WARN  L188               SmtUtils]: Spent 169.00 ms on a formula simplification. DAG size of input: 138 DAG size of output: 69
[2020-11-25 12:52:19,392 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 58
[2020-11-25 12:52:19,678 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 78
[2020-11-25 12:52:19,966 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 76
[2020-11-25 12:52:20,166 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 130 DAG size of output: 80
[2020-11-25 12:52:20,406 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 83
[2020-11-25 12:52:20,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:52:20,671 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:52:20,671 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 12:52:20,671 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:52:20,671 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 12:52:20,672 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=587, Unknown=0, NotChecked=0, Total=650
[2020-11-25 12:52:20,672 INFO  L87              Difference]: Start difference. First operand 1377 states and 1469 transitions. cyclomatic complexity: 96 Second operand 26 states.
[2020-11-25 12:52:23,421 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 76
[2020-11-25 12:52:23,808 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification. DAG size of input: 110 DAG size of output: 73
[2020-11-25 12:52:24,247 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification. DAG size of input: 109 DAG size of output: 64
[2020-11-25 12:52:25,400 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 106 DAG size of output: 82
[2020-11-25 12:52:29,926 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:52:29,927 INFO  L93              Difference]: Finished difference Result 1515 states and 1658 transitions.
[2020-11-25 12:52:29,927 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 12:52:29,927 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1515 states and 1658 transitions.
[2020-11-25 12:52:29,931 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 12:52:29,937 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1515 states to 1515 states and 1658 transitions.
[2020-11-25 12:52:29,937 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-11-25 12:52:29,937 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 681
[2020-11-25 12:52:29,937 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1515 states and 1658 transitions.
[2020-11-25 12:52:29,939 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:52:29,939 INFO  L728         BuchiCegarLoop]: Abstraction has 1515 states and 1658 transitions.
[2020-11-25 12:52:29,961 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1515 states and 1658 transitions.
[2020-11-25 12:52:29,974 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1515 to 1457.
[2020-11-25 12:52:29,974 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1457 states.
[2020-11-25 12:52:29,976 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1457 states to 1457 states and 1568 transitions.
[2020-11-25 12:52:29,976 INFO  L751         BuchiCegarLoop]: Abstraction has 1457 states and 1568 transitions.
[2020-11-25 12:52:29,976 INFO  L631         BuchiCegarLoop]: Abstraction has 1457 states and 1568 transitions.
[2020-11-25 12:52:29,976 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:52:29,976 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1457 states and 1568 transitions.
[2020-11-25 12:52:29,979 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:52:29,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:29,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:29,980 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:29,980 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND TRUE   !(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1222]              revert := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND TRUE   !(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1222]              revert := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:52:29,988 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:29,988 INFO  L82        PathProgramCache]: Analyzing trace with hash -954653555, now seen corresponding path program 1 times
[2020-11-25 12:52:29,988 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:29,995 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:52:30,056 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:52:30,056 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:52:30,056 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 12:52:30,056 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:52:30,056 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 12:52:30,056 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-25 12:52:30,057 INFO  L87              Difference]: Start difference. First operand 1457 states and 1568 transitions. cyclomatic complexity: 117 Second operand 15 states.
[2020-11-25 12:52:30,996 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:52:30,996 INFO  L93              Difference]: Finished difference Result 1566 states and 1736 transitions.
[2020-11-25 12:52:30,996 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 12:52:30,996 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1566 states and 1736 transitions.
[2020-11-25 12:52:31,001 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 12:52:31,005 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1566 states to 1566 states and 1736 transitions.
[2020-11-25 12:52:31,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 715
[2020-11-25 12:52:31,005 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 715
[2020-11-25 12:52:31,005 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1566 states and 1736 transitions.
[2020-11-25 12:52:31,007 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:52:31,007 INFO  L728         BuchiCegarLoop]: Abstraction has 1566 states and 1736 transitions.
[2020-11-25 12:52:31,008 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1566 states and 1736 transitions.
[2020-11-25 12:52:31,021 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1566 to 1510.
[2020-11-25 12:52:31,021 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1510 states.
[2020-11-25 12:52:31,023 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1510 states to 1510 states and 1626 transitions.
[2020-11-25 12:52:31,023 INFO  L751         BuchiCegarLoop]: Abstraction has 1510 states and 1626 transitions.
[2020-11-25 12:52:31,023 INFO  L631         BuchiCegarLoop]: Abstraction has 1510 states and 1626 transitions.
[2020-11-25 12:52:31,023 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:52:31,023 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1510 states and 1626 transitions.
[2020-11-25 12:52:31,026 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:52:31,026 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:31,026 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:31,027 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:31,027 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND FALSE  !(!(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1225]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_to_s239];
[L1226]              __tmp__balances_CSB[this][_to_s239] := (__tmp__balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1227]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_to_s239];
[L1228]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_from_s239];
[L1229]              __tmp__balances_CSB[this][_from_s239] := (__tmp__balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_from_s239];
[L1231]  COND FALSE  !(allowance_s239 < __tmp__MAX_UINT256_CSB[this])
[L1236]              success_s239 := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND FALSE  !(!(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1225]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_to_s239];
[L1226]              __tmp__balances_CSB[this][_to_s239] := (__tmp__balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1227]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_to_s239];
[L1228]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_from_s239];
[L1229]              __tmp__balances_CSB[this][_from_s239] := (__tmp__balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_from_s239];
[L1231]  COND FALSE  !(allowance_s239 < __tmp__MAX_UINT256_CSB[this])
[L1236]              success_s239 := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:52:31,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:31,029 INFO  L82        PathProgramCache]: Analyzing trace with hash -1357875195, now seen corresponding path program 1 times
[2020-11-25 12:52:31,030 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:31,036 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:52:31,055 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:52:31,056 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:52:31,056 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:52:31,056 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:52:31,056 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:52:31,056 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:52:31,056 INFO  L87              Difference]: Start difference. First operand 1510 states and 1626 transitions. cyclomatic complexity: 122 Second operand 6 states.
[2020-11-25 12:52:31,231 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:52:31,231 INFO  L93              Difference]: Finished difference Result 1930 states and 2195 transitions.
[2020-11-25 12:52:31,231 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 12:52:31,231 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1930 states and 2195 transitions.
[2020-11-25 12:52:31,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:52:31,242 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1930 states to 1354 states and 1616 transitions.
[2020-11-25 12:52:31,242 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 636
[2020-11-25 12:52:31,242 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 636
[2020-11-25 12:52:31,242 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1354 states and 1616 transitions.
[2020-11-25 12:52:31,244 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:52:31,244 INFO  L728         BuchiCegarLoop]: Abstraction has 1354 states and 1616 transitions.
[2020-11-25 12:52:31,244 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1354 states and 1616 transitions.
[2020-11-25 12:52:31,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1354 to 887.
[2020-11-25 12:52:31,255 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 887 states.
[2020-11-25 12:52:31,256 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 887 states to 887 states and 963 transitions.
[2020-11-25 12:52:31,256 INFO  L751         BuchiCegarLoop]: Abstraction has 887 states and 963 transitions.
[2020-11-25 12:52:31,256 INFO  L631         BuchiCegarLoop]: Abstraction has 887 states and 963 transitions.
[2020-11-25 12:52:31,256 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:52:31,256 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 887 states and 963 transitions.
[2020-11-25 12:52:31,258 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:52:31,258 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:52:31,258 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:52:31,259 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:52:31,259 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND FALSE  !(choice == 8)
[L2148]  COND TRUE   choice == 7
[L2149]              gas := gas - 21000;
[L2150]  COND TRUE   gas >= 0
[L2151]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2152]              assume msgvalue_MSG == 0;
[L2153]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L420]               havoc __exception;
[L421]               revert := false;
[L422]   COND FALSE  !(__exception)
[L444]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1287]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1288]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1289]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1290]              assert { :EventEmitted "Approval_CSB" } true;
[L1291]              success_s279 := true;
[L444]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L445]               assume !revert && gas >= 0;
[L2153]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2213]  RET         call CorralChoice_CSB(this);
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s239 && p1 != _to_s239) && (p2 != _from_s239 || p3 != msgsender_MSG)) && _from_s239 != _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && balances_CSB[this][_to_s239] + _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s239 == true && balances_CSB[this][_from_s239] == old(balances_CSB[this][_from_s239]) - _value_s239) && balances_CSB[this][_to_s239] == old(balances_CSB[this][_to_s239]) + _value_s239) && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this][p1] == old(balances_CSB[this][p1])) && allowed_CSB[this][p2][p3] == old(allowed_CSB[this][p2][p3])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:52:31,262 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:31,262 INFO  L82        PathProgramCache]: Analyzing trace with hash 30577816, now seen corresponding path program 1 times
[2020-11-25 12:52:31,262 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:31,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:52:31,309 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:52:31,369 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:31,369 INFO  L82        PathProgramCache]: Analyzing trace with hash -558955755, now seen corresponding path program 1 times
[2020-11-25 12:52:31,369 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:31,379 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:52:31,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:52:31,400 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:52:31,400 INFO  L82        PathProgramCache]: Analyzing trace with hash -86233506, now seen corresponding path program 1 times
[2020-11-25 12:52:31,401 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:52:31,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:52:31,546 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 12:52:31,829 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 81
[2020-11-25 12:52:32,012 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 170
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2473 to 4943
Garbage collection #8: 4943 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 4943 to 9883
[2020-11-25 12:52:32,786 WARN  L188               SmtUtils]: Spent 710.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 122
[2020-11-25 12:52:33,258 WARN  L188               SmtUtils]: Spent 470.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 232
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
[2020-11-25 12:52:33,670 WARN  L188               SmtUtils]: Spent 407.00 ms on a formula simplification. DAG size of input: 214 DAG size of output: 214
[2020-11-25 12:52:34,197 WARN  L188               SmtUtils]: Spent 525.00 ms on a formula simplification. DAG size of input: 260 DAG size of output: 247
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
[2020-11-25 12:52:34,486 WARN  L188               SmtUtils]: Spent 276.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 167
[2020-11-25 12:52:34,730 WARN  L188               SmtUtils]: Spent 242.00 ms on a formula simplification that was a NOOP. DAG size: 290
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 12:52:35,170 WARN  L188               SmtUtils]: Spent 433.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 231
[2020-11-25 12:52:35,351 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification that was a NOOP. DAG size: 231
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 12:52:35,724 WARN  L188               SmtUtils]: Spent 364.00 ms on a formula simplification. DAG size of input: 183 DAG size of output: 172
[2020-11-25 12:52:35,759 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 12:52:36,443 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 170
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #8: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 12:52:37,116 WARN  L188               SmtUtils]: Spent 653.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 122
[2020-11-25 12:52:37,654 WARN  L188               SmtUtils]: Spent 537.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 232
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
[2020-11-25 12:52:38,038 WARN  L188               SmtUtils]: Spent 382.00 ms on a formula simplification. DAG size of input: 214 DAG size of output: 214
[2020-11-25 12:52:38,529 WARN  L188               SmtUtils]: Spent 489.00 ms on a formula simplification. DAG size of input: 259 DAG size of output: 247
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 12:52:38,821 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 170
[2020-11-25 12:52:39,037 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-25 12:52:39,517 WARN  L188               SmtUtils]: Spent 472.00 ms on a formula simplification. DAG size of input: 239 DAG size of output: 231
[2020-11-25 12:52:42,400 WARN  L188               SmtUtils]: Spent 2.88 s on a formula simplification. DAG size of input: 569 DAG size of output: 561
Garbage collection #1: 227 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 227 to 449
Garbage collection #2: 449 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 449 to 887
Garbage collection #3: 887 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 887 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 12:52:43,873 WARN  L188               SmtUtils]: Spent 1.44 s on a formula simplification. DAG size of input: 248 DAG size of output: 239
[2020-11-25 12:52:44,487 WARN  L188               SmtUtils]: Spent 601.00 ms on a formula simplification that was a NOOP. DAG size: 322
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #8: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
[2020-11-25 12:52:51,019 WARN  L188               SmtUtils]: Spent 6.49 s on a formula simplification. DAG size of input: 366 DAG size of output: 261
[2020-11-25 12:52:54,779 WARN  L188               SmtUtils]: Spent 3.76 s on a formula simplification. DAG size of input: 346 DAG size of output: 345
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31699 to 63397
Garbage collection #10: 63397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 63397 to 113383
[2020-11-25 12:53:17,955 WARN  L188               SmtUtils]: Spent 23.12 s on a formula simplification. DAG size of input: 470 DAG size of output: 342
[2020-11-25 12:53:18,067 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:18,083 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-25 12:53:18,083 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-25 12:53:18,083 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-25 12:53:18,083 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-25 12:53:18,084 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-25 12:53:18,084 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-25 12:53:18,084 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-25 12:53:18,084 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-25 12:53:18,084 INFO  L131   ssoRankerPreferences]: Filename of dumped script: CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-normal.bpl_BEv2_Iteration7_Lasso
[2020-11-25 12:53:18,084 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-25 12:53:18,084 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 12:53:18,559 INFO  L141          MapEliminator]: Using MapEliminator with SimplificationTechnique=SIMPLIFY_DDA XnfConversionTechnique=BDD_BASED AddInequalities=false OnlyTrivialImplicationsArrayWrite=false OnlyTrivialImplicationsForModifiedArguments=true OnlyArgumentsInFormula=true
[2020-11-25 12:53:18,598 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: Only formulae in NNF are supported
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.MapEliminationLassoPreprocessor.process(MapEliminationLassoPreprocessor.java:109)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 12:53:18,599 INFO  L168              Benchmark]: Toolchain (without parser) took 64295.38 ms. Allocated memory was 1.0 GB in the beginning and 3.3 GB in the end (delta: 2.3 GB). Free memory was 940.6 MB in the beginning and 1.9 GB in the end (delta: -995.0 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,599 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,600 INFO  L168              Benchmark]: Boogie Preprocessor took 86.77 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,600 INFO  L168              Benchmark]: UtopiaSpecLang took 58.18 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,600 INFO  L168              Benchmark]: Boogie Printer took 11.45 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,601 INFO  L168              Benchmark]: RCFGBuilder took 518.99 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 870.7 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,601 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.48 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 861.8 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,601 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1010.00 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 861.8 MB in the beginning and 874.1 MB in the end (delta: -12.3 MB). Peak memory consumption was 145.9 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,601 INFO  L168              Benchmark]: BlockEncodingV2 took 78.27 ms. Allocated memory is still 1.1 GB. Free memory was 874.1 MB in the beginning and 842.9 MB in the end (delta: 31.2 MB). Peak memory consumption was 31.2 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,602 INFO  L168              Benchmark]: BuchiAutomizer took 62489.37 ms. Allocated memory was 1.1 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 842.9 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 12:53:18,604 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1834 locations, 3067 edges
  - StatisticsResult: Encoded RCFG
    1816 locations, 3024 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 86.77 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.18 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 11.45 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 518.99 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 870.7 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.48 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 861.8 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1010.00 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 861.8 MB in the beginning and 874.1 MB in the end (delta: -12.3 MB). Peak memory consumption was 145.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 78.27 ms. Allocated memory is still 1.1 GB. Free memory was 874.1 MB in the beginning and 842.9 MB in the end (delta: 31.2 MB). Peak memory consumption was 31.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 62489.37 ms. Allocated memory was 1.1 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 842.9 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    793 locations, 955 edges
  - StatisticsResult: BuchiProgram size
    1834 locations, 3067 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: Only formulae in NNF are supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: Only formulae in NNF are supported: de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
