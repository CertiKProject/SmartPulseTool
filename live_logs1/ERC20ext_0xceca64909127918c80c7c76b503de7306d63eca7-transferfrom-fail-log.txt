This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:09:18,914 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:09:18,915 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:09:18,926 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:09:18,926 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:09:18,927 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:09:18,928 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:09:18,929 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:09:18,931 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:09:18,931 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:09:18,932 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:09:18,932 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:09:18,933 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:09:18,934 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:09:18,935 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:09:18,935 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:09:18,936 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:09:18,937 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:09:18,938 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:09:18,940 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:09:18,941 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:09:18,941 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:09:18,943 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:09:18,943 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:09:18,943 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:09:18,944 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:09:18,944 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:09:18,945 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:09:18,945 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:09:18,945 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:09:18,946 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:09:18,946 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:09:18,947 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:09:18,948 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:09:18,948 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:09:18,948 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:09:18,949 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:09:18,949 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:09:18,949 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:09:18,950 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:09:18,950 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:09:18,951 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:09:18,959 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:09:18,959 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:09:18,960 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:09:18,960 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:09:18,960 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:09:18,961 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:09:18,961 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:09:18,961 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:09:18,961 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:09:18,961 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:09:18,961 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:09:18,961 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:09:18,961 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:09:18,962 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:09:18,962 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:09:18,962 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:09:18,962 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:09:18,962 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:09:18,962 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:09:18,962 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:09:18,962 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:09:18,963 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:09:18,963 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:09:18,963 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:09:18,963 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:09:18,963 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:09:18,986 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:09:18,997 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:09:18,999 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:09:19,000 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:09:19,001 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:09:19,001 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl
[2020-11-25 15:09:19,001 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl'
[2020-11-25 15:09:19,086 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:09:19,087 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:09:19,087 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:09:19,087 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:09:19,087 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:09:19,104 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,105 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,135 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,136 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,156 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,166 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,175 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,185 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:09:19,186 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:09:19,186 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:09:19,188 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:09:19,191 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/1) ...
[2020-11-25 15:09:19,209 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:19,214 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:19,221 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:19,228 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s413!=_to_s413 && ( ( _value_s413>balanceOf_TokenERC20[this][_from_s413] || _value_s413>allowance_TokenERC20[this][_from_s413][msg.sender] ) || ( balanceOf_TokenERC20[this][_to_s413] + _value_s413 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s413>=0 ) && _value_s413<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s413]>=0 ) && balanceOf_TokenERC20[this][_to_s413]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_from_s413]>=0 ) && balanceOf_TokenERC20[this][_from_s413]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_TokenERC20[this][_from_s413][msg.sender]>=0 ) && allowance_TokenERC20[this][_from_s413][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[_to_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s413,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:09:19,234 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 15:09:19,234 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(fail_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:09:19,244 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:19 PropertyContainer
[2020-11-25 15:09:19,244 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:09:19,244 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:09:19,244 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:09:19,244 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:09:19,245 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/2) ...
[2020-11-25 15:09:19,246 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:09:19,246 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:09:19,261 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:19" (2/2) ...
[2020-11-25 15:09:19,261 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:09:19,261 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:09:19,261 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:09:19,262 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:09:19,262 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/2) ...
[2020-11-25 15:09:19,314 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:09:19,314 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:09:19,314 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:09:19,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 15:09:19,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 15:09:19,315 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 15:09:19,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 15:09:19,316 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 15:09:19,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 15:09:19,316 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:09:19,316 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:09:19,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:09:19,317 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 15:09:19,317 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:09:19,317 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 15:09:19,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 15:09:19,317 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,317 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:09:19,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:09:19,317 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:09:19,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:09:19,317 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:09:19,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:09:19,318 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:09:19,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:09:19,318 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 15:09:19,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 15:09:19,318 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:09:19,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:09:19,318 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 15:09:19,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 15:09:19,318 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 15:09:19,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 15:09:19,319 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 15:09:19,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 15:09:19,319 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 15:09:19,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 15:09:19,319 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 15:09:19,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 15:09:19,319 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 15:09:19,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 15:09:19,319 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:09:19,319 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext
[2020-11-25 15:09:19,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext
[2020-11-25 15:09:19,320 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:09:19,320 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:09:19,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:09:19,320 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:09:19,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:09:19,320 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:09:19,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:09:19,320 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:09:19,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:09:19,320 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:09:19,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:09:19,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 15:09:19,321 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20ext
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:09:19,322 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 15:09:19,323 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:09:19,324 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 15:09:19,325 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:09:19,326 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:09:19,327 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:09:19,328 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:09:19,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:09:19,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:09:19,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:09:19,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:09:19,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:09:19,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:09:19,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:09:19,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:09:19,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 15:09:19,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:09:19,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:09:19,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 15:09:19,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 15:09:19,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 15:09:19,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 15:09:19,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 15:09:19,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 15:09:19,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20ext
[2020-11-25 15:09:19,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:09:19,336 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:09:19,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:09:19,709 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:09:19,709 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:09:20,031 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:09:20,032 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 15:09:20,033 INFO  L202        PluginConnector]: Adding new model ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:20 BoogieIcfgContainer
[2020-11-25 15:09:20,034 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:19" (2/2) ...
[2020-11-25 15:09:20,034 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:09:20,034 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2198f3c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:20, skipping insertion in model container
[2020-11-25 15:09:20,034 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:09:20,034 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:09:20,034 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:09:20,036 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:09:20,036 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/3) ...
[2020-11-25 15:09:20,036 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4df68bb3 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:20, skipping insertion in model container
[2020-11-25 15:09:20,036 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:19" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:09:20,074 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:20 NWAContainer
[2020-11-25 15:09:20,074 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:09:20,074 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:09:20,074 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:09:20,075 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:09:20,076 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:20" (3/4) ...
[2020-11-25 15:09:20,076 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6d226f44 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:20, skipping insertion in model container
[2020-11-25 15:09:20,076 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:20" (4/4) ...
[2020-11-25 15:09:20,079 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:09:20,083 INFO  L110   BuchiProductObserver]: Initial RCFG 1880 locations, 2416 edges
[2020-11-25 15:09:20,083 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:09:20,094 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:09:21,542 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:09:21,548 INFO  L110   BuchiProductObserver]: BuchiProgram size 4502 locations, 7818 edges
[2020-11-25 15:09:21,548 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:21 BoogieIcfgContainer
[2020-11-25 15:09:21,548 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:09:21,548 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:09:21,548 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:09:21,550 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:09:21,551 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:21" (1/1) ...
[2020-11-25 15:09:21,642 INFO  L313           BlockEncoder]: Initial Icfg 4502 locations, 7818 edges
[2020-11-25 15:09:21,643 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:09:21,643 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:09:21,643 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:09:21,644 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:09:21,656 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 13 locations because of local infeasibility
[2020-11-25 15:09:21,667 INFO  L70        RemoveSinkStates]: Removed 74 edges and 40 locations by removing sink states
[2020-11-25 15:09:21,680 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:09:21,692 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:09:21,699 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:09:21,700 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:09:21,707 INFO  L313           BlockEncoder]: Encoded RCFG 4425 locations, 7634 edges
[2020-11-25 15:09:21,707 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:09:21 BasicIcfg
[2020-11-25 15:09:21,707 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:09:21,708 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:09:21,708 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:09:21,710 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:09:21,710 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:21,710 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:09:19" (1/6) ...
[2020-11-25 15:09:21,712 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55083512 and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:09:21, skipping insertion in model container
[2020-11-25 15:09:21,712 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:21,712 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:09:19" (2/6) ...
[2020-11-25 15:09:21,712 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55083512 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:09:21, skipping insertion in model container
[2020-11-25 15:09:21,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:21,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:09:20" (3/6) ...
[2020-11-25 15:09:21,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55083512 and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:09:21, skipping insertion in model container
[2020-11-25 15:09:21,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:21,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:09:20" (4/6) ...
[2020-11-25 15:09:21,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55083512 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:09:21, skipping insertion in model container
[2020-11-25 15:09:21,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:21,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:09:21" (5/6) ...
[2020-11-25 15:09:21,714 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55083512 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:09:21, skipping insertion in model container
[2020-11-25 15:09:21,714 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:09:21,714 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:09:21" (6/6) ...
[2020-11-25 15:09:21,715 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transferfrom-fail.bpl_BEv2
[2020-11-25 15:09:21,754 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:09:21,754 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:09:21,755 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:09:21,755 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:09:21,755 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:09:21,755 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:09:21,755 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:09:21,755 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:09:21,755 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:09:21,802 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4425 states.
[2020-11-25 15:09:21,867 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:21,867 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:21,868 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:21,877 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:21,878 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:21,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:09:21,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4425 states.
[2020-11-25 15:09:21,909 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:21,909 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:21,909 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:21,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:21,911 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND TRUE   revert
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:21,925 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:21,925 INFO  L82        PathProgramCache]: Analyzing trace with hash -325387832, now seen corresponding path program 1 times
[2020-11-25 15:09:21,929 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:21,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:21,990 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:09:21,991 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:21,992 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:09:22,259 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:22,268 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:09:22,269 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:09:22,270 INFO  L87              Difference]: Start difference. First operand 4425 states. Second operand 4 states.
[2020-11-25 15:09:22,723 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:22,723 INFO  L93              Difference]: Finished difference Result 3119 states and 3484 transitions.
[2020-11-25 15:09:22,723 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:09:22,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3119 states and 3484 transitions.
[2020-11-25 15:09:22,743 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:22,766 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3119 states to 3117 states and 3480 transitions.
[2020-11-25 15:09:22,767 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 15:09:22,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 870
[2020-11-25 15:09:22,770 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3117 states and 3480 transitions.
[2020-11-25 15:09:22,777 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:22,777 INFO  L728         BuchiCegarLoop]: Abstraction has 3117 states and 3480 transitions.
[2020-11-25 15:09:22,796 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3117 states and 3480 transitions.
[2020-11-25 15:09:22,847 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3117 to 3117.
[2020-11-25 15:09:22,848 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3117 states.
[2020-11-25 15:09:22,854 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3117 states to 3117 states and 3480 transitions.
[2020-11-25 15:09:22,854 INFO  L751         BuchiCegarLoop]: Abstraction has 3117 states and 3480 transitions.
[2020-11-25 15:09:22,855 INFO  L631         BuchiCegarLoop]: Abstraction has 3117 states and 3480 transitions.
[2020-11-25 15:09:22,855 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:09:22,855 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3117 states and 3480 transitions.
[2020-11-25 15:09:22,861 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:22,862 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:22,862 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:22,864 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:22,864 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND TRUE   revert
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND TRUE   !(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG])
[L2905]              revert := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND TRUE   !(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG])
[L2905]              revert := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:22,868 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:22,868 INFO  L82        PathProgramCache]: Analyzing trace with hash 673881428, now seen corresponding path program 1 times
[2020-11-25 15:09:22,869 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:22,877 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:22,899 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:09:22,899 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:22,900 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:09:22,901 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:22,901 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:09:22,901 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:09:22,901 INFO  L87              Difference]: Start difference. First operand 3117 states and 3480 transitions. cyclomatic complexity: 365 Second operand 4 states.
[2020-11-25 15:09:23,496 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:23,496 INFO  L93              Difference]: Finished difference Result 3970 states and 4421 transitions.
[2020-11-25 15:09:23,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:09:23,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3970 states and 4421 transitions.
[2020-11-25 15:09:23,510 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:09:23,522 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3970 states to 3774 states and 4179 transitions.
[2020-11-25 15:09:23,522 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1028
[2020-11-25 15:09:23,523 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1051
[2020-11-25 15:09:23,524 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3774 states and 4179 transitions.
[2020-11-25 15:09:23,529 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:23,529 INFO  L728         BuchiCegarLoop]: Abstraction has 3774 states and 4179 transitions.
[2020-11-25 15:09:23,533 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3774 states and 4179 transitions.
[2020-11-25 15:09:23,565 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3774 to 3366.
[2020-11-25 15:09:23,566 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3366 states.
[2020-11-25 15:09:23,569 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3366 states to 3366 states and 3672 transitions.
[2020-11-25 15:09:23,569 INFO  L751         BuchiCegarLoop]: Abstraction has 3366 states and 3672 transitions.
[2020-11-25 15:09:23,569 INFO  L631         BuchiCegarLoop]: Abstraction has 3366 states and 3672 transitions.
[2020-11-25 15:09:23,569 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:09:23,569 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3366 states and 3672 transitions.
[2020-11-25 15:09:23,575 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:09:23,575 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:23,575 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:23,578 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:23,578 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:23,582 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:23,582 INFO  L82        PathProgramCache]: Analyzing trace with hash 1714153884, now seen corresponding path program 1 times
[2020-11-25 15:09:23,583 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:23,606 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:23,797 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 15:09:23,797 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 15:09:23,797 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-25 15:09:23,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:23,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 15:09:23,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 15:09:23,798 INFO  L87              Difference]: Start difference. First operand 3366 states and 3672 transitions. cyclomatic complexity: 308 Second operand 14 states.
[2020-11-25 15:09:25,499 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:25,499 INFO  L93              Difference]: Finished difference Result 3460 states and 3778 transitions.
[2020-11-25 15:09:25,499 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 15:09:25,499 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3460 states and 3778 transitions.
[2020-11-25 15:09:25,507 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:09:25,517 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3460 states to 3460 states and 3778 transitions.
[2020-11-25 15:09:25,517 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1002
[2020-11-25 15:09:25,518 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1002
[2020-11-25 15:09:25,518 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3460 states and 3778 transitions.
[2020-11-25 15:09:25,521 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:25,521 INFO  L728         BuchiCegarLoop]: Abstraction has 3460 states and 3778 transitions.
[2020-11-25 15:09:25,524 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3460 states and 3778 transitions.
[2020-11-25 15:09:25,547 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3460 to 3228.
[2020-11-25 15:09:25,548 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3228 states.
[2020-11-25 15:09:25,551 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3228 states to 3228 states and 3497 transitions.
[2020-11-25 15:09:25,551 INFO  L751         BuchiCegarLoop]: Abstraction has 3228 states and 3497 transitions.
[2020-11-25 15:09:25,551 INFO  L631         BuchiCegarLoop]: Abstraction has 3228 states and 3497 transitions.
[2020-11-25 15:09:25,551 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:09:25,551 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3228 states and 3497 transitions.
[2020-11-25 15:09:25,555 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:25,556 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:25,556 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:25,557 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:25,557 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND TRUE   __exception
[L1363]              __tmp__Balance := Balance;
[L1364]              __tmp__DType := DType;
[L1365]              __tmp__Alloc := Alloc;
[L1366]              __tmp__balance_ADDR := balance_ADDR;
[L1367]              __tmp__M_Ref_int := M_Ref_int;
[L1368]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L1369]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L1370]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1371]              __tmp__sum_allowance1 := sum_allowance1;
[L1372]              __tmp__M_Ref_bool := M_Ref_bool;
[L1373]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1374]              __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L1375]              __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L1376]              __tmp__Length := Length;
[L1377]              __tmp__now := now;
[L1378]              __tmp__owner_owned := owner_owned;
[L1379]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1380]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1381]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1382]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L1383]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L1384]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L1385]              __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L1386]              __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L1387]              __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L1388]  CALL        call ERC20ext_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3231]  CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2616]  CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]              assume msgsender_MSG != null;
[L2598]              __tmp__Balance[this] := 0;
[L2599]              __tmp__owner_owned[this] := null;
[L2601]              __tmp__owner_owned[this] := msgsender_MSG;
[L2616]  RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2617]  COND FALSE  !(revert)
[L3231]  RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L3232]  COND FALSE  !(revert)
[L3235]  CALL        call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2743]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2696]              assume msgsender_MSG != null;
[L2697]              __tmp__Balance[this] := 0;
[L2698]              __tmp__name_TokenERC20[this] := 1101944712;
[L2699]              __tmp__symbol_TokenERC20[this] := 1101944712;
[L2700]              __tmp__decimals_TokenERC20[this] := 18;
[L2701]              __tmp__totalSupply_TokenERC20[this] := 0;
[L2702]              __tmp__balanceOf_TokenERC20[this] := zeroRefintArr();
[L2703]              __tmp__sum_balanceOf0[this] := 0;
[L2704]              __tmp__allowance_TokenERC20[this] := zeroRefRefintArr();
[L2705]              __tmp__sum_allowance1[this] := 0;
[L2707]              __var_1 := __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2708]              __tmp__totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2709]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2710]              __tmp__balanceOf_TokenERC20[this][msgsender_MSG] := __tmp__totalSupply_TokenERC20[this];
[L2711]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2712]              __tmp__name_TokenERC20[this] := tokenName_s258;
[L2713]              __tmp__symbol_TokenERC20[this] := tokenSymbol_s258;
[L2743]  RET         call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2744]  COND FALSE  !(revert)
[L3235]  RET         call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3236]  COND FALSE  !(revert)
[L3239]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3206]              assume msgsender_MSG != null;
[L3207]              __tmp__Balance[this] := 0;
[L3208]              __tmp__frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3209]              __tmp__lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3210]              __tmp__sum_lockedAccount3[this] := 0;
[L3211]              __tmp__lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3212]              __tmp__sum_lockedAmount4[this] := 0;
[L3239]  RET         call ERC20ext_ERC20ext_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3240]  COND FALSE  !(revert)
[L1388]  RET         call ERC20ext_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1389]              assume revert || gas < 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:25,560 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:25,560 INFO  L82        PathProgramCache]: Analyzing trace with hash 1926885472, now seen corresponding path program 1 times
[2020-11-25 15:09:25,561 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:25,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:25,610 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 15:09:25,611 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:25,611 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:09:25,611 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:25,611 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:09:25,611 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:09:25,611 INFO  L87              Difference]: Start difference. First operand 3228 states and 3497 transitions. cyclomatic complexity: 272 Second operand 4 states.
[2020-11-25 15:09:25,914 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:25,914 INFO  L93              Difference]: Finished difference Result 4051 states and 4526 transitions.
[2020-11-25 15:09:25,914 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:09:25,932 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4051 states and 4526 transitions.
[2020-11-25 15:09:25,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:09:25,963 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4051 states to 3958 states and 4433 transitions.
[2020-11-25 15:09:25,963 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1120
[2020-11-25 15:09:25,964 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1120
[2020-11-25 15:09:25,964 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3958 states and 4433 transitions.
[2020-11-25 15:09:25,970 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:25,970 INFO  L728         BuchiCegarLoop]: Abstraction has 3958 states and 4433 transitions.
[2020-11-25 15:09:25,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3958 states and 4433 transitions.
[2020-11-25 15:09:25,997 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3958 to 3135.
[2020-11-25 15:09:25,998 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3135 states.
[2020-11-25 15:09:26,000 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3135 states to 3135 states and 3403 transitions.
[2020-11-25 15:09:26,000 INFO  L751         BuchiCegarLoop]: Abstraction has 3135 states and 3403 transitions.
[2020-11-25 15:09:26,000 INFO  L631         BuchiCegarLoop]: Abstraction has 3135 states and 3403 transitions.
[2020-11-25 15:09:26,000 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:09:26,001 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3135 states and 3403 transitions.
[2020-11-25 15:09:26,004 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:26,004 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:26,004 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:26,005 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:26,005 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND FALSE  !(choice == 11)
[L5011]  COND TRUE   choice == 10
[L5012]              gas := gas - 21000;
[L5013]  COND TRUE   gas >= 0
[L5014]              assume _value_s441 >= 0 && _value_s441 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5015]              assume msgvalue_MSG == 0;
[L5016]  CALL        call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L696]   CALL        call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L2943]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2944]              allowance_TokenERC20[this][msgsender_MSG][_spender_s441] := _value_s441;
[L2945]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2946]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2947]              success_s441 := true;
[L696]   RET         call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L697]               assume !revert && gas >= 0;
[L5016]  RET         call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L5099]  RET         call CorralChoice_ERC20ext(this);
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:26,014 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:26,014 INFO  L82        PathProgramCache]: Analyzing trace with hash 387997253, now seen corresponding path program 1 times
[2020-11-25 15:09:26,014 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:26,033 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:26,307 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-11-25 15:09:26,307 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:26,307 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 15:09:26,308 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:26,308 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 15:09:26,308 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=451, Unknown=0, NotChecked=0, Total=506
[2020-11-25 15:09:26,308 INFO  L87              Difference]: Start difference. First operand 3135 states and 3403 transitions. cyclomatic complexity: 271 Second operand 23 states.
[2020-11-25 15:09:29,862 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:29,862 INFO  L93              Difference]: Finished difference Result 3241 states and 3529 transitions.
[2020-11-25 15:09:29,862 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 15:09:29,862 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3241 states and 3529 transitions.
[2020-11-25 15:09:29,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:29,875 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3241 states to 3241 states and 3529 transitions.
[2020-11-25 15:09:29,876 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 949
[2020-11-25 15:09:29,877 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 949
[2020-11-25 15:09:29,877 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3241 states and 3529 transitions.
[2020-11-25 15:09:29,879 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:29,879 INFO  L728         BuchiCegarLoop]: Abstraction has 3241 states and 3529 transitions.
[2020-11-25 15:09:29,882 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3241 states and 3529 transitions.
[2020-11-25 15:09:29,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3241 to 3175.
[2020-11-25 15:09:29,904 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3175 states.
[2020-11-25 15:09:29,908 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3175 states to 3175 states and 3459 transitions.
[2020-11-25 15:09:29,908 INFO  L751         BuchiCegarLoop]: Abstraction has 3175 states and 3459 transitions.
[2020-11-25 15:09:29,908 INFO  L631         BuchiCegarLoop]: Abstraction has 3175 states and 3459 transitions.
[2020-11-25 15:09:29,908 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:09:29,908 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3175 states and 3459 transitions.
[2020-11-25 15:09:29,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:29,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:29,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:29,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:29,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND FALSE  !(choice == 11)
[L5011]  COND TRUE   choice == 10
[L5012]              gas := gas - 21000;
[L5013]  COND TRUE   gas >= 0
[L5014]              assume _value_s441 >= 0 && _value_s441 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5015]              assume msgvalue_MSG == 0;
[L5016]  CALL        call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L696]   CALL        call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L2943]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2944]              allowance_TokenERC20[this][msgsender_MSG][_spender_s441] := _value_s441;
[L2945]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s441];
[L2946]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2947]              success_s441 := true;
[L696]   RET         call success_s441 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L697]               assume !revert && gas >= 0;
[L5016]  RET         call success_s441 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s441, _value_s441);
[L5099]  RET         call CorralChoice_ERC20ext(this);
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND FALSE  !(DType[this] == ERC20ext)
[L2920]  COND TRUE   DType[this] == TokenERC20
[L2921]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2800]              __var_2 := null;
[L2801]  COND FALSE  !(!(_to_s346 != null))
[L2805]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s346] >= _value_s346))
[L2809]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s346] + _value_s346) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s346]))
[L2813]              previousBalances_s346 := (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2814]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2814]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2815]  COND FALSE  !(revert)
[L2818]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s346];
[L2819]              balanceOf_TokenERC20[this][_from_s346] := __var_3;
[L2820]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s346];
[L2821]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L2821]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2822]  COND FALSE  !(revert)
[L2825]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s346];
[L2826]              balanceOf_TokenERC20[this][_to_s346] := __var_4;
[L2827]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s346];
[L2828]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2829]              assert (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s346;
[L2921]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2922]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:29,917 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:29,918 INFO  L82        PathProgramCache]: Analyzing trace with hash 1248283338, now seen corresponding path program 1 times
[2020-11-25 15:09:29,918 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:29,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:29,992 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 85 trivial. 0 not checked.
[2020-11-25 15:09:29,992 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:29,992 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 15:09:29,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:29,993 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 15:09:29,993 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 15:09:29,993 INFO  L87              Difference]: Start difference. First operand 3175 states and 3459 transitions. cyclomatic complexity: 289 Second operand 6 states.
[2020-11-25 15:09:30,085 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:30,085 INFO  L93              Difference]: Finished difference Result 3189 states and 3466 transitions.
[2020-11-25 15:09:30,085 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 15:09:30,086 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3189 states and 3466 transitions.
[2020-11-25 15:09:30,093 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:30,102 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3189 states to 3145 states and 3419 transitions.
[2020-11-25 15:09:30,102 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 910
[2020-11-25 15:09:30,103 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 910
[2020-11-25 15:09:30,103 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3145 states and 3419 transitions.
[2020-11-25 15:09:30,106 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:30,106 INFO  L728         BuchiCegarLoop]: Abstraction has 3145 states and 3419 transitions.
[2020-11-25 15:09:30,109 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3145 states and 3419 transitions.
[2020-11-25 15:09:30,135 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3145 to 3145.
[2020-11-25 15:09:30,135 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3145 states.
[2020-11-25 15:09:30,141 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3145 states to 3145 states and 3419 transitions.
[2020-11-25 15:09:30,141 INFO  L751         BuchiCegarLoop]: Abstraction has 3145 states and 3419 transitions.
[2020-11-25 15:09:30,141 INFO  L631         BuchiCegarLoop]: Abstraction has 3145 states and 3419 transitions.
[2020-11-25 15:09:30,141 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:09:30,141 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3145 states and 3419 transitions.
[2020-11-25 15:09:30,144 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:09:30,144 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:09:30,144 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:09:30,145 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:09:30,145 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND FALSE  !(choice == 11)
[L5011]  COND FALSE  !(choice == 10)
[L5018]  COND FALSE  !(choice == 9)
[L5025]  COND FALSE  !(choice == 8)
[L5032]  COND TRUE   choice == 7
[L5033]              gas := gas - 21000;
[L5034]  COND TRUE   gas >= 0
[L5035]              assume _value_s598 >= 0 && _value_s598 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5036]              assume msgvalue_MSG == 0;
[L5037]  CALL        call success_s598 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s598, _value_s598);
[L873]               havoc __exception;
[L874]               revert := false;
[L875]   COND FALSE  !(__exception)
[L904]   CALL        call success_s598 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s598, _value_s598);
[L3099]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s598] >= _value_s598))
[L3103]  COND FALSE  !(!(_value_s598 <= allowance_TokenERC20[this][_from_s598][msgsender_MSG]))
[L3107]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s598], _value_s598);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3107]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s598], _value_s598);
[L3108]  COND FALSE  !(revert)
[L3111]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s598];
[L3112]              balanceOf_TokenERC20[this][_from_s598] := __var_11;
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s598];
[L3114]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s598][msgsender_MSG], _value_s598);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3114]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s598][msgsender_MSG], _value_s598);
[L3115]  COND FALSE  !(revert)
[L3118]              sum_allowance1[_from_s598] := sum_allowance1[_from_s598] - allowance_TokenERC20[this][_from_s598][msgsender_MSG];
[L3119]              allowance_TokenERC20[this][_from_s598][msgsender_MSG] := __var_12;
[L3120]              sum_allowance1[_from_s598] := sum_allowance1[_from_s598] + allowance_TokenERC20[this][_from_s598][msgsender_MSG];
[L3121]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s598);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3121]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s598);
[L3122]  COND FALSE  !(revert)
[L3125]              totalSupply_TokenERC20[this] := __var_13;
[L3126]              assert { :EventEmitted "Burn_TokenERC20" } true;
[L3127]              success_s598 := true;
[L904]   RET         call success_s598 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s598, _value_s598);
[L905]               assume !revert && gas >= 0;
[L5037]  RET         call success_s598 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s598, _value_s598);
[L5099]  RET         call CorralChoice_ERC20ext(this);
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND TRUE   choice == 11
[L5005]              gas := gas - 21000;
[L5006]  COND TRUE   gas >= 0
[L5007]              assume _value_s413 >= 0 && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5008]              assume msgvalue_MSG == 0;
[L5009]  CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s413 != _to_s413 && ((_value_s413 > balanceOf_TokenERC20[this][_from_s413] || _value_s413 > allowance_TokenERC20[this][_from_s413][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s413] + _value_s413 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s413 >= 0) && _value_s413 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s413] >= 0) && balanceOf_TokenERC20[this][_to_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s413] >= 0) && balanceOf_TokenERC20[this][_from_s413] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s413][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L628]   CALL        call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2904]  COND FALSE  !(!(_value_s413 <= allowance_TokenERC20[this][_from_s413][msgsender_MSG]))
[L2908]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2908]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s413][msgsender_MSG], _value_s413);
[L2909]  COND FALSE  !(revert)
[L2912]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] - allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2913]              allowance_TokenERC20[this][_from_s413][msgsender_MSG] := __var_5;
[L2914]              sum_allowance1[_from_s413] := sum_allowance1[_from_s413] + allowance_TokenERC20[this][_from_s413][msgsender_MSG];
[L2915]  COND TRUE   DType[this] == ERC20ext
[L2916]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2916]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L2917]  COND FALSE  !(revert)
[L2928]              success_s413 := true;
[L628]   RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L629]               assume !revert && gas >= 0;
[L5009]  RET         call success_s413 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s413, _to_s413, _value_s413);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:09:30,149 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:09:30,149 INFO  L82        PathProgramCache]: Analyzing trace with hash -499314565, now seen corresponding path program 1 times
[2020-11-25 15:09:30,150 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:09:30,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:09:30,363 INFO  L134       CoverageAnalysis]: Checked inductivity of 100 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 100 trivial. 0 not checked.
[2020-11-25 15:09:30,363 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:09:30,363 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 15:09:30,364 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:09:30,364 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 15:09:30,364 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=150, Unknown=0, NotChecked=0, Total=182
[2020-11-25 15:09:30,364 INFO  L87              Difference]: Start difference. First operand 3145 states and 3419 transitions. cyclomatic complexity: 279 Second operand 14 states.
[2020-11-25 15:09:31,747 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:09:31,747 INFO  L93              Difference]: Finished difference Result 1757 states and 1908 transitions.
[2020-11-25 15:09:31,748 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 15:09:31,748 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1757 states and 1908 transitions.
[2020-11-25 15:09:31,750 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:09:31,750 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1757 states to 0 states and 0 transitions.
[2020-11-25 15:09:31,750 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:09:31,750 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:09:31,750 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:09:31,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:09:31,751 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:09:31,751 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:09:31,751 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:09:31,751 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 15:09:31,751 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:09:31,751 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:09:31,751 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:09:31,754 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:09:31 BasicIcfg
[2020-11-25 15:09:31,754 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:09:31,754 INFO  L168              Benchmark]: Toolchain (without parser) took 12667.98 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 995.6 MB). Free memory was 940.6 MB in the beginning and 1.5 GB in the end (delta: -554.6 MB). Peak memory consumption was 441.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,755 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,755 INFO  L168              Benchmark]: Boogie Preprocessor took 98.14 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 919.1 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,756 INFO  L168              Benchmark]: UtopiaSpecLang took 58.38 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,756 INFO  L168              Benchmark]: Boogie Printer took 16.86 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,756 INFO  L168              Benchmark]: RCFGBuilder took 772.87 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 779.5 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,757 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.54 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,757 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1474.03 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.2 MB). Free memory was 775.9 MB in the beginning and 879.1 MB in the end (delta: -103.2 MB). Peak memory consumption was 161.8 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,758 INFO  L168              Benchmark]: BlockEncodingV2 took 158.98 ms. Allocated memory is still 1.2 GB. Free memory was 879.1 MB in the beginning and 804.2 MB in the end (delta: 74.9 MB). Peak memory consumption was 74.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,758 INFO  L168              Benchmark]: BuchiAutomizer took 10046.26 ms. Allocated memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: 807.4 MB). Free memory was 804.2 MB in the beginning and 1.5 GB in the end (delta: -690.9 MB). Peak memory consumption was 116.5 MB. Max. memory is 15.3 GB.
[2020-11-25 15:09:31,760 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4502 locations, 7818 edges
  - StatisticsResult: Encoded RCFG
    4425 locations, 7634 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 98.14 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 919.1 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.38 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.86 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 772.87 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 779.5 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.54 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1474.03 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.2 MB). Free memory was 775.9 MB in the beginning and 879.1 MB in the end (delta: -103.2 MB). Peak memory consumption was 161.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 158.98 ms. Allocated memory is still 1.2 GB. Free memory was 879.1 MB in the beginning and 804.2 MB in the end (delta: 74.9 MB). Peak memory consumption was 74.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 10046.26 ms. Allocated memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: 807.4 MB). Free memory was 804.2 MB in the beginning and 1.5 GB in the end (delta: -690.9 MB). Peak memory consumption was 116.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1880 locations, 2416 edges
  - StatisticsResult: BuchiProgram size
    4502 locations, 7818 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 23 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 10.0s and 8 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.2s. Construction of modules took 6.2s. BÃ¼chi inclusion checks took 1.9s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 1529 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3366 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 22157 SDtfs, 20957 SDslu, 46930 SDs, 0 SdLazy, 88338 SolverSat, 3231 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(fail_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
