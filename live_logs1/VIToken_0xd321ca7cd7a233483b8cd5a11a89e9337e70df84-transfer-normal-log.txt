This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:36:32,251 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:36:32,253 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:36:32,264 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:36:32,264 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:36:32,264 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:36:32,265 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:36:32,267 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:36:32,268 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:36:32,269 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:36:32,270 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:36:32,270 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:36:32,271 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:36:32,271 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:36:32,272 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:36:32,273 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:36:32,274 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:36:32,275 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:36:32,276 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:36:32,277 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:36:32,278 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:36:32,279 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:36:32,280 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:36:32,281 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:36:32,281 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:36:32,281 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:36:32,282 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:36:32,282 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:36:32,282 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:36:32,283 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:36:32,283 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:36:32,284 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:36:32,284 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:36:32,285 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:36:32,285 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:36:32,285 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:36:32,286 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:36:32,286 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:36:32,286 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:36:32,287 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:36:32,287 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:36:32,288 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:36:32,296 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:36:32,296 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:36:32,297 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:36:32,297 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:36:32,297 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:36:32,297 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:36:32,297 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:36:32,297 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:36:32,297 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:36:32,297 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:36:32,297 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:36:32,298 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:36:32,298 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:36:32,299 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:36:32,299 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:36:32,299 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:36:32,299 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:36:32,299 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:36:32,323 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:36:32,339 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:36:32,341 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:36:32,343 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:36:32,343 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:36:32,344 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl
[2020-11-25 08:36:32,344 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl'
[2020-11-25 08:36:32,450 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:36:32,451 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:36:32,451 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:36:32,451 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:36:32,451 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:36:32,468 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,470 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,510 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,510 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,541 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,557 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,570 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,585 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:36:32,586 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:36:32,586 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:36:32,588 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:36:32,593 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/1) ...
[2020-11-25 08:36:32,616 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:32,622 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:32,631 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:32,639 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=recipient_s336 ) && msg.sender!=recipient_s336 ) && amount_s336<=_balances_ERC20[this][msg.sender] ) && ( _balances_ERC20[this][recipient_s336] + amount_s336 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && amount_s336>=0 ) && amount_s336<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s336]>=0 ) && _balances_ERC20[this][recipient_s336]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:36:32,643 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][msg.sender]==( ( old(_balances_ERC20[this][msg.sender]) ) - amount_s336 ) ) && _balances_ERC20[this][recipient_s336]==( ( old(_balances_ERC20[this][recipient_s336]) ) + amount_s336 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 08:36:32,652 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:36:32,652 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:36:32,668 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:32 PropertyContainer
[2020-11-25 08:36:32,668 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:36:32,668 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:36:32,668 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:36:32,668 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:36:32,669 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/2) ...
[2020-11-25 08:36:32,670 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:36:32,670 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:36:32,691 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:32" (2/2) ...
[2020-11-25 08:36:32,692 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:36:32,692 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:36:32,692 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:36:32,692 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:36:32,693 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/2) ...
[2020-11-25 08:36:32,749 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:36:32,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:36:32,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:36:32,750 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:36:32,751 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:36:32,751 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:36:32,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:36:32,751 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:36:32,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:36:32,752 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:36:32,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:36:32,752 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:36:32,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:36:32,752 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:36:32,752 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 08:36:32,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 08:36:32,752 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:36:32,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:36:32,753 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:36:32,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:36:32,754 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:36:32,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:36:32,754 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:36:32,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:36:32,754 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:36:32,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:36:32,754 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:36:32,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:36:32,754 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:36:32,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:36:32,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:36:32,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:36:32,755 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:32,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:32,755 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:32,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:36:32,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:36:32,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:36:32,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:36:32,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:36:32,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:36:32,756 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:36:32,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:36:32,757 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:36:32,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:36:32,757 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:36:32,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:36:32,757 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:36:32,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:36:32,757 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:36:32,757 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:36:32,757 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:36:32,757 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:36:32,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:36:32,758 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:36:32,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:36:32,758 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:36:32,758 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:36:32,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:36:32,758 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 08:36:32,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 08:36:32,758 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:36:32,758 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken
[2020-11-25 08:36:32,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken
[2020-11-25 08:36:32,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:36:32,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:36:32,759 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:36:32,760 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIToken
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:36:32,761 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:36:32,762 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:36:32,763 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:36:32,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:36:32,765 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:36:32,766 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:36:32,767 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:36:32,768 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__success
[2020-11-25 08:36:32,769 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__fail
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__success
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__fail
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:36:32,770 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:36:32,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:36:32,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:36:32,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:36:32,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:36:32,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:36:32,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:36:32,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:36:32,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:36:32,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:36:32,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:36:32,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:36:32,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:36:32,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__fail
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__success
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__fail
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__success
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:36:32,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:36:32,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIToken
[2020-11-25 08:36:32,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:36:32,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:36:32,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:36:33,122 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:36:33,122 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:36:33,123 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:36:33,554 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:36:33,952 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:36:33,953 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:36:33,955 INFO  L202        PluginConnector]: Adding new model VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:33 BoogieIcfgContainer
[2020-11-25 08:36:33,955 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:32" (2/2) ...
[2020-11-25 08:36:33,955 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:36:33,955 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@66c52f55 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:33, skipping insertion in model container
[2020-11-25 08:36:33,955 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:36:33,955 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:36:33,955 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:36:33,957 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:36:33,957 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/3) ...
[2020-11-25 08:36:33,957 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@51e1684e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:33, skipping insertion in model container
[2020-11-25 08:36:33,957 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:32" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:36:33,996 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:33 NWAContainer
[2020-11-25 08:36:33,996 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:36:33,996 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:36:33,996 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:36:33,997 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:36:33,998 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:33" (3/4) ...
[2020-11-25 08:36:33,999 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@61ba3132 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:33, skipping insertion in model container
[2020-11-25 08:36:33,999 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:33" (4/4) ...
[2020-11-25 08:36:34,002 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:36:34,009 INFO  L110   BuchiProductObserver]: Initial RCFG 3085 locations, 4750 edges
[2020-11-25 08:36:34,009 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:36:34,024 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:36:36,444 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:36:36,455 INFO  L110   BuchiProductObserver]: BuchiProgram size 8162 locations, 15603 edges
[2020-11-25 08:36:36,455 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:36 BoogieIcfgContainer
[2020-11-25 08:36:36,455 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:36:36,456 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:36:36,456 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:36:36,457 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:36:36,457 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:36" (1/1) ...
[2020-11-25 08:36:36,597 INFO  L313           BlockEncoder]: Initial Icfg 8162 locations, 15603 edges
[2020-11-25 08:36:36,597 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:36:36,598 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:36:36,598 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:36:36,599 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:36:36,618 INFO  L70    emoveInfeasibleEdges]: Removed 252 edges and 23 locations because of local infeasibility
[2020-11-25 08:36:36,636 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:36:36,658 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:36:36,664 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:36:36,672 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:36:36,672 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:36:36,678 INFO  L313           BlockEncoder]: Encoded RCFG 7994 locations, 15134 edges
[2020-11-25 08:36:36,679 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:36:36 BasicIcfg
[2020-11-25 08:36:36,679 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:36:36,679 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:36:36,679 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:36:36,682 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:36:36,682 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:36,682 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:36:32" (1/6) ...
[2020-11-25 08:36:36,683 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f812556 and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:36:36, skipping insertion in model container
[2020-11-25 08:36:36,684 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:36,684 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:36:32" (2/6) ...
[2020-11-25 08:36:36,684 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f812556 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:36:36, skipping insertion in model container
[2020-11-25 08:36:36,684 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:36,684 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:36:33" (3/6) ...
[2020-11-25 08:36:36,684 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f812556 and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:36:36, skipping insertion in model container
[2020-11-25 08:36:36,684 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:36,684 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:36:33" (4/6) ...
[2020-11-25 08:36:36,685 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f812556 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:36:36, skipping insertion in model container
[2020-11-25 08:36:36,685 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:36,685 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:36:36" (5/6) ...
[2020-11-25 08:36:36,685 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f812556 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:36:36, skipping insertion in model container
[2020-11-25 08:36:36,685 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:36:36,685 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:36:36" (6/6) ...
[2020-11-25 08:36:36,686 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-normal.bpl_BEv2
[2020-11-25 08:36:36,723 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:36:36,724 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:36:36,724 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:36:36,724 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:36:36,724 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:36:36,724 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:36:36,724 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:36:36,724 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:36:36,724 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:36:36,791 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7994 states.
[2020-11-25 08:36:36,871 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:36,871 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:36,871 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:36,881 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:36,881 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:36,881 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:36:36,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7994 states.
[2020-11-25 08:36:36,922 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:36,922 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:36,922 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:36,924 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:36,924 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND TRUE   revert
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:36,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:36,943 INFO  L82        PathProgramCache]: Analyzing trace with hash 288916271, now seen corresponding path program 1 times
[2020-11-25 08:36:36,949 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:36,972 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:37,017 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:36:37,019 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:37,019 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:36:37,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:37,413 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:36:37,413 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:36:37,414 INFO  L87              Difference]: Start difference. First operand 7994 states. Second operand 4 states.
[2020-11-25 08:36:38,251 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:38,251 INFO  L93              Difference]: Finished difference Result 4693 states and 5967 transitions.
[2020-11-25 08:36:38,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:36:38,253 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4693 states and 5967 transitions.
[2020-11-25 08:36:38,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:38,314 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4693 states to 4693 states and 5967 transitions.
[2020-11-25 08:36:38,315 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:36:38,319 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 877
[2020-11-25 08:36:38,319 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4693 states and 5967 transitions.
[2020-11-25 08:36:38,339 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:38,339 INFO  L728         BuchiCegarLoop]: Abstraction has 4693 states and 5967 transitions.
[2020-11-25 08:36:38,361 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4693 states and 5967 transitions.
[2020-11-25 08:36:38,441 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4693 to 4693.
[2020-11-25 08:36:38,441 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4693 states.
[2020-11-25 08:36:38,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4693 states to 4693 states and 5967 transitions.
[2020-11-25 08:36:38,449 INFO  L751         BuchiCegarLoop]: Abstraction has 4693 states and 5967 transitions.
[2020-11-25 08:36:38,449 INFO  L631         BuchiCegarLoop]: Abstraction has 4693 states and 5967 transitions.
[2020-11-25 08:36:38,449 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:36:38,449 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4693 states and 5967 transitions.
[2020-11-25 08:36:38,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:38,459 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:38,459 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:38,460 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:38,461 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND TRUE   revert
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND TRUE   revert
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND FALSE  !(__exception)
[L808]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3434]  COND TRUE   DType[this] == VIToken
[L3435]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L3435]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3436]  COND TRUE   revert
[L808]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L809]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - amount_s336) && _balances_ERC20[this][recipient_s336] == old(_balances_ERC20[this][recipient_s336]) + amount_s336) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND FALSE  !(__exception)
[L808]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3434]  COND TRUE   DType[this] == VIToken
[L3435]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L3435]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3436]  COND TRUE   revert
[L808]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L809]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - amount_s336) && _balances_ERC20[this][recipient_s336] == old(_balances_ERC20[this][recipient_s336]) + amount_s336) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:38,465 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:38,465 INFO  L82        PathProgramCache]: Analyzing trace with hash 1401539752, now seen corresponding path program 1 times
[2020-11-25 08:36:38,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:38,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:38,497 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:36:38,497 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:38,497 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:38,499 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:38,499 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:38,499 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:38,499 INFO  L87              Difference]: Start difference. First operand 4693 states and 5967 transitions. cyclomatic complexity: 1276 Second operand 3 states.
[2020-11-25 08:36:38,653 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:38,654 INFO  L93              Difference]: Finished difference Result 6027 states and 7629 transitions.
[2020-11-25 08:36:38,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:38,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6027 states and 7629 transitions.
[2020-11-25 08:36:38,671 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:38,695 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6027 states to 5493 states and 6693 transitions.
[2020-11-25 08:36:38,695 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1099
[2020-11-25 08:36:38,696 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1147
[2020-11-25 08:36:38,696 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5493 states and 6693 transitions.
[2020-11-25 08:36:38,703 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:38,703 INFO  L728         BuchiCegarLoop]: Abstraction has 5493 states and 6693 transitions.
[2020-11-25 08:36:38,709 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5493 states and 6693 transitions.
[2020-11-25 08:36:38,756 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5493 to 4943.
[2020-11-25 08:36:38,756 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4943 states.
[2020-11-25 08:36:38,762 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4943 states to 4943 states and 6007 transitions.
[2020-11-25 08:36:38,762 INFO  L751         BuchiCegarLoop]: Abstraction has 4943 states and 6007 transitions.
[2020-11-25 08:36:38,762 INFO  L631         BuchiCegarLoop]: Abstraction has 4943 states and 6007 transitions.
[2020-11-25 08:36:38,762 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:36:38,762 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4943 states and 6007 transitions.
[2020-11-25 08:36:38,768 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:38,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:38,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:38,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:38,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4712]  COND TRUE   __tmp__DType[this] == MinterRole
[L4713]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4713]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4714]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4712]  COND TRUE   __tmp__DType[this] == MinterRole
[L4713]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4713]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4714]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4712]  COND TRUE   __tmp__DType[this] == MinterRole
[L4713]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4713]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4714]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L4712]  COND TRUE   __tmp__DType[this] == MinterRole
[L4713]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4713]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4714]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND TRUE   __tmp__DType[this] == VIToken
[L5254]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5254]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND TRUE   __tmp__DType[this] == VIToken
[L5275]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5275]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5276]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:38,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:38,783 INFO  L82        PathProgramCache]: Analyzing trace with hash 488998864, now seen corresponding path program 1 times
[2020-11-25 08:36:38,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:38,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:39,145 INFO  L134       CoverageAnalysis]: Checked inductivity of 1559 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 1511 trivial. 0 not checked.
[2020-11-25 08:36:39,145 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:36:39,146 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 08:36:39,146 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:39,147 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:39,147 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:39,147 INFO  L87              Difference]: Start difference. First operand 4943 states and 6007 transitions. cyclomatic complexity: 1066 Second operand 3 states.
[2020-11-25 08:36:39,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:39,213 INFO  L93              Difference]: Finished difference Result 4946 states and 6010 transitions.
[2020-11-25 08:36:39,213 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:39,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4946 states and 6010 transitions.
[2020-11-25 08:36:39,224 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:39,236 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4946 states to 4946 states and 6010 transitions.
[2020-11-25 08:36:39,237 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1015
[2020-11-25 08:36:39,237 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1015
[2020-11-25 08:36:39,237 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4946 states and 6010 transitions.
[2020-11-25 08:36:39,241 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:39,241 INFO  L728         BuchiCegarLoop]: Abstraction has 4946 states and 6010 transitions.
[2020-11-25 08:36:39,245 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4946 states and 6010 transitions.
[2020-11-25 08:36:39,281 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4946 to 4944.
[2020-11-25 08:36:39,281 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4944 states.
[2020-11-25 08:36:39,286 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4944 states to 4944 states and 6008 transitions.
[2020-11-25 08:36:39,286 INFO  L751         BuchiCegarLoop]: Abstraction has 4944 states and 6008 transitions.
[2020-11-25 08:36:39,286 INFO  L631         BuchiCegarLoop]: Abstraction has 4944 states and 6008 transitions.
[2020-11-25 08:36:39,286 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:36:39,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4944 states and 6008 transitions.
[2020-11-25 08:36:39,292 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:39,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:39,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:39,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:39,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L5258]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L5259]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5259]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5260]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND TRUE   __tmp__DType[this] == VIToken
[L5275]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5275]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5276]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:39,303 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:39,303 INFO  L82        PathProgramCache]: Analyzing trace with hash 2054554751, now seen corresponding path program 1 times
[2020-11-25 08:36:39,304 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:39,328 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:39,574 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:36:39,575 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:39,575 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:39,575 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:39,575 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:39,575 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:39,576 INFO  L87              Difference]: Start difference. First operand 4944 states and 6008 transitions. cyclomatic complexity: 1066 Second operand 3 states.
[2020-11-25 08:36:39,626 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:39,626 INFO  L93              Difference]: Finished difference Result 4968 states and 6045 transitions.
[2020-11-25 08:36:39,627 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:39,627 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4968 states and 6045 transitions.
[2020-11-25 08:36:39,636 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:39,647 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4968 states to 4968 states and 6045 transitions.
[2020-11-25 08:36:39,647 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1022
[2020-11-25 08:36:39,648 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1022
[2020-11-25 08:36:39,648 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4968 states and 6045 transitions.
[2020-11-25 08:36:39,652 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:39,652 INFO  L728         BuchiCegarLoop]: Abstraction has 4968 states and 6045 transitions.
[2020-11-25 08:36:39,656 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4968 states and 6045 transitions.
[2020-11-25 08:36:39,685 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4968 to 4954.
[2020-11-25 08:36:39,685 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4954 states.
[2020-11-25 08:36:39,690 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4954 states to 4954 states and 6026 transitions.
[2020-11-25 08:36:39,690 INFO  L751         BuchiCegarLoop]: Abstraction has 4954 states and 6026 transitions.
[2020-11-25 08:36:39,690 INFO  L631         BuchiCegarLoop]: Abstraction has 4954 states and 6026 transitions.
[2020-11-25 08:36:39,690 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:36:39,690 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4954 states and 6026 transitions.
[2020-11-25 08:36:39,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:39,695 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:39,695 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:39,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:39,698 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND TRUE   __tmp__DType[this] == VIToken
[L5254]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5254]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L5279]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L5280]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5280]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5281]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:39,704 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:39,704 INFO  L82        PathProgramCache]: Analyzing trace with hash 683423736, now seen corresponding path program 1 times
[2020-11-25 08:36:39,705 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:39,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:39,923 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:36:39,924 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:39,924 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:39,924 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:39,924 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:39,924 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:39,924 INFO  L87              Difference]: Start difference. First operand 4954 states and 6026 transitions. cyclomatic complexity: 1074 Second operand 3 states.
[2020-11-25 08:36:39,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:39,969 INFO  L93              Difference]: Finished difference Result 4968 states and 6043 transitions.
[2020-11-25 08:36:39,969 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:39,969 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4968 states and 6043 transitions.
[2020-11-25 08:36:39,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:39,989 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4968 states to 4968 states and 6043 transitions.
[2020-11-25 08:36:39,989 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1022
[2020-11-25 08:36:39,990 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1022
[2020-11-25 08:36:39,990 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4968 states and 6043 transitions.
[2020-11-25 08:36:39,994 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:39,994 INFO  L728         BuchiCegarLoop]: Abstraction has 4968 states and 6043 transitions.
[2020-11-25 08:36:39,998 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4968 states and 6043 transitions.
[2020-11-25 08:36:40,029 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4968 to 4954.
[2020-11-25 08:36:40,029 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4954 states.
[2020-11-25 08:36:40,034 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4954 states to 4954 states and 6024 transitions.
[2020-11-25 08:36:40,034 INFO  L751         BuchiCegarLoop]: Abstraction has 4954 states and 6024 transitions.
[2020-11-25 08:36:40,034 INFO  L631         BuchiCegarLoop]: Abstraction has 4954 states and 6024 transitions.
[2020-11-25 08:36:40,034 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:36:40,034 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4954 states and 6024 transitions.
[2020-11-25 08:36:40,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:40,039 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:40,040 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:40,042 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:40,042 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L5258]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L5259]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5259]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5260]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L5279]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L5280]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5280]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5281]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:40,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:40,047 INFO  L82        PathProgramCache]: Analyzing trace with hash 1634824485, now seen corresponding path program 1 times
[2020-11-25 08:36:40,048 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:40,067 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:40,305 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:36:40,305 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:40,305 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:36:40,305 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:40,306 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:36:40,306 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:36:40,306 INFO  L87              Difference]: Start difference. First operand 4954 states and 6024 transitions. cyclomatic complexity: 1072 Second operand 4 states.
[2020-11-25 08:36:40,485 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:40,485 INFO  L93              Difference]: Finished difference Result 5808 states and 6868 transitions.
[2020-11-25 08:36:40,486 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 08:36:40,486 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5808 states and 6868 transitions.
[2020-11-25 08:36:40,498 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:36:40,512 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5808 states to 5542 states and 6574 transitions.
[2020-11-25 08:36:40,512 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1206
[2020-11-25 08:36:40,513 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1206
[2020-11-25 08:36:40,513 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5542 states and 6574 transitions.
[2020-11-25 08:36:40,517 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:40,517 INFO  L728         BuchiCegarLoop]: Abstraction has 5542 states and 6574 transitions.
[2020-11-25 08:36:40,520 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5542 states and 6574 transitions.
[2020-11-25 08:36:40,552 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5542 to 4932.
[2020-11-25 08:36:40,552 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4932 states.
[2020-11-25 08:36:40,557 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4932 states to 4932 states and 5815 transitions.
[2020-11-25 08:36:40,557 INFO  L751         BuchiCegarLoop]: Abstraction has 4932 states and 5815 transitions.
[2020-11-25 08:36:40,557 INFO  L631         BuchiCegarLoop]: Abstraction has 4932 states and 5815 transitions.
[2020-11-25 08:36:40,557 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:36:40,557 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4932 states and 5815 transitions.
[2020-11-25 08:36:40,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:40,562 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:40,562 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:40,564 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:40,564 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND FALSE  !(DType[this] == VIToken)
[L5320]  COND TRUE   DType[this] == ERC20Capped
[L5321]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5321]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5322]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3404]  COND TRUE   __tmp__DType[this] == VIToken
[L3405]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3405]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3406]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:40,569 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:40,569 INFO  L82        PathProgramCache]: Analyzing trace with hash 690559767, now seen corresponding path program 1 times
[2020-11-25 08:36:40,570 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:40,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:40,787 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:36:40,787 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:40,787 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:36:40,787 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:40,787 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:40,788 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:40,788 INFO  L87              Difference]: Start difference. First operand 4932 states and 5815 transitions. cyclomatic complexity: 885 Second operand 3 states.
[2020-11-25 08:36:40,829 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:40,830 INFO  L93              Difference]: Finished difference Result 4946 states and 5834 transitions.
[2020-11-25 08:36:40,830 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:40,830 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4946 states and 5834 transitions.
[2020-11-25 08:36:40,838 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:40,847 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4946 states to 4946 states and 5834 transitions.
[2020-11-25 08:36:40,847 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1158
[2020-11-25 08:36:40,847 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1158
[2020-11-25 08:36:40,848 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4946 states and 5834 transitions.
[2020-11-25 08:36:40,850 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:40,850 INFO  L728         BuchiCegarLoop]: Abstraction has 4946 states and 5834 transitions.
[2020-11-25 08:36:40,855 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4946 states and 5834 transitions.
[2020-11-25 08:36:40,877 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4946 to 4942.
[2020-11-25 08:36:40,877 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4942 states.
[2020-11-25 08:36:40,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4942 states to 4942 states and 5827 transitions.
[2020-11-25 08:36:40,882 INFO  L751         BuchiCegarLoop]: Abstraction has 4942 states and 5827 transitions.
[2020-11-25 08:36:40,882 INFO  L631         BuchiCegarLoop]: Abstraction has 4942 states and 5827 transitions.
[2020-11-25 08:36:40,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:36:40,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4942 states and 5827 transitions.
[2020-11-25 08:36:40,886 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:40,886 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:40,887 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:40,888 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:40,888 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3404]  COND TRUE   __tmp__DType[this] == VIToken
[L3405]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3405]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3406]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:40,893 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:40,893 INFO  L82        PathProgramCache]: Analyzing trace with hash 1270633447, now seen corresponding path program 1 times
[2020-11-25 08:36:40,894 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:40,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:41,074 INFO  L134       CoverageAnalysis]: Checked inductivity of 1589 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:36:41,075 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:36:41,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 08:36:41,075 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:41,075 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:36:41,075 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:36:41,076 INFO  L87              Difference]: Start difference. First operand 4942 states and 5827 transitions. cyclomatic complexity: 887 Second operand 3 states.
[2020-11-25 08:36:41,123 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:41,123 INFO  L93              Difference]: Finished difference Result 4945 states and 5830 transitions.
[2020-11-25 08:36:41,123 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:36:41,123 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4945 states and 5830 transitions.
[2020-11-25 08:36:41,134 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:41,145 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4945 states to 4945 states and 5830 transitions.
[2020-11-25 08:36:41,145 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1156
[2020-11-25 08:36:41,145 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1156
[2020-11-25 08:36:41,146 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4945 states and 5830 transitions.
[2020-11-25 08:36:41,148 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:41,148 INFO  L728         BuchiCegarLoop]: Abstraction has 4945 states and 5830 transitions.
[2020-11-25 08:36:41,152 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4945 states and 5830 transitions.
[2020-11-25 08:36:41,181 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4945 to 4943.
[2020-11-25 08:36:41,181 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4943 states.
[2020-11-25 08:36:41,187 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4943 states to 4943 states and 5828 transitions.
[2020-11-25 08:36:41,187 INFO  L751         BuchiCegarLoop]: Abstraction has 4943 states and 5828 transitions.
[2020-11-25 08:36:41,188 INFO  L631         BuchiCegarLoop]: Abstraction has 4943 states and 5828 transitions.
[2020-11-25 08:36:41,188 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:36:41,188 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4943 states and 5828 transitions.
[2020-11-25 08:36:41,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:41,193 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:41,193 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:41,195 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:41,195 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3404]  COND TRUE   __tmp__DType[this] == VIToken
[L3405]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3405]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3406]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3404]  COND TRUE   __tmp__DType[this] == VIToken
[L3405]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3405]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3406]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:41,200 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:41,200 INFO  L82        PathProgramCache]: Analyzing trace with hash -316439379, now seen corresponding path program 1 times
[2020-11-25 08:36:41,201 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:41,224 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:41,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:36:41,455 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:41,456 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:36:41,457 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:36:41,457 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:36:41,457 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:36:41,457 INFO  L87              Difference]: Start difference. First operand 4943 states and 5828 transitions. cyclomatic complexity: 887 Second operand 8 states.
[2020-11-25 08:36:41,655 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:41,655 INFO  L93              Difference]: Finished difference Result 4975 states and 5872 transitions.
[2020-11-25 08:36:41,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:36:41,656 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4975 states and 5872 transitions.
[2020-11-25 08:36:41,669 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:41,682 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4975 states to 4947 states and 5838 transitions.
[2020-11-25 08:36:41,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1158
[2020-11-25 08:36:41,683 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1158
[2020-11-25 08:36:41,683 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4947 states and 5838 transitions.
[2020-11-25 08:36:41,686 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:41,686 INFO  L728         BuchiCegarLoop]: Abstraction has 4947 states and 5838 transitions.
[2020-11-25 08:36:41,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4947 states and 5838 transitions.
[2020-11-25 08:36:41,721 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4947 to 4947.
[2020-11-25 08:36:41,721 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4947 states.
[2020-11-25 08:36:41,726 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4947 states to 4947 states and 5838 transitions.
[2020-11-25 08:36:41,726 INFO  L751         BuchiCegarLoop]: Abstraction has 4947 states and 5838 transitions.
[2020-11-25 08:36:41,726 INFO  L631         BuchiCegarLoop]: Abstraction has 4947 states and 5838 transitions.
[2020-11-25 08:36:41,726 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:36:41,726 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4947 states and 5838 transitions.
[2020-11-25 08:36:41,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:36:41,731 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:41,731 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:41,732 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:41,733 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3404]  COND TRUE   __tmp__DType[this] == VIToken
[L3405]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4146]              __var_12 := null;
[L4147]  COND FALSE  !(!(sender_s519 != null))
[L4151]              __var_13 := null;
[L4152]  COND TRUE   !(recipient_s519 != null)
[L4153]              revert := true;
[L3405]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3406]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:41,737 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:41,738 INFO  L82        PathProgramCache]: Analyzing trace with hash -1189923546, now seen corresponding path program 1 times
[2020-11-25 08:36:41,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:41,779 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:41,811 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:41,986 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:41,986 INFO  L82        PathProgramCache]: Analyzing trace with hash 25842074, now seen corresponding path program 1 times
[2020-11-25 08:36:41,987 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:41,989 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:36:41,997 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:36:41,997 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:36:41,997 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:36:41,997 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 08:36:41,998 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:36:41,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:36:41,998 INFO  L87              Difference]: Start difference. First operand 4947 states and 5838 transitions. cyclomatic complexity: 893 Second operand 4 states.
[2020-11-25 08:36:42,516 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:36:42,516 INFO  L93              Difference]: Finished difference Result 5214 states and 6071 transitions.
[2020-11-25 08:36:42,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:36:42,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5214 states and 6071 transitions.
[2020-11-25 08:36:42,531 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:36:42,542 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5214 states to 5214 states and 6071 transitions.
[2020-11-25 08:36:42,542 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1164
[2020-11-25 08:36:42,543 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1164
[2020-11-25 08:36:42,543 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5214 states and 6071 transitions.
[2020-11-25 08:36:42,545 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:36:42,546 INFO  L728         BuchiCegarLoop]: Abstraction has 5214 states and 6071 transitions.
[2020-11-25 08:36:42,549 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5214 states and 6071 transitions.
[2020-11-25 08:36:42,574 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5214 to 4846.
[2020-11-25 08:36:42,574 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4846 states.
[2020-11-25 08:36:42,579 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4846 states to 4846 states and 5664 transitions.
[2020-11-25 08:36:42,579 INFO  L751         BuchiCegarLoop]: Abstraction has 4846 states and 5664 transitions.
[2020-11-25 08:36:42,579 INFO  L631         BuchiCegarLoop]: Abstraction has 4846 states and 5664 transitions.
[2020-11-25 08:36:42,579 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:36:42,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4846 states and 5664 transitions.
[2020-11-25 08:36:42,586 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:36:42,586 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:36:42,586 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:36:42,588 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:36:42,588 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND TRUE   choice == 16
[L8141]              gas := gas - 21000;
[L8142]  COND TRUE   gas >= 0
[L8143]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8144]              assume msgvalue_MSG == 0;
[L8145]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3404]  COND TRUE   __tmp__DType[this] == VIToken
[L3405]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4146]              __var_12 := null;
[L4147]  COND FALSE  !(!(sender_s519 != null))
[L4151]              __var_13 := null;
[L4152]  COND TRUE   !(recipient_s519 != null)
[L4153]              revert := true;
[L3405]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3406]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND FALSE  !(choice == 13)
[L8167]  COND FALSE  !(choice == 12)
[L8173]  COND FALSE  !(choice == 11)
[L8179]  COND FALSE  !(choice == 10)
[L8185]  COND FALSE  !(choice == 9)
[L8192]  COND FALSE  !(choice == 8)
[L8199]  COND FALSE  !(choice == 7)
[L8205]  COND FALSE  !(choice == 6)
[L8211]  COND FALSE  !(choice == 5)
[L8217]  COND FALSE  !(choice == 4)
[L8224]  COND FALSE  !(choice == 3)
[L8230]  COND FALSE  !(choice == 2)
[L8236]  COND FALSE  !(choice == 1)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:36:42,592 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:42,593 INFO  L82        PathProgramCache]: Analyzing trace with hash -1189923546, now seen corresponding path program 2 times
[2020-11-25 08:36:42,593 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:42,623 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:42,652 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:42,774 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:42,774 INFO  L82        PathProgramCache]: Analyzing trace with hash -395097941, now seen corresponding path program 1 times
[2020-11-25 08:36:42,775 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:42,777 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:42,779 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:42,784 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:36:42,784 INFO  L82        PathProgramCache]: Analyzing trace with hash 1673639568, now seen corresponding path program 1 times
[2020-11-25 08:36:42,785 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:36:42,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:42,845 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3517 to 7027
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 08:36:44,191 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 08:36:46,181 WARN  L188               SmtUtils]: Spent 1.43 s on a formula simplification. DAG size of input: 415 DAG size of output: 388
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 08:36:46,354 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 224
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 08:36:46,644 WARN  L188               SmtUtils]: Spent 192.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 196
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 08:36:46,899 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification that was a NOOP. DAG size: 347
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 08:36:47,078 WARN  L188               SmtUtils]: Spent 174.00 ms on a formula simplification that was a NOOP. DAG size: 315
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 08:36:47,334 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 277
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 08:36:47,475 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification that was a NOOP. DAG size: 221
[2020-11-25 08:36:47,820 WARN  L188               SmtUtils]: Spent 342.00 ms on a formula simplification. DAG size of input: 284 DAG size of output: 273
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 08:36:47,941 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 169 DAG size of output: 165
[2020-11-25 08:36:48,080 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification that was a NOOP. DAG size: 343
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 08:36:48,210 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification that was a NOOP. DAG size: 276
[2020-11-25 08:36:49,343 WARN  L188               SmtUtils]: Spent 1.13 s on a formula simplification. DAG size of input: 562 DAG size of output: 550
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 08:36:49,643 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 272 DAG size of output: 269
[2020-11-25 08:36:49,899 WARN  L188               SmtUtils]: Spent 235.00 ms on a formula simplification that was a NOOP. DAG size: 389
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 08:36:50,039 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 269
[2020-11-25 08:36:50,514 WARN  L188               SmtUtils]: Spent 473.00 ms on a formula simplification. DAG size of input: 391 DAG size of output: 390
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 08:36:50,742 WARN  L188               SmtUtils]: Spent 224.00 ms on a formula simplification that was a NOOP. DAG size: 386
[2020-11-25 08:36:50,773 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:36:50,784 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:36:50 BasicIcfg
[2020-11-25 08:36:50,784 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:36:50,784 INFO  L168              Benchmark]: Toolchain (without parser) took 18334.03 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.8 GB). Free memory was 929.8 MB in the beginning and 833.4 MB in the end (delta: 96.4 MB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,784 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,785 INFO  L168              Benchmark]: Boogie Preprocessor took 134.62 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,785 INFO  L168              Benchmark]: UtopiaSpecLang took 81.92 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,785 INFO  L168              Benchmark]: Boogie Printer took 23.42 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,786 INFO  L168              Benchmark]: RCFGBuilder took 1263.32 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.3 MB). Free memory was 892.2 MB in the beginning and 905.0 MB in the end (delta: -12.8 MB). Peak memory consumption was 180.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,786 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.79 ms. Allocated memory is still 1.1 GB. Free memory was 905.0 MB in the beginning and 898.1 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,787 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2459.11 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 193.5 MB). Free memory was 898.1 MB in the beginning and 924.4 MB in the end (delta: -26.3 MB). Peak memory consumption was 466.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,787 INFO  L168              Benchmark]: BlockEncodingV2 took 223.38 ms. Allocated memory is still 1.3 GB. Free memory was 924.4 MB in the beginning and 805.4 MB in the end (delta: 119.0 MB). Peak memory consumption was 119.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,787 INFO  L168              Benchmark]: BuchiAutomizer took 14104.39 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 805.4 MB in the beginning and 833.4 MB in the end (delta: -28.0 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 08:36:50,789 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8162 locations, 15603 edges
  - StatisticsResult: Encoded RCFG
    7994 locations, 15134 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 134.62 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 81.92 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.42 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1263.32 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.3 MB). Free memory was 892.2 MB in the beginning and 905.0 MB in the end (delta: -12.8 MB). Peak memory consumption was 180.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.79 ms. Allocated memory is still 1.1 GB. Free memory was 905.0 MB in the beginning and 898.1 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2459.11 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 193.5 MB). Free memory was 898.1 MB in the beginning and 924.4 MB in the end (delta: -26.3 MB). Peak memory consumption was 466.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 223.38 ms. Allocated memory is still 1.3 GB. Free memory was 924.4 MB in the beginning and 805.4 MB in the end (delta: 119.0 MB). Peak memory consumption was 119.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 14104.39 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 805.4 MB in the beginning and 833.4 MB in the end (delta: -28.0 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3085 locations, 4750 edges
  - StatisticsResult: BuchiProgram size
    8162 locations, 15603 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.10 modules have a trivial ranking function, the largest among these consists of 8 locations. The remainder module has 4846 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 14.0s and 11 iterations.  TraceHistogramMax:12. Analysis of lassos took 10.7s. Construction of modules took 1.3s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 10 MinimizatonAttempts, 1564 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4954 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 55684 SDtfs, 18794 SDslu, 76236 SDs, 0 SdLazy, 7491 SolverSat, 3694 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(260532201044493640747528357017076149686933615184624884273404448291238) = (new VIToken)({from : 260532201044493640747528357017076149686933615184624884273404448291239});
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
ERC20(260532201044493640747528357017076149686933615184624884273404448291238).transfer~address~uint256.gas(3979001)({from : 260532201044493640747528357017076149686933615184624884273404448291239, recipient : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s336) && msgsender_MSG != recipient_s336) && amount_s336 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s336] + amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L778]               havoc __exception;
[L779]               revert := false;
[L780]   COND TRUE   __exception
[L781]               __tmp__Balance := Balance;
[L782]               __tmp__DType := DType;
[L783]               __tmp__Alloc := Alloc;
[L784]               __tmp__balance_ADDR := balance_ADDR;
[L785]               __tmp__M_Ref_int := M_Ref_int;
[L786]               __tmp__sum__balances0 := sum__balances0;
[L787]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L788]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L789]               __tmp__sum__allowances1 := sum__allowances1;
[L790]               __tmp__M_Ref_bool := M_Ref_bool;
[L791]               __tmp__sum := sum;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L795]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L796]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L797]               __tmp___balances_ERC20 := _balances_ERC20;
[L798]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L799]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L800]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L801]               __tmp___minters_MinterRole := _minters_MinterRole;
[L802]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L803]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L804]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L805]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3381]  COND TRUE   __tmp__DType[this] == VIToken
[L3382]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L3382]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3404]  COND TRUE   __tmp__DType[this] == VIToken
[L3405]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4146]              __var_12 := null;
[L4147]  COND FALSE  !(!(sender_s519 != null))
[L4151]              __var_13 := null;
[L4152]  COND TRUE   !(recipient_s519 != null)
[L4153]              revert := true;
[L3405]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3406]  COND TRUE   revert
[L805]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L806]               assume revert || gas < 0;
[L8145]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
