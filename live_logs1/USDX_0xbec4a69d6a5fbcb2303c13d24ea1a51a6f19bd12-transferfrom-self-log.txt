This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:16:28,480 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:16:28,481 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:16:28,491 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:16:28,491 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:16:28,491 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:16:28,492 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:16:28,494 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:16:28,495 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:16:28,496 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:16:28,496 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:16:28,496 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:16:28,497 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:16:28,498 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:16:28,498 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:16:28,499 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:16:28,500 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:16:28,501 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:16:28,502 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:16:28,503 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:16:28,504 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:16:28,505 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:16:28,506 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:16:28,506 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:16:28,506 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:16:28,507 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:16:28,507 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:16:28,508 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:16:28,508 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:16:28,508 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:16:28,509 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:16:28,509 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:16:28,510 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:16:28,510 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:16:28,511 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:16:28,511 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:16:28,511 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:16:28,511 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:16:28,512 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:16:28,512 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:16:28,513 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:16:28,513 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:16:28,520 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:16:28,520 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:16:28,521 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:16:28,521 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:16:28,521 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:16:28,521 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:16:28,522 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:16:28,522 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:16:28,522 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:16:28,523 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:16:28,523 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:16:28,543 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:16:28,551 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:16:28,554 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:16:28,555 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:16:28,555 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:16:28,555 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl
[2020-11-25 08:16:28,556 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl'
[2020-11-25 08:16:28,653 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:16:28,654 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:16:28,654 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:16:28,654 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:16:28,654 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:16:28,665 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,666 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,695 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,695 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,717 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,726 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,734 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,747 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:16:28,747 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:16:28,748 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:16:28,749 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:16:28,751 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/1) ...
[2020-11-25 08:16:28,767 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2]) && aSBlock_USDX[this] == old(aSBlock_USDX[this]) && aEBlock_USDX[this] == old(aEBlock_USDX[this]) && aCap_USDX[this] == old(aCap_USDX[this]) && aTot_USDX[this] == old(aTot_USDX[this]) && aAmt_USDX[this] == old(aAmt_USDX[this]) && sSBlock_USDX[this] == old(sSBlock_USDX[this]) && sEBlock_USDX[this] == old(sEBlock_USDX[this]) && sCap_USDX[this] == old(sCap_USDX[this]) && sTot_USDX[this] == old(sTot_USDX[this]) && sChunk_USDX[this] == old(sChunk_USDX[this]) && sPrice_USDX[this] == old(sPrice_USDX[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 08:16:28,772 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2]) && aSBlock_USDX[this] == old(aSBlock_USDX[this]) && aEBlock_USDX[this] == old(aEBlock_USDX[this]) && aCap_USDX[this] == old(aCap_USDX[this]) && aTot_USDX[this] == old(aTot_USDX[this]) && aAmt_USDX[this] == old(aAmt_USDX[this]) && sSBlock_USDX[this] == old(sSBlock_USDX[this]) && sEBlock_USDX[this] == old(sEBlock_USDX[this]) && sCap_USDX[this] == old(sCap_USDX[this]) && sTot_USDX[this] == old(sTot_USDX[this]) && sChunk_USDX[this] == old(sChunk_USDX[this]) && sPrice_USDX[this] == old(sPrice_USDX[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 08:16:28,778 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2]) && aSBlock_USDX[this] == old(aSBlock_USDX[this]) && aEBlock_USDX[this] == old(aEBlock_USDX[this]) && aCap_USDX[this] == old(aCap_USDX[this]) && aTot_USDX[this] == old(aTot_USDX[this]) && aAmt_USDX[this] == old(aAmt_USDX[this]) && sSBlock_USDX[this] == old(sSBlock_USDX[this]) && sEBlock_USDX[this] == old(sEBlock_USDX[this]) && sCap_USDX[this] == old(sCap_USDX[this]) && sTot_USDX[this] == old(sTot_USDX[this]) && sChunk_USDX[this] == old(sChunk_USDX[this]) && sPrice_USDX[this] == old(sPrice_USDX[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 08:16:28,784 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s468 || p2!=msg.sender ) && from_s468==to_s468 ) && tokens_s468<=balances_TokenERC20[this][from_s468] ) && tokens_s468<=allowed_TokenERC20[this][from_s468][msg.sender] ) && tokens_s468>=0 ) && tokens_s468<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s468]>=0 ) && balances_TokenERC20[this][to_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][from_s468]>=0 ) && balances_TokenERC20[this][from_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_TokenERC20[this][from_s468][msg.sender]>=0 ) && allowed_TokenERC20[this][from_s468][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:16:28,787 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s468==true && allowed_TokenERC20[this][from_s468][msg.sender]==( ( old(allowed_TokenERC20[this][from_s468][msg.sender]) ) - tokens_s468 ) ) && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && balances_TokenERC20[this]==( old(balances_TokenERC20[this]) ) ) && allowed_TokenERC20[this][p1][p2]==( old(allowed_TokenERC20[this][p1][p2]) ) ) && aSBlock_USDX[this]==( old(aSBlock_USDX[this]) ) ) && aEBlock_USDX[this]==( old(aEBlock_USDX[this]) ) ) && aCap_USDX[this]==( old(aCap_USDX[this]) ) ) && aTot_USDX[this]==( old(aTot_USDX[this]) ) ) && aAmt_USDX[this]==( old(aAmt_USDX[this]) ) ) && sSBlock_USDX[this]==( old(sSBlock_USDX[this]) ) ) && sEBlock_USDX[this]==( old(sEBlock_USDX[this]) ) ) && sCap_USDX[this]==( old(sCap_USDX[this]) ) ) && sTot_USDX[this]==( old(sTot_USDX[this]) ) ) && sChunk_USDX[this]==( old(sChunk_USDX[this]) ) ) && sPrice_USDX[this]==( old(sPrice_USDX[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s468,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice_USDX,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]]
[2020-11-25 08:16:28,794 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2]) && aSBlock_USDX[this] == old(aSBlock_USDX[this]) && aEBlock_USDX[this] == old(aEBlock_USDX[this]) && aCap_USDX[this] == old(aCap_USDX[this]) && aTot_USDX[this] == old(aTot_USDX[this]) && aAmt_USDX[this] == old(aAmt_USDX[this]) && sSBlock_USDX[this] == old(sSBlock_USDX[this]) && sEBlock_USDX[this] == old(sEBlock_USDX[this]) && sCap_USDX[this] == old(sCap_USDX[this]) && sTot_USDX[this] == old(sTot_USDX[this]) && sChunk_USDX[this] == old(sChunk_USDX[this]) && sPrice_USDX[this] == old(sPrice_USDX[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 08:16:28,794 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(success_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:16:28,806 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:16:28 PropertyContainer
[2020-11-25 08:16:28,806 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:16:28,806 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:16:28,806 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:16:28,806 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:16:28,807 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/2) ...
[2020-11-25 08:16:28,807 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:16:28,807 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:16:28,823 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:16:28" (2/2) ...
[2020-11-25 08:16:28,824 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:16:28,824 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:16:28,824 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:16:28,824 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:16:28,825 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/2) ...
[2020-11-25 08:16:28,887 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:16:28,887 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:16:28,887 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:16:28,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:16:28,887 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,887 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 08:16:28,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 08:16:28,888 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 08:16:28,889 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 08:16:28,889 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 08:16:28,889 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 08:16:28,889 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 08:16:28,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 08:16:28,889 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 08:16:28,890 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 08:16:28,890 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 08:16:28,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 08:16:28,890 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 08:16:28,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 08:16:28,890 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 08:16:28,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 08:16:28,890 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 08:16:28,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 08:16:28,890 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 08:16:28,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 08:16:28,891 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 08:16:28,891 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 08:16:28,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 08:16:28,891 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 08:16:28,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 08:16:28,891 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 08:16:28,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 08:16:28,891 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 08:16:28,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 08:16:28,892 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 08:16:28,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 08:16:28,892 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 08:16:28,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 08:16:28,892 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 08:16:28,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 08:16:28,892 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 08:16:28,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 08:16:28,892 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 08:16:28,892 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 08:16:28,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 08:16:28,893 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 08:16:28,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 08:16:28,893 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 08:16:28,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 08:16:28,893 INFO  L130     BoogieDeclarations]: Found specification of procedure USDX_USDX_NoBaseCtor__success
[2020-11-25 08:16:28,893 INFO  L130     BoogieDeclarations]: Found specification of procedure USDX_USDX
[2020-11-25 08:16:28,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDX_USDX
[2020-11-25 08:16:28,893 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_USDX
[2020-11-25 08:16:28,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_USDX
[2020-11-25 08:16:28,893 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_USDX
[2020-11-25 08:16:28,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_USDX
[2020-11-25 08:16:28,894 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_USDX
[2020-11-25 08:16:28,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_USDX
[2020-11-25 08:16:28,894 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_USDX
[2020-11-25 08:16:28,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_USDX
[2020-11-25 08:16:28,894 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_USDX
[2020-11-25 08:16:28,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_USDX
[2020-11-25 08:16:28,894 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_USDX
[2020-11-25 08:16:28,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_USDX
[2020-11-25 08:16:28,894 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_USDX
[2020-11-25 08:16:28,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_USDX
[2020-11-25 08:16:28,895 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_USDX__success
[2020-11-25 08:16:28,895 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_USDX
[2020-11-25 08:16:28,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_USDX
[2020-11-25 08:16:28,895 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_USDX
[2020-11-25 08:16:28,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_USDX
[2020-11-25 08:16:28,895 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_USDX
[2020-11-25 08:16:28,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_USDX
[2020-11-25 08:16:28,895 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_USDX
[2020-11-25 08:16:28,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_USDX
[2020-11-25 08:16:28,896 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_USDX
[2020-11-25 08:16:28,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_USDX
[2020-11-25 08:16:28,896 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_USDX
[2020-11-25 08:16:28,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_USDX
[2020-11-25 08:16:28,896 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_USDX
[2020-11-25 08:16:28,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_USDX
[2020-11-25 08:16:28,896 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_USDX
[2020-11-25 08:16:28,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_USDX
[2020-11-25 08:16:28,896 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_USDX
[2020-11-25 08:16:28,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_USDX
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_USDX
[2020-11-25 08:16:28,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_USDX
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_USDX
[2020-11-25 08:16:28,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_USDX
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:16:28,897 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_USDX
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:16:28,898 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 08:16:28,899 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 08:16:28,900 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 08:16:28,901 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 08:16:28,902 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure USDX_USDX_NoBaseCtor__fail
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure USDX_USDX__success
[2020-11-25 08:16:28,903 INFO  L130     BoogieDeclarations]: Found specification of procedure USDX_USDX__fail
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_USDX__success
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_USDX__fail
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_USDX__success
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_USDX__fail
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_USDX__success
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_USDX__fail
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_USDX__success
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_USDX__fail
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_USDX__success
[2020-11-25 08:16:28,904 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_USDX__fail
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_USDX__success
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_USDX__fail
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_USDX__success
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_USDX__fail
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_USDX__fail
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_USDX__success
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_USDX__fail
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_USDX__success
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_USDX__fail
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_USDX__success
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_USDX__fail
[2020-11-25 08:16:28,905 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_USDX__success
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_USDX__fail
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_USDX__success
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_USDX__fail
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_USDX__success
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_USDX__fail
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_USDX__success
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_USDX__fail
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_USDX__success
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_USDX__fail
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_USDX__success
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_USDX__fail
[2020-11-25 08:16:28,906 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_USDX__success
[2020-11-25 08:16:28,907 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_USDX__fail
[2020-11-25 08:16:28,907 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_USDX__success
[2020-11-25 08:16:28,907 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_USDX__fail
[2020-11-25 08:16:28,907 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:16:28,907 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:16:28,907 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:16:28,907 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:16:28,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:16:28,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:16:28,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:16:28,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 08:16:28,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 08:16:28,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 08:16:28,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 08:16:28,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDX_USDX_NoBaseCtor__fail
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDX_USDX_NoBaseCtor__success
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDX_USDX__fail
[2020-11-25 08:16:28,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDX_USDX__success
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_USDX__fail
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_USDX__success
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_USDX__fail
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_USDX__success
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_USDX__fail
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_USDX__success
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_USDX__fail
[2020-11-25 08:16:28,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_USDX__success
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_USDX__fail
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_USDX__success
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_USDX__fail
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_USDX__success
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_USDX__fail
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_USDX__success
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_USDX__fail
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_USDX__success
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_USDX__fail
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_USDX__success
[2020-11-25 08:16:28,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_USDX__fail
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_USDX__success
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_USDX__fail
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_USDX__success
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_USDX__fail
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_USDX__success
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_USDX__fail
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_USDX__success
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_USDX__fail
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_USDX__success
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_USDX__fail
[2020-11-25 08:16:28,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_USDX__success
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_USDX__fail
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_USDX__success
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_USDX__fail
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_USDX__success
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_USDX__fail
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_USDX__success
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_USDX__fail
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_USDX__success
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:16:28,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 08:16:28,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 08:16:28,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 08:16:28,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_USDX
[2020-11-25 08:16:28,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:16:28,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:16:28,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:16:29,303 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:16:29,304 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:16:29,304 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:16:29,471 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:16:29,815 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:16:29,816 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 08:16:29,818 INFO  L202        PluginConnector]: Adding new model USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:16:29 BoogieIcfgContainer
[2020-11-25 08:16:29,818 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:16:28" (2/2) ...
[2020-11-25 08:16:29,818 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:16:29,818 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@27760749 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:16:29, skipping insertion in model container
[2020-11-25 08:16:29,818 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:16:29,819 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:16:29,819 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:16:29,820 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:16:29,820 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/3) ...
[2020-11-25 08:16:29,821 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@13f88764 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:16:29, skipping insertion in model container
[2020-11-25 08:16:29,821 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:16:28" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:16:29,855 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:16:29 NWAContainer
[2020-11-25 08:16:29,855 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:16:29,856 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:16:29,856 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:16:29,856 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:16:29,857 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:16:29" (3/4) ...
[2020-11-25 08:16:29,858 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7528914c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:16:29, skipping insertion in model container
[2020-11-25 08:16:29,858 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:16:29" (4/4) ...
[2020-11-25 08:16:29,861 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:16:29,867 INFO  L110   BuchiProductObserver]: Initial RCFG 3568 locations, 4644 edges
[2020-11-25 08:16:29,867 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:16:29,880 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:16:31,616 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:16:31,626 INFO  L110   BuchiProductObserver]: BuchiProgram size 8362 locations, 14617 edges
[2020-11-25 08:16:31,626 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:16:31 BoogieIcfgContainer
[2020-11-25 08:16:31,627 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:16:31,627 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:16:31,627 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:16:31,628 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:16:31,629 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:16:31" (1/1) ...
[2020-11-25 08:16:31,744 INFO  L313           BlockEncoder]: Initial Icfg 8362 locations, 14617 edges
[2020-11-25 08:16:31,744 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:16:31,744 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:16:31,745 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:16:31,745 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:16:31,759 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 08:16:31,773 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 08:16:31,790 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:16:31,794 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:16:31,798 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:16:31,799 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:16:31,803 INFO  L313           BlockEncoder]: Encoded RCFG 8306 locations, 14472 edges
[2020-11-25 08:16:31,803 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:16:31 BasicIcfg
[2020-11-25 08:16:31,803 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:16:31,804 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:16:31,804 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:16:31,805 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:16:31,805 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:16:31,806 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:16:28" (1/6) ...
[2020-11-25 08:16:31,807 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5704894f and model type USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:16:31, skipping insertion in model container
[2020-11-25 08:16:31,807 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:16:31,807 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:16:28" (2/6) ...
[2020-11-25 08:16:31,807 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5704894f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:16:31, skipping insertion in model container
[2020-11-25 08:16:31,807 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:16:31,807 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:16:29" (3/6) ...
[2020-11-25 08:16:31,808 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5704894f and model type USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:16:31, skipping insertion in model container
[2020-11-25 08:16:31,808 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:16:31,808 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:16:29" (4/6) ...
[2020-11-25 08:16:31,808 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5704894f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:16:31, skipping insertion in model container
[2020-11-25 08:16:31,808 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:16:31,808 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:16:31" (5/6) ...
[2020-11-25 08:16:31,808 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5704894f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:16:31, skipping insertion in model container
[2020-11-25 08:16:31,808 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:16:31,808 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:16:31" (6/6) ...
[2020-11-25 08:16:31,809 INFO  L404   chiAutomizerObserver]: Analyzing ICFG USDX_0xbec4a69d6a5fbcb2303c13d24ea1a51a6f19bd12_transferfrom-self.bpl_BEv2
[2020-11-25 08:16:31,843 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:16:31,843 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:16:31,843 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:16:31,843 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:16:31,843 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:16:31,843 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:16:31,843 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:16:31,843 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:16:31,843 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:16:31,903 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8306 states.
[2020-11-25 08:16:31,979 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:16:31,980 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:16:31,980 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:16:31,987 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:31,987 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:31,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:16:31,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8306 states.
[2020-11-25 08:16:32,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:16:32,023 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:16:32,024 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:16:32,025 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:32,025 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:16:32,039 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:16:32,039 INFO  L82        PathProgramCache]: Analyzing trace with hash 1506198368, now seen corresponding path program 1 times
[2020-11-25 08:16:32,042 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:16:32,061 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:16:32,097 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:16:32,099 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:16:32,099 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:16:32,550 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:16:32,567 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:16:32,568 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:16:32,569 INFO  L87              Difference]: Start difference. First operand 8306 states. Second operand 4 states.
[2020-11-25 08:16:33,474 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:16:33,474 INFO  L93              Difference]: Finished difference Result 7022 states and 8363 transitions.
[2020-11-25 08:16:33,474 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:16:33,475 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7022 states and 8363 transitions.
[2020-11-25 08:16:33,508 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:16:33,542 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7022 states to 7022 states and 8363 transitions.
[2020-11-25 08:16:33,543 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:16:33,544 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-25 08:16:33,544 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7022 states and 8363 transitions.
[2020-11-25 08:16:33,559 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:16:33,559 INFO  L728         BuchiCegarLoop]: Abstraction has 7022 states and 8363 transitions.
[2020-11-25 08:16:33,590 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7022 states and 8363 transitions.
[2020-11-25 08:16:33,700 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7022 to 7022.
[2020-11-25 08:16:33,700 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7022 states.
[2020-11-25 08:16:33,709 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7022 states to 7022 states and 8363 transitions.
[2020-11-25 08:16:33,709 INFO  L751         BuchiCegarLoop]: Abstraction has 7022 states and 8363 transitions.
[2020-11-25 08:16:33,710 INFO  L631         BuchiCegarLoop]: Abstraction has 7022 states and 8363 transitions.
[2020-11-25 08:16:33,710 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:16:33,710 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7022 states and 8363 transitions.
[2020-11-25 08:16:33,718 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:16:33,718 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:16:33,718 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:16:33,721 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:33,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND TRUE   revert
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:16:33,726 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:16:33,726 INFO  L82        PathProgramCache]: Analyzing trace with hash -593157350, now seen corresponding path program 1 times
[2020-11-25 08:16:33,727 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:16:33,739 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:16:33,765 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:16:33,765 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:16:33,765 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:16:33,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:16:33,767 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:16:33,767 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:16:33,767 INFO  L87              Difference]: Start difference. First operand 7022 states and 8363 transitions. cyclomatic complexity: 1347 Second operand 3 states.
[2020-11-25 08:16:33,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:16:33,896 INFO  L93              Difference]: Finished difference Result 8382 states and 10050 transitions.
[2020-11-25 08:16:33,896 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:16:33,896 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8382 states and 10050 transitions.
[2020-11-25 08:16:33,922 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:16:33,960 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8382 states to 8066 states and 9516 transitions.
[2020-11-25 08:16:33,960 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 306
[2020-11-25 08:16:33,961 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 306
[2020-11-25 08:16:33,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8066 states and 9516 transitions.
[2020-11-25 08:16:33,969 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:16:33,970 INFO  L728         BuchiCegarLoop]: Abstraction has 8066 states and 9516 transitions.
[2020-11-25 08:16:33,977 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8066 states and 9516 transitions.
[2020-11-25 08:16:34,090 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8066 to 7186.
[2020-11-25 08:16:34,090 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7186 states.
[2020-11-25 08:16:34,098 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7186 states to 7186 states and 8414 transitions.
[2020-11-25 08:16:34,098 INFO  L751         BuchiCegarLoop]: Abstraction has 7186 states and 8414 transitions.
[2020-11-25 08:16:34,098 INFO  L631         BuchiCegarLoop]: Abstraction has 7186 states and 8414 transitions.
[2020-11-25 08:16:34,098 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:16:34,098 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7186 states and 8414 transitions.
[2020-11-25 08:16:34,106 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:16:34,106 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:16:34,106 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:16:34,108 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:34,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:16:34,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:16:34,118 INFO  L82        PathProgramCache]: Analyzing trace with hash -1171317698, now seen corresponding path program 1 times
[2020-11-25 08:16:34,119 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:16:34,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:16:34,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 08:16:34,265 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:16:34,265 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:16:34,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:16:34,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:16:34,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:16:34,266 INFO  L87              Difference]: Start difference. First operand 7186 states and 8414 transitions. cyclomatic complexity: 1234 Second operand 7 states.
[2020-11-25 08:16:35,999 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:16:35,999 INFO  L93              Difference]: Finished difference Result 7694 states and 8987 transitions.
[2020-11-25 08:16:36,000 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:16:36,000 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7694 states and 8987 transitions.
[2020-11-25 08:16:36,012 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:16:36,037 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7694 states to 7694 states and 8987 transitions.
[2020-11-25 08:16:36,037 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 355
[2020-11-25 08:16:36,038 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 355
[2020-11-25 08:16:36,038 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7694 states and 8987 transitions.
[2020-11-25 08:16:36,044 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:16:36,044 INFO  L728         BuchiCegarLoop]: Abstraction has 7694 states and 8987 transitions.
[2020-11-25 08:16:36,050 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7694 states and 8987 transitions.
[2020-11-25 08:16:36,100 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7694 to 7264.
[2020-11-25 08:16:36,100 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7264 states.
[2020-11-25 08:16:36,107 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7264 states to 7264 states and 8502 transitions.
[2020-11-25 08:16:36,107 INFO  L751         BuchiCegarLoop]: Abstraction has 7264 states and 8502 transitions.
[2020-11-25 08:16:36,107 INFO  L631         BuchiCegarLoop]: Abstraction has 7264 states and 8502 transitions.
[2020-11-25 08:16:36,107 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:16:36,107 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7264 states and 8502 transitions.
[2020-11-25 08:16:36,114 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:16:36,114 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:16:36,114 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:16:36,117 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:36,117 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:16:36,120 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:16:36,121 INFO  L82        PathProgramCache]: Analyzing trace with hash 461476597, now seen corresponding path program 1 times
[2020-11-25 08:16:36,121 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:16:36,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:16:36,165 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 08:16:36,166 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:16:36,166 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:16:36,166 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:16:36,166 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:16:36,166 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:16:36,166 INFO  L87              Difference]: Start difference. First operand 7264 states and 8502 transitions. cyclomatic complexity: 1244 Second operand 5 states.
[2020-11-25 08:16:36,400 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:16:36,400 INFO  L93              Difference]: Finished difference Result 8160 states and 9478 transitions.
[2020-11-25 08:16:36,400 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:16:36,401 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8160 states and 9478 transitions.
[2020-11-25 08:16:36,416 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:16:36,435 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8160 states to 8160 states and 9478 transitions.
[2020-11-25 08:16:36,436 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 317
[2020-11-25 08:16:36,436 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 317
[2020-11-25 08:16:36,436 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8160 states and 9478 transitions.
[2020-11-25 08:16:36,441 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:16:36,441 INFO  L728         BuchiCegarLoop]: Abstraction has 8160 states and 9478 transitions.
[2020-11-25 08:16:36,447 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8160 states and 9478 transitions.
[2020-11-25 08:16:36,505 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8160 to 7499.
[2020-11-25 08:16:36,505 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7499 states.
[2020-11-25 08:16:36,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7499 states to 7499 states and 8661 transitions.
[2020-11-25 08:16:36,513 INFO  L751         BuchiCegarLoop]: Abstraction has 7499 states and 8661 transitions.
[2020-11-25 08:16:36,513 INFO  L631         BuchiCegarLoop]: Abstraction has 7499 states and 8661 transitions.
[2020-11-25 08:16:36,513 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:16:36,513 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7499 states and 8661 transitions.
[2020-11-25 08:16:36,521 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:16:36,521 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:16:36,521 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:16:36,523 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:36,523 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:16:36,527 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:16:36,527 INFO  L82        PathProgramCache]: Analyzing trace with hash 100643895, now seen corresponding path program 1 times
[2020-11-25 08:16:36,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:16:36,598 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:16:37,227 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification. DAG size of input: 90 DAG size of output: 63
[2020-11-25 08:16:37,484 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 68
[2020-11-25 08:16:38,159 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 08:16:38,159 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:16:38,159 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 08:16:38,159 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:16:38,160 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 08:16:38,160 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=640, Unknown=0, NotChecked=0, Total=702
[2020-11-25 08:16:38,160 INFO  L87              Difference]: Start difference. First operand 7499 states and 8661 transitions. cyclomatic complexity: 1168 Second operand 27 states.
[2020-11-25 08:16:59,446 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:16:59,447 INFO  L93              Difference]: Finished difference Result 7670 states and 8863 transitions.
[2020-11-25 08:16:59,447 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 08:16:59,447 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7670 states and 8863 transitions.
[2020-11-25 08:16:59,460 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:16:59,477 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7670 states to 7670 states and 8863 transitions.
[2020-11-25 08:16:59,477 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 353
[2020-11-25 08:16:59,477 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 353
[2020-11-25 08:16:59,477 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7670 states and 8863 transitions.
[2020-11-25 08:16:59,482 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:16:59,482 INFO  L728         BuchiCegarLoop]: Abstraction has 7670 states and 8863 transitions.
[2020-11-25 08:16:59,489 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7670 states and 8863 transitions.
[2020-11-25 08:16:59,533 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7670 to 7617.
[2020-11-25 08:16:59,533 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7617 states.
[2020-11-25 08:16:59,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7617 states to 7617 states and 8802 transitions.
[2020-11-25 08:16:59,540 INFO  L751         BuchiCegarLoop]: Abstraction has 7617 states and 8802 transitions.
[2020-11-25 08:16:59,540 INFO  L631         BuchiCegarLoop]: Abstraction has 7617 states and 8802 transitions.
[2020-11-25 08:16:59,540 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:16:59,541 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7617 states and 8802 transitions.
[2020-11-25 08:16:59,547 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:16:59,547 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:16:59,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:16:59,548 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:16:59,548 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:16:59,551 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:16:59,552 INFO  L82        PathProgramCache]: Analyzing trace with hash 2130307292, now seen corresponding path program 1 times
[2020-11-25 08:16:59,552 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:16:59,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:16:59,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 08:16:59,605 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:16:59,605 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:16:59,605 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:16:59,605 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:16:59,605 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:16:59,605 INFO  L87              Difference]: Start difference. First operand 7617 states and 8802 transitions. cyclomatic complexity: 1193 Second operand 7 states.
[2020-11-25 08:17:01,056 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:17:01,056 INFO  L93              Difference]: Finished difference Result 7943 states and 9175 transitions.
[2020-11-25 08:17:01,056 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:17:01,056 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7943 states and 9175 transitions.
[2020-11-25 08:17:01,072 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 08:17:01,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7943 states to 7943 states and 9175 transitions.
[2020-11-25 08:17:01,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 439
[2020-11-25 08:17:01,090 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 439
[2020-11-25 08:17:01,090 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7943 states and 9175 transitions.
[2020-11-25 08:17:01,095 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:17:01,095 INFO  L728         BuchiCegarLoop]: Abstraction has 7943 states and 9175 transitions.
[2020-11-25 08:17:01,101 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7943 states and 9175 transitions.
[2020-11-25 08:17:01,144 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7943 to 7478.
[2020-11-25 08:17:01,145 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7478 states.
[2020-11-25 08:17:01,152 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7478 states to 7478 states and 8586 transitions.
[2020-11-25 08:17:01,152 INFO  L751         BuchiCegarLoop]: Abstraction has 7478 states and 8586 transitions.
[2020-11-25 08:17:01,152 INFO  L631         BuchiCegarLoop]: Abstraction has 7478 states and 8586 transitions.
[2020-11-25 08:17:01,152 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:17:01,152 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7478 states and 8586 transitions.
[2020-11-25 08:17:01,159 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:17:01,159 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:17:01,159 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:17:01,160 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:17:01,161 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:17:01,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:17:01,164 INFO  L82        PathProgramCache]: Analyzing trace with hash -1140675961, now seen corresponding path program 1 times
[2020-11-25 08:17:01,165 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:17:01,175 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:17:01,279 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 25 trivial. 0 not checked.
[2020-11-25 08:17:01,279 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:17:01,279 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 08:17:01,280 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:17:01,280 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 08:17:01,280 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 08:17:01,280 INFO  L87              Difference]: Start difference. First operand 7478 states and 8586 transitions. cyclomatic complexity: 1116 Second operand 17 states.
[2020-11-25 08:17:05,801 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:17:05,802 INFO  L93              Difference]: Finished difference Result 7559 states and 8688 transitions.
[2020-11-25 08:17:05,802 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 08:17:05,802 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7559 states and 8688 transitions.
[2020-11-25 08:17:05,814 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:17:05,827 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7559 states to 7559 states and 8688 transitions.
[2020-11-25 08:17:05,827 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 385
[2020-11-25 08:17:05,828 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 385
[2020-11-25 08:17:05,828 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7559 states and 8688 transitions.
[2020-11-25 08:17:05,831 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:17:05,831 INFO  L728         BuchiCegarLoop]: Abstraction has 7559 states and 8688 transitions.
[2020-11-25 08:17:05,837 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7559 states and 8688 transitions.
[2020-11-25 08:17:05,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7559 to 7546.
[2020-11-25 08:17:05,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7546 states.
[2020-11-25 08:17:05,879 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7546 states to 7546 states and 8671 transitions.
[2020-11-25 08:17:05,879 INFO  L751         BuchiCegarLoop]: Abstraction has 7546 states and 8671 transitions.
[2020-11-25 08:17:05,879 INFO  L631         BuchiCegarLoop]: Abstraction has 7546 states and 8671 transitions.
[2020-11-25 08:17:05,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:17:05,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7546 states and 8671 transitions.
[2020-11-25 08:17:05,886 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:17:05,886 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:17:05,886 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:17:05,887 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:17:05,887 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND FALSE  !(!(c_s23 >= a_s23))
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND FALSE  !(revert)
[L4540]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s468];
[L4541]              __tmp__balances_TokenERC20[this][to_s468] := __var_9;
[L4542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s468];
[L4543]              success_s468 := true;
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND FALSE  !(!(c_s23 >= a_s23))
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND FALSE  !(revert)
[L4540]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s468];
[L4541]              __tmp__balances_TokenERC20[this][to_s468] := __var_9;
[L4542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s468];
[L4543]              success_s468 := true;
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:17:05,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:17:05,891 INFO  L82        PathProgramCache]: Analyzing trace with hash -136995451, now seen corresponding path program 1 times
[2020-11-25 08:17:05,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:17:05,901 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:17:05,932 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 08:17:05,932 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:17:05,932 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:17:05,933 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:17:05,933 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:17:05,933 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:17:05,933 INFO  L87              Difference]: Start difference. First operand 7546 states and 8671 transitions. cyclomatic complexity: 1135 Second operand 5 states.
[2020-11-25 08:17:07,208 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:17:07,208 INFO  L93              Difference]: Finished difference Result 8889 states and 10293 transitions.
[2020-11-25 08:17:07,208 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:17:07,208 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8889 states and 10293 transitions.
[2020-11-25 08:17:07,226 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:17:07,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8889 states to 7319 states and 8562 transitions.
[2020-11-25 08:17:07,245 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 308
[2020-11-25 08:17:07,245 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 308
[2020-11-25 08:17:07,245 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7319 states and 8562 transitions.
[2020-11-25 08:17:07,249 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:17:07,249 INFO  L728         BuchiCegarLoop]: Abstraction has 7319 states and 8562 transitions.
[2020-11-25 08:17:07,254 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7319 states and 8562 transitions.
[2020-11-25 08:17:07,288 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7319 to 5888.
[2020-11-25 08:17:07,288 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5888 states.
[2020-11-25 08:17:07,294 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5888 states to 5888 states and 6771 transitions.
[2020-11-25 08:17:07,294 INFO  L751         BuchiCegarLoop]: Abstraction has 5888 states and 6771 transitions.
[2020-11-25 08:17:07,294 INFO  L631         BuchiCegarLoop]: Abstraction has 5888 states and 6771 transitions.
[2020-11-25 08:17:07,294 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:17:07,294 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5888 states and 6771 transitions.
[2020-11-25 08:17:07,299 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:17:07,300 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:17:07,300 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:17:07,301 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:17:07,301 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_USDX(this);
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:17:07,305 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:17:07,305 INFO  L82        PathProgramCache]: Analyzing trace with hash -691361819, now seen corresponding path program 1 times
[2020-11-25 08:17:07,305 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:17:07,359 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:17:08,168 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 3 proven. 1 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 08:17:08,168 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:17:08,168 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 08:17:08,169 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:17:08,169 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 08:17:08,169 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=839, Unknown=0, NotChecked=0, Total=930
[2020-11-25 08:17:08,169 INFO  L87              Difference]: Start difference. First operand 5888 states and 6771 transitions. cyclomatic complexity: 891 Second operand 31 states.
[2020-11-25 08:17:21,003 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:17:21,003 INFO  L93              Difference]: Finished difference Result 5993 states and 6909 transitions.
[2020-11-25 08:17:21,003 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 08:17:21,003 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5993 states and 6909 transitions.
[2020-11-25 08:17:21,013 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:17:21,023 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5993 states to 5993 states and 6909 transitions.
[2020-11-25 08:17:21,023 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 251
[2020-11-25 08:17:21,023 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 251
[2020-11-25 08:17:21,023 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5993 states and 6909 transitions.
[2020-11-25 08:17:21,026 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:17:21,026 INFO  L728         BuchiCegarLoop]: Abstraction has 5993 states and 6909 transitions.
[2020-11-25 08:17:21,030 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5993 states and 6909 transitions.
[2020-11-25 08:17:21,055 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5993 to 5931.
[2020-11-25 08:17:21,055 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5931 states.
[2020-11-25 08:17:21,060 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5931 states to 5931 states and 6826 transitions.
[2020-11-25 08:17:21,060 INFO  L751         BuchiCegarLoop]: Abstraction has 5931 states and 6826 transitions.
[2020-11-25 08:17:21,060 INFO  L631         BuchiCegarLoop]: Abstraction has 5931 states and 6826 transitions.
[2020-11-25 08:17:21,060 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:17:21,060 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5931 states and 6826 transitions.
[2020-11-25 08:17:21,065 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:17:21,065 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:17:21,065 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:17:21,066 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:17:21,066 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND TRUE   choice == 19
[L7542]              gas := gas - 21000;
[L7543]  COND TRUE   gas >= 0
[L7544]              assume tokens_s527 >= 0 && tokens_s527 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7545]              assume msgvalue_MSG == 0;
[L7546]  CALL        call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L1291]              havoc __exception;
[L1292]              revert := false;
[L1293]  COND FALSE  !(__exception)
[L1327]  CALL        call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L4611]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s527];
[L4612]              allowed_TokenERC20[this][msgsender_MSG][spender_s527] := tokens_s527;
[L4613]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s527];
[L4614]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4615]              assume DType[spender_s527] == ApproveAndCallFallBack;
[L4616]              __var_10 := spender_s527;
[L4617]              __var_12 := this;
[L4619]              success_s527 := true;
[L1327]  RET         call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L1328]              assume !revert && gas >= 0;
[L7546]  RET         call success_s527 := approveAndCall~address~uint256~bytes_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s527, tokens_s527, data_s527);
[L7683]  RET         call CorralChoice_USDX(this);
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:17:21,070 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:17:21,070 INFO  L82        PathProgramCache]: Analyzing trace with hash -1337873833, now seen corresponding path program 1 times
[2020-11-25 08:17:21,070 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:17:21,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:17:21,815 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 11 proven. 3 refuted. 0 times theorem prover too weak. 99 trivial. 0 not checked.
[2020-11-25 08:17:21,816 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:17:21,816 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 08:17:21,816 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:17:21,816 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 08:17:21,816 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=108, Invalid=1014, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 08:17:21,817 INFO  L87              Difference]: Start difference. First operand 5931 states and 6826 transitions. cyclomatic complexity: 905 Second operand 34 states.
[2020-11-25 08:17:36,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:17:36,851 INFO  L93              Difference]: Finished difference Result 6001 states and 6933 transitions.
[2020-11-25 08:17:36,851 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 08:17:36,851 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6001 states and 6933 transitions.
[2020-11-25 08:17:36,861 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:17:36,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6001 states to 6001 states and 6933 transitions.
[2020-11-25 08:17:36,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 253
[2020-11-25 08:17:36,871 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 253
[2020-11-25 08:17:36,871 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6001 states and 6933 transitions.
[2020-11-25 08:17:36,874 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:17:36,874 INFO  L728         BuchiCegarLoop]: Abstraction has 6001 states and 6933 transitions.
[2020-11-25 08:17:36,878 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6001 states and 6933 transitions.
[2020-11-25 08:17:36,900 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6001 to 5931.
[2020-11-25 08:17:36,900 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5931 states.
[2020-11-25 08:17:36,906 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5931 states to 5931 states and 6826 transitions.
[2020-11-25 08:17:36,906 INFO  L751         BuchiCegarLoop]: Abstraction has 5931 states and 6826 transitions.
[2020-11-25 08:17:36,906 INFO  L631         BuchiCegarLoop]: Abstraction has 5931 states and 6826 transitions.
[2020-11-25 08:17:36,906 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:17:36,906 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5931 states and 6826 transitions.
[2020-11-25 08:17:36,910 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:17:36,910 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:17:36,910 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:17:36,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:17:36,912 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_USDX(this);
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:17:36,915 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:17:36,915 INFO  L82        PathProgramCache]: Analyzing trace with hash -75790411, now seen corresponding path program 1 times
[2020-11-25 08:17:36,915 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:17:36,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:17:37,089 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 08:17:37,090 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:17:37,090 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 08:17:37,090 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:17:37,090 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 08:17:37,090 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=414, Unknown=0, NotChecked=0, Total=462
[2020-11-25 08:17:37,090 INFO  L87              Difference]: Start difference. First operand 5931 states and 6826 transitions. cyclomatic complexity: 905 Second operand 22 states.
[2020-11-25 08:17:44,893 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:17:44,893 INFO  L93              Difference]: Finished difference Result 6293 states and 7291 transitions.
[2020-11-25 08:17:44,894 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 08:17:44,894 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6293 states and 7291 transitions.
[2020-11-25 08:17:44,905 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:17:44,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6293 states to 6293 states and 7291 transitions.
[2020-11-25 08:17:44,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 271
[2020-11-25 08:17:44,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 271
[2020-11-25 08:17:44,917 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6293 states and 7291 transitions.
[2020-11-25 08:17:44,920 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:17:44,920 INFO  L728         BuchiCegarLoop]: Abstraction has 6293 states and 7291 transitions.
[2020-11-25 08:17:44,924 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6293 states and 7291 transitions.
[2020-11-25 08:17:44,948 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6293 to 5919.
[2020-11-25 08:17:44,948 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5919 states.
[2020-11-25 08:17:44,953 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5919 states to 5919 states and 6819 transitions.
[2020-11-25 08:17:44,953 INFO  L751         BuchiCegarLoop]: Abstraction has 5919 states and 6819 transitions.
[2020-11-25 08:17:44,953 INFO  L631         BuchiCegarLoop]: Abstraction has 5919 states and 6819 transitions.
[2020-11-25 08:17:44,953 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:17:44,953 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5919 states and 6819 transitions.
[2020-11-25 08:17:44,958 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:17:44,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:17:44,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:17:44,959 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:17:44,960 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_USDX(this);
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:17:44,964 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:17:44,964 INFO  L82        PathProgramCache]: Analyzing trace with hash -1598501245, now seen corresponding path program 1 times
[2020-11-25 08:17:44,965 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:17:45,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:17:45,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 111 backedges. 84 proven. 2 refuted. 0 times theorem prover too weak. 25 trivial. 0 not checked.
[2020-11-25 08:17:45,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:17:45,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 08:17:45,675 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:17:45,675 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 08:17:45,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=542, Unknown=0, NotChecked=0, Total=600
[2020-11-25 08:17:45,676 INFO  L87              Difference]: Start difference. First operand 5919 states and 6819 transitions. cyclomatic complexity: 910 Second operand 25 states.
[2020-11-25 08:17:58,759 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:17:58,760 INFO  L93              Difference]: Finished difference Result 6030 states and 6938 transitions.
[2020-11-25 08:17:58,760 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 08:17:58,760 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6030 states and 6938 transitions.
[2020-11-25 08:17:58,770 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:17:58,780 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6030 states to 6030 states and 6938 transitions.
[2020-11-25 08:17:58,780 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 245
[2020-11-25 08:17:58,781 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 245
[2020-11-25 08:17:58,781 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6030 states and 6938 transitions.
[2020-11-25 08:17:58,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:17:58,783 INFO  L728         BuchiCegarLoop]: Abstraction has 6030 states and 6938 transitions.
[2020-11-25 08:17:58,787 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6030 states and 6938 transitions.
[2020-11-25 08:17:58,808 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6030 to 5919.
[2020-11-25 08:17:58,808 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5919 states.
[2020-11-25 08:17:58,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5919 states to 5919 states and 6817 transitions.
[2020-11-25 08:17:58,813 INFO  L751         BuchiCegarLoop]: Abstraction has 5919 states and 6817 transitions.
[2020-11-25 08:17:58,813 INFO  L631         BuchiCegarLoop]: Abstraction has 5919 states and 6817 transitions.
[2020-11-25 08:17:58,813 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:17:58,813 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5919 states and 6817 transitions.
[2020-11-25 08:17:58,818 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:17:58,818 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:17:58,818 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:17:58,819 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:17:58,819 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND FALSE  !(choice == 7)
[L7620]  COND FALSE  !(choice == 6)
[L7626]  COND FALSE  !(choice == 5)
[L7632]  COND FALSE  !(choice == 4)
[L7638]  COND FALSE  !(choice == 3)
[L7648]  COND FALSE  !(choice == 2)
[L7659]  COND TRUE   choice == 1
[L7660]              gas := gas - 21000;
[L7661]  COND TRUE   gas >= 0
[L7662]              assume msgvalue_MSG == 0;
[L7663]  CALL        call clearETH_USDX(this, msgsender_MSG, msgvalue_MSG);
[L2213]              havoc __exception;
[L2214]              revert := false;
[L2215]  COND FALSE  !(__exception)
[L2249]  CALL        call clearETH_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6829]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5186]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]              _owner_s986 := msgsender_MSG;
[L5191]              __var_31 := gas;
[L5192]  COND FALSE  !(gas > 2300)
[L5195]              __var_31 := __var_31 - gas;
[L5196]              __var_32 := this;
[L5197]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6770]              havoc __exception;
[L6771]  COND FALSE  !(__exception)
[L6809]  COND TRUE   Balance[from] >= amount
[L6810]  CALL        call FallbackDispatch__success(from, to, amount);
[L5383]  COND FALSE  !(DType[to] == USDX)
[L5388]  COND FALSE  !(DType[to] == TokenERC20)
[L5393]  COND FALSE  !(DType[to] == Owned)
[L5395]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5397]  COND FALSE  !(DType[to] == ERC20Interface)
[L5400]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6118]              assume Balance[from] >= amount;
[L6119]              Balance[from] := Balance[from] - amount;
[L6120]              Balance[to] := Balance[to] + amount;
[L6122]  COND FALSE  !(choice == 0)
[L6126]  COND FALSE  !(gas < 21000)
[L6129]  COND TRUE   DType[from] == USDX
[L6130]  COND FALSE  !(choice == 32)
[L6139]  COND FALSE  !(choice == 31)
[L6148]  COND FALSE  !(choice == 30)
[L6157]  COND FALSE  !(choice == 29)
[L6167]  COND TRUE   choice == 28
[L6168]              gas := gas - 21000;
[L6169]  COND TRUE   gas >= 0
[L6170]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6171]              assume msgvalue_MSG == 0;
[L6172]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L6172]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, spender_s409, tokens_s409);
[L6173]  COND FALSE  !(revert)
[L5400]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5401]  COND FALSE  !(revert)
[L6810]  RET         call FallbackDispatch__success(from, to, amount);
[L6811]              success := true;
[L6815]              assume !revert && gas >= 0;
[L5197]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5198]  COND FALSE  !(!__var_33)
[L5202]              gas := __var_31 + gas;
[L2249]  RET         call clearETH_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]              assume !revert && gas >= 0;
[L7663]  RET         call clearETH_USDX(this, msgsender_MSG, msgvalue_MSG);
[L7683]  RET         call CorralChoice_USDX(this);
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:17:58,823 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:17:58,824 INFO  L82        PathProgramCache]: Analyzing trace with hash 1514611050, now seen corresponding path program 1 times
[2020-11-25 08:17:58,824 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:17:58,844 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:17:58,973 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 17 refuted. 0 times theorem prover too weak. 95 trivial. 0 not checked.
[2020-11-25 08:17:58,973 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:17:58,973 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:17:58,974 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:17:58,974 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:17:58,974 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=14, Invalid=28, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:17:58,974 INFO  L87              Difference]: Start difference. First operand 5919 states and 6817 transitions. cyclomatic complexity: 908 Second operand 7 states.
[2020-11-25 08:18:00,053 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:18:00,053 INFO  L93              Difference]: Finished difference Result 7959 states and 8979 transitions.
[2020-11-25 08:18:00,053 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:18:00,053 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7959 states and 8979 transitions.
[2020-11-25 08:18:00,067 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:18:00,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7959 states to 7827 states and 8847 transitions.
[2020-11-25 08:18:00,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 232
[2020-11-25 08:18:00,083 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 715
[2020-11-25 08:18:00,083 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7827 states and 8847 transitions.
[2020-11-25 08:18:00,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:18:00,086 INFO  L728         BuchiCegarLoop]: Abstraction has 7827 states and 8847 transitions.
[2020-11-25 08:18:00,091 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7827 states and 8847 transitions.
[2020-11-25 08:18:00,122 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7827 to 7369.
[2020-11-25 08:18:00,122 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7369 states.
[2020-11-25 08:18:00,129 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7369 states to 7369 states and 8257 transitions.
[2020-11-25 08:18:00,129 INFO  L751         BuchiCegarLoop]: Abstraction has 7369 states and 8257 transitions.
[2020-11-25 08:18:00,129 INFO  L631         BuchiCegarLoop]: Abstraction has 7369 states and 8257 transitions.
[2020-11-25 08:18:00,129 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 08:18:00,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7369 states and 8257 transitions.
[2020-11-25 08:18:00,135 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:18:00,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:18:00,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:18:00,136 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:18:00,136 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND FALSE  !(choice == 27)
[L7499]  COND FALSE  !(choice == 26)
[L7505]  COND FALSE  !(choice == 25)
[L7511]  COND FALSE  !(choice == 24)
[L7517]  COND FALSE  !(choice == 23)
[L7523]  COND FALSE  !(choice == 22)
[L7529]  COND FALSE  !(choice == 21)
[L7535]  COND FALSE  !(choice == 20)
[L7541]  COND FALSE  !(choice == 19)
[L7548]  COND FALSE  !(choice == 18)
[L7554]  COND FALSE  !(choice == 17)
[L7560]  COND FALSE  !(choice == 16)
[L7566]  COND FALSE  !(choice == 15)
[L7572]  COND FALSE  !(choice == 14)
[L7578]  COND FALSE  !(choice == 13)
[L7584]  COND FALSE  !(choice == 12)
[L7590]  COND FALSE  !(choice == 11)
[L7596]  COND FALSE  !(choice == 10)
[L7602]  COND FALSE  !(choice == 9)
[L7608]  COND FALSE  !(choice == 8)
[L7614]  COND FALSE  !(choice == 7)
[L7620]  COND FALSE  !(choice == 6)
[L7626]  COND FALSE  !(choice == 5)
[L7632]  COND FALSE  !(choice == 4)
[L7638]  COND FALSE  !(choice == 3)
[L7648]  COND FALSE  !(choice == 2)
[L7659]  COND TRUE   choice == 1
[L7660]              gas := gas - 21000;
[L7661]  COND TRUE   gas >= 0
[L7662]              assume msgvalue_MSG == 0;
[L7663]  CALL        call clearETH_USDX(this, msgsender_MSG, msgvalue_MSG);
[L2213]              havoc __exception;
[L2214]              revert := false;
[L2215]  COND FALSE  !(__exception)
[L2249]  CALL        call clearETH_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6829]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5186]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]              _owner_s986 := msgsender_MSG;
[L5191]              __var_31 := gas;
[L5192]  COND TRUE   gas > 2300
[L5193]              gas := 2300;
[L5195]              __var_31 := __var_31 - gas;
[L5196]              __var_32 := this;
[L5197]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6770]              havoc __exception;
[L6771]  COND FALSE  !(__exception)
[L6809]  COND TRUE   Balance[from] >= amount
[L6810]  CALL        call FallbackDispatch__success(from, to, amount);
[L5383]  COND FALSE  !(DType[to] == USDX)
[L5388]  COND FALSE  !(DType[to] == TokenERC20)
[L5393]  COND FALSE  !(DType[to] == Owned)
[L5395]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5397]  COND FALSE  !(DType[to] == ERC20Interface)
[L5400]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6118]              assume Balance[from] >= amount;
[L6119]              Balance[from] := Balance[from] - amount;
[L6120]              Balance[to] := Balance[to] + amount;
[L6122]  COND FALSE  !(choice == 0)
[L6126]  COND FALSE  !(gas < 21000)
[L6129]  COND TRUE   DType[from] == USDX
[L6130]  COND FALSE  !(choice == 32)
[L6139]  COND FALSE  !(choice == 31)
[L6148]  COND FALSE  !(choice == 30)
[L6157]  COND FALSE  !(choice == 29)
[L6167]  COND TRUE   choice == 28
[L6168]              gas := gas - 21000;
[L6169]  COND TRUE   gas >= 0
[L6170]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6171]              assume msgvalue_MSG == 0;
[L6172]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L6172]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, spender_s409, tokens_s409);
[L6173]  COND FALSE  !(revert)
[L5400]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5401]  COND FALSE  !(revert)
[L6810]  RET         call FallbackDispatch__success(from, to, amount);
[L6811]              success := true;
[L6815]              assume !revert && gas >= 0;
[L5197]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5198]  COND FALSE  !(!__var_33)
[L5202]              gas := __var_31 + gas;
[L2249]  RET         call clearETH_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L2250]              assume !revert && gas >= 0;
[L7663]  RET         call clearETH_USDX(this, msgsender_MSG, msgvalue_MSG);
[L7683]  RET         call CorralChoice_USDX(this);
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_USDX := aSBlock_USDX;
[L1160]              __tmp__aEBlock_USDX := aEBlock_USDX;
[L1161]              __tmp__aCap_USDX := aCap_USDX;
[L1162]              __tmp__aTot_USDX := aTot_USDX;
[L1163]              __tmp__aAmt_USDX := aAmt_USDX;
[L1164]              __tmp__sSBlock_USDX := sSBlock_USDX;
[L1165]              __tmp__sEBlock_USDX := sEBlock_USDX;
[L1166]              __tmp__sCap_USDX := sCap_USDX;
[L1167]              __tmp__sTot_USDX := sTot_USDX;
[L1168]              __tmp__sChunk_USDX := sChunk_USDX;
[L1169]              __tmp__sPrice_USDX := sPrice_USDX;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:18:00,141 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:18:00,141 INFO  L82        PathProgramCache]: Analyzing trace with hash 1067639133, now seen corresponding path program 1 times
[2020-11-25 08:18:00,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:18:00,156 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:18:00,229 INFO  L134       CoverageAnalysis]: Checked inductivity of 113 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 08:18:00,229 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:18:00,229 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:18:00,229 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:18:00,229 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:18:00,229 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:18:00,229 INFO  L87              Difference]: Start difference. First operand 7369 states and 8257 transitions. cyclomatic complexity: 898 Second operand 6 states.
[2020-11-25 08:18:00,998 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:18:00,998 INFO  L93              Difference]: Finished difference Result 3792 states and 4088 transitions.
[2020-11-25 08:18:00,999 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 08:18:00,999 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3792 states and 4088 transitions.
[2020-11-25 08:18:01,005 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:18:01,011 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3792 states to 3792 states and 4088 transitions.
[2020-11-25 08:18:01,012 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 715
[2020-11-25 08:18:01,012 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1155
[2020-11-25 08:18:01,012 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3792 states and 4088 transitions.
[2020-11-25 08:18:01,014 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:18:01,014 INFO  L728         BuchiCegarLoop]: Abstraction has 3792 states and 4088 transitions.
[2020-11-25 08:18:01,016 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3792 states and 4088 transitions.
[2020-11-25 08:18:01,028 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3792 to 3616.
[2020-11-25 08:18:01,029 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3616 states.
[2020-11-25 08:18:01,031 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3616 states to 3616 states and 3873 transitions.
[2020-11-25 08:18:01,031 INFO  L751         BuchiCegarLoop]: Abstraction has 3616 states and 3873 transitions.
[2020-11-25 08:18:01,031 INFO  L631         BuchiCegarLoop]: Abstraction has 3616 states and 3873 transitions.
[2020-11-25 08:18:01,031 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 08:18:01,032 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3616 states and 3873 transitions.
[2020-11-25 08:18:01,035 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:18:01,035 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:18:01,035 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:18:01,036 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:18:01,036 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == USDX;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := 795806508;
[L4362]              name_TokenERC20[this] := 795806508;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -1403127613;
[L4371]              name_TokenERC20[this] := -1403127613;
[L4372]              decimals_TokenERC20[this] := 0;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_USDX[this] := 0;
[L4706]              aEBlock_USDX[this] := 0;
[L4707]              aCap_USDX[this] := 0;
[L4708]              aTot_USDX[this] := 0;
[L4709]              aAmt_USDX[this] := 0;
[L4710]              sSBlock_USDX[this] := 0;
[L4711]              sEBlock_USDX[this] := 0;
[L4712]              sCap_USDX[this] := 0;
[L4713]              sTot_USDX[this] := 0;
[L4714]              sChunk_USDX[this] := 0;
[L4715]              sPrice_USDX[this] := 0;
[L4753]  RET         call USDX_USDX_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call USDX_USDX__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s468 || p2 != msgsender_MSG) && from_s468 == to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((success_s468 == true && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this][p1][p2] == old(allowed_TokenERC20[this][p1][p2])) && aSBlock_USDX[this] == old(aSBlock_USDX[this])) && aEBlock_USDX[this] == old(aEBlock_USDX[this])) && aCap_USDX[this] == old(aCap_USDX[this])) && aTot_USDX[this] == old(aTot_USDX[this])) && aAmt_USDX[this] == old(aAmt_USDX[this])) && sSBlock_USDX[this] == old(sSBlock_USDX[this])) && sEBlock_USDX[this] == old(sEBlock_USDX[this])) && sCap_USDX[this] == old(sCap_USDX[this])) && sTot_USDX[this] == old(sTot_USDX[this])) && sChunk_USDX[this] == old(sChunk_USDX[this])) && sPrice_USDX[this] == old(sPrice_USDX[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_USDX(this);

Loop:
[L7683]  CALL        call CorralChoice_USDX(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != USDX;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND TRUE   choice == 31
[L7467]              gas := gas - 21000;
[L7468]  COND TRUE   gas >= 0
[L7469]              assume msgvalue_MSG == 0;
[L7470]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L901]               havoc __exception;
[L902]               revert := false;
[L903]   COND FALSE  !(__exception)
[L937]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4449]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L937]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L938]               assume !revert && gas >= 0;
[L7470]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7683]  RET         call CorralChoice_USDX(this);

[2020-11-25 08:18:01,039 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:18:01,039 INFO  L82        PathProgramCache]: Analyzing trace with hash -892347106, now seen corresponding path program 1 times
[2020-11-25 08:18:01,039 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:18:01,137 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 08:31:27,331 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 08:31:27,333 INFO  L168              Benchmark]: Toolchain (without parser) took 898680.08 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 935.2 MB in the beginning and 1.5 GB in the end (delta: -612.5 MB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,334 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,334 INFO  L168              Benchmark]: Boogie Preprocessor took 93.41 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,334 INFO  L168              Benchmark]: UtopiaSpecLang took 58.45 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,334 INFO  L168              Benchmark]: Boogie Printer took 17.61 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,335 INFO  L168              Benchmark]: RCFGBuilder took 994.59 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 897.6 MB in the beginning and 993.9 MB in the end (delta: -96.3 MB). Peak memory consumption was 187.1 MB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,335 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.71 ms. Allocated memory is still 1.1 GB. Free memory was 993.9 MB in the beginning and 987.0 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,335 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1771.08 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.9 MB). Free memory was 987.0 MB in the beginning and 908.4 MB in the end (delta: 78.6 MB). Peak memory consumption was 503.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,336 INFO  L168              Benchmark]: BlockEncodingV2 took 176.62 ms. Allocated memory is still 1.3 GB. Free memory was 908.4 MB in the beginning and 801.7 MB in the end (delta: 106.7 MB). Peak memory consumption was 106.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,336 INFO  L168              Benchmark]: BuchiAutomizer took 895529.29 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 801.7 MB in the beginning and 1.5 GB in the end (delta: -746.0 MB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
[2020-11-25 08:31:27,338 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8362 locations, 14617 edges
  - StatisticsResult: Encoded RCFG
    8306 locations, 14472 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 93.41 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.45 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.61 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 994.59 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 897.6 MB in the beginning and 993.9 MB in the end (delta: -96.3 MB). Peak memory consumption was 187.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.71 ms. Allocated memory is still 1.1 GB. Free memory was 993.9 MB in the beginning and 987.0 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1771.08 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.9 MB). Free memory was 987.0 MB in the beginning and 908.4 MB in the end (delta: 78.6 MB). Peak memory consumption was 503.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 176.62 ms. Allocated memory is still 1.3 GB. Free memory was 908.4 MB in the beginning and 801.7 MB in the end (delta: 106.7 MB). Peak memory consumption was 106.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 895529.29 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 801.7 MB in the beginning and 1.5 GB in the end (delta: -746.0 MB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3568 locations, 4644 edges
  - StatisticsResult: BuchiProgram size
    8362 locations, 14617 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
