This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:52:30,967 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:52:30,968 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:52:30,977 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:52:30,977 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:52:30,978 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:52:30,980 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:52:30,983 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:52:30,986 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:52:30,988 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:52:30,989 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:52:30,990 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:52:30,991 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:52:30,993 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:52:30,995 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:52:30,996 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:52:30,996 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:52:30,997 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:52:30,998 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:52:30,998 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:52:30,999 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:52:30,999 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:52:31,000 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:52:31,000 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:52:31,000 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:52:31,001 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:52:31,001 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:52:31,001 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:52:31,002 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:52:31,002 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:52:31,002 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:52:31,002 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:52:31,003 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:52:31,003 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:52:31,003 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:52:31,004 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:52:31,004 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:52:31,004 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:52:31,004 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:52:31,005 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:52:31,005 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:52:31,005 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:52:31,010 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:52:31,011 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:52:31,011 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:52:31,011 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:52:31,011 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:52:31,011 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:52:31,011 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:52:31,011 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:52:31,012 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:52:31,012 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:52:31,012 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:52:31,013 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:52:31,013 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:52:31,013 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:52:31,013 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:52:31,030 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:52:31,043 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:52:31,047 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:52:31,048 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:52:31,048 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:52:31,049 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl
[2020-11-25 11:52:31,049 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl'
[2020-11-25 11:52:31,140 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:52:31,142 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:52:31,142 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:52:31,142 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:52:31,142 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:52:31,158 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,160 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,193 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,193 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,215 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,228 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,238 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,250 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:52:31,250 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:52:31,250 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:52:31,252 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:52:31,256 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/1) ...
[2020-11-25 11:52:31,273 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:31,279 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:31,286 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:31,292 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s255 && amount_s255<=_balances_ERC20[this][msg.sender] ) && amount_s255>=0 ) && amount_s255<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s255]>=0 ) && _balances_ERC20[this][recipient_s255]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:52:31,294 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && name_CabGoldToken[this]==( old(name_CabGoldToken[this]) ) ) && symbol_CabGoldToken[this]==( old(symbol_CabGoldToken[this]) ) ) && decimals_CabGoldToken[this]==( old(decimals_CabGoldToken[this]) ) ) && active_CabGoldToken[this]==( old(active_CabGoldToken[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 11:52:31,301 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:31,301 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:52:31,313 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:31 PropertyContainer
[2020-11-25 11:52:31,313 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:52:31,314 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:52:31,314 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:52:31,314 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:52:31,315 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/2) ...
[2020-11-25 11:52:31,315 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:52:31,315 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:52:31,333 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:31" (2/2) ...
[2020-11-25 11:52:31,334 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:52:31,334 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:52:31,334 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:52:31,334 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:52:31,335 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/2) ...
[2020-11-25 11:52:31,386 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:52:31,386 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:52:31,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,387 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:52:31,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:52:31,388 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:52:31,389 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:52:31,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:52:31,389 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:52:31,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:52:31,389 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:52:31,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:52:31,389 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:52:31,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:52:31,389 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:52:31,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:52:31,390 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:31,390 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:52:31,390 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:52:31,390 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 11:52:31,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 11:52:31,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 11:52:31,391 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 11:52:31,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 11:52:31,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 11:52:31,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:52:31,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:52:31,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:52:31,392 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:52:31,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:52:31,393 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:52:31,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:52:31,393 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:52:31,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:52:31,393 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:52:31,393 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:52:31,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:52:31,393 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken
[2020-11-25 11:52:31,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken
[2020-11-25 11:52:31,393 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken
[2020-11-25 11:52:31,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken
[2020-11-25 11:52:31,393 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken
[2020-11-25 11:52:31,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken
[2020-11-25 11:52:31,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:52:31,394 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CabGoldToken
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:52:31,395 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:52:31,396 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:52:31,397 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:31,398 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 11:52:31,399 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:52:31,400 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:52:31,401 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__success
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__fail
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__success
[2020-11-25 11:52:31,402 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__fail
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__success
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__fail
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__success
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__fail
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:52:31,403 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 11:52:31,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:52:31,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:52:31,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:52:31,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:31,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:52:31,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:52:31,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:52:31,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:52:31,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__fail
[2020-11-25 11:52:31,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__success
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__fail
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__success
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__fail
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__success
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__fail
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__success
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:52:31,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 11:52:31,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CabGoldToken
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:52:31,414 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:52:31,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:52:31,715 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:31,716 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:31,716 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:32,326 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:52:32,326 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 11:52:32,328 INFO  L202        PluginConnector]: Adding new model CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:32 BoogieIcfgContainer
[2020-11-25 11:52:32,328 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:31" (2/2) ...
[2020-11-25 11:52:32,328 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:52:32,329 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4634799 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:32, skipping insertion in model container
[2020-11-25 11:52:32,329 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:52:32,329 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:52:32,329 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:52:32,330 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:52:32,330 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/3) ...
[2020-11-25 11:52:32,331 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@352d849d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:32, skipping insertion in model container
[2020-11-25 11:52:32,331 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:31" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:52:32,366 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:32 NWAContainer
[2020-11-25 11:52:32,366 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:52:32,366 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:52:32,366 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:52:32,367 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:52:32,368 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:32" (3/4) ...
[2020-11-25 11:52:32,369 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3032a1d5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:32, skipping insertion in model container
[2020-11-25 11:52:32,369 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:32" (4/4) ...
[2020-11-25 11:52:32,371 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:52:32,376 INFO  L110   BuchiProductObserver]: Initial RCFG 2279 locations, 3353 edges
[2020-11-25 11:52:32,376 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:52:32,387 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:52:34,241 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:52:34,248 INFO  L110   BuchiProductObserver]: BuchiProgram size 5916 locations, 11051 edges
[2020-11-25 11:52:34,249 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:34 BoogieIcfgContainer
[2020-11-25 11:52:34,249 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:52:34,249 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:52:34,249 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:52:34,250 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:52:34,251 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:34" (1/1) ...
[2020-11-25 11:52:34,362 INFO  L313           BlockEncoder]: Initial Icfg 5916 locations, 11051 edges
[2020-11-25 11:52:34,362 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:52:34,362 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:52:34,363 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:52:34,363 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:52:34,376 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 19 locations because of local infeasibility
[2020-11-25 11:52:34,390 INFO  L70        RemoveSinkStates]: Removed 92 edges and 61 locations by removing sink states
[2020-11-25 11:52:34,403 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:52:34,407 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:52:34,411 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:52:34,412 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:52:34,414 INFO  L313           BlockEncoder]: Encoded RCFG 5808 locations, 10756 edges
[2020-11-25 11:52:34,415 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:52:34 BasicIcfg
[2020-11-25 11:52:34,415 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:52:34,415 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:52:34,415 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:52:34,417 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:52:34,417 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:34,417 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:31" (1/6) ...
[2020-11-25 11:52:34,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@316d72f4 and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:34, skipping insertion in model container
[2020-11-25 11:52:34,419 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:34,419 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:31" (2/6) ...
[2020-11-25 11:52:34,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@316d72f4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:34, skipping insertion in model container
[2020-11-25 11:52:34,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:34,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:32" (3/6) ...
[2020-11-25 11:52:34,420 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@316d72f4 and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:52:34, skipping insertion in model container
[2020-11-25 11:52:34,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:34,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:32" (4/6) ...
[2020-11-25 11:52:34,420 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@316d72f4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:34, skipping insertion in model container
[2020-11-25 11:52:34,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:34,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:34" (5/6) ...
[2020-11-25 11:52:34,420 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@316d72f4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:52:34, skipping insertion in model container
[2020-11-25 11:52:34,421 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:34,421 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:52:34" (6/6) ...
[2020-11-25 11:52:34,421 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self.bpl_BEv2
[2020-11-25 11:52:34,455 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:52:34,455 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:52:34,455 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:52:34,455 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:52:34,455 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:52:34,455 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:52:34,455 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:52:34,455 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:52:34,455 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:52:34,496 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5808 states.
[2020-11-25 11:52:34,548 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:34,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:34,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:34,556 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:34,556 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:34,556 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:52:34,556 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5808 states.
[2020-11-25 11:52:34,578 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:34,578 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:34,578 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:34,579 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:34,580 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:34,593 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:34,593 INFO  L82        PathProgramCache]: Analyzing trace with hash -2129911993, now seen corresponding path program 1 times
[2020-11-25 11:52:34,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:34,616 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:34,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:34,654 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:34,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:52:34,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:35,002 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:35,003 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:35,004 INFO  L87              Difference]: Start difference. First operand 5808 states. Second operand 3 states.
[2020-11-25 11:52:35,337 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:35,338 INFO  L93              Difference]: Finished difference Result 5084 states and 8725 transitions.
[2020-11-25 11:52:35,338 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:35,339 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5084 states and 8725 transitions.
[2020-11-25 11:52:35,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:52:35,419 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5084 states to 5084 states and 8725 transitions.
[2020-11-25 11:52:35,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 11:52:35,425 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1313
[2020-11-25 11:52:35,426 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5084 states and 8725 transitions.
[2020-11-25 11:52:35,443 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:35,443 INFO  L728         BuchiCegarLoop]: Abstraction has 5084 states and 8725 transitions.
[2020-11-25 11:52:35,463 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5084 states and 8725 transitions.
[2020-11-25 11:52:35,556 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5084 to 4420.
[2020-11-25 11:52:35,556 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4420 states.
[2020-11-25 11:52:35,568 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4420 states to 4420 states and 7582 transitions.
[2020-11-25 11:52:35,568 INFO  L751         BuchiCegarLoop]: Abstraction has 4420 states and 7582 transitions.
[2020-11-25 11:52:35,569 INFO  L631         BuchiCegarLoop]: Abstraction has 4420 states and 7582 transitions.
[2020-11-25 11:52:35,569 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:52:35,569 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4420 states and 7582 transitions.
[2020-11-25 11:52:35,582 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:35,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:35,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:35,584 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:35,584 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                success_transfer_ERC200 := false;
[L2]                call_transfer_ERC200 := false;
[L2]     CALL       call main();
[L6461]             assume null == 0;
[L6462]  CALL       call this := FreshRefGenerator__success();
[L2550]             havoc newRef;
[L2551]             assume Alloc[newRef] == false;
[L2552]             Alloc[newRef] := true;
[L2553]             assume newRef != null;
[L6462]  RET        call this := FreshRefGenerator__success();
[L6463]             assume now >= 0;
[L6464]             assume DType[this] == CabGoldToken;
[L6465]             assume msgvalue_MSG == 0;
[L6466]             gas := gas - 53000;
[L6467]  CALL       call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL       call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL       call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]             assume msgsender_MSG != null;
[L2734]             Balance[this] := 0;
[L2748]  RET        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND TRUE  revert
[L4138]  RET        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE  revert
[L6467]  RET        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]             assume !revert && gas >= 0;

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:35,585 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:35,586 INFO  L82        PathProgramCache]: Analyzing trace with hash 1484996933, now seen corresponding path program 1 times
[2020-11-25 11:52:35,587 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:35,592 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:35,599 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:35,599 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:35,599 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 11:52:35,601 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:35,601 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:35,601 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:35,601 INFO  L87              Difference]: Start difference. First operand 4420 states and 7582 transitions. cyclomatic complexity: 3164 Second operand 3 states.
[2020-11-25 11:52:35,747 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:35,747 INFO  L93              Difference]: Finished difference Result 4232 states and 5214 transitions.
[2020-11-25 11:52:35,748 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:35,748 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4232 states and 5214 transitions.
[2020-11-25 11:52:35,763 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:35,780 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4232 states to 4232 states and 5214 transitions.
[2020-11-25 11:52:35,780 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1075
[2020-11-25 11:52:35,781 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1095
[2020-11-25 11:52:35,781 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4232 states and 5214 transitions.
[2020-11-25 11:52:35,786 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:35,786 INFO  L728         BuchiCegarLoop]: Abstraction has 4232 states and 5214 transitions.
[2020-11-25 11:52:35,790 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4232 states and 5214 transitions.
[2020-11-25 11:52:35,828 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4232 to 4232.
[2020-11-25 11:52:35,828 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4232 states.
[2020-11-25 11:52:35,834 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4232 states to 4232 states and 5214 transitions.
[2020-11-25 11:52:35,834 INFO  L751         BuchiCegarLoop]: Abstraction has 4232 states and 5214 transitions.
[2020-11-25 11:52:35,834 INFO  L631         BuchiCegarLoop]: Abstraction has 4232 states and 5214 transitions.
[2020-11-25 11:52:35,834 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:52:35,834 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4232 states and 5214 transitions.
[2020-11-25 11:52:35,841 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:35,841 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:35,841 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:35,842 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:35,842 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND TRUE   revert
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND TRUE   revert
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND TRUE   revert
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:35,846 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:35,846 INFO  L82        PathProgramCache]: Analyzing trace with hash 834823049, now seen corresponding path program 1 times
[2020-11-25 11:52:35,847 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:35,856 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:35,874 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:35,874 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:35,874 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:52:35,874 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:35,874 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:35,874 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:35,875 INFO  L87              Difference]: Start difference. First operand 4232 states and 5214 transitions. cyclomatic complexity: 984 Second operand 3 states.
[2020-11-25 11:52:35,955 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:35,956 INFO  L93              Difference]: Finished difference Result 4892 states and 5727 transitions.
[2020-11-25 11:52:35,956 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:35,956 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4892 states and 5727 transitions.
[2020-11-25 11:52:35,969 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:52:35,985 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4892 states to 4444 states and 5171 transitions.
[2020-11-25 11:52:35,985 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1134
[2020-11-25 11:52:35,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1193
[2020-11-25 11:52:35,986 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4444 states and 5171 transitions.
[2020-11-25 11:52:35,990 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:35,990 INFO  L728         BuchiCegarLoop]: Abstraction has 4444 states and 5171 transitions.
[2020-11-25 11:52:35,993 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4444 states and 5171 transitions.
[2020-11-25 11:52:36,029 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4444 to 3864.
[2020-11-25 11:52:36,029 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3864 states.
[2020-11-25 11:52:36,034 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3864 states to 3864 states and 4451 transitions.
[2020-11-25 11:52:36,034 INFO  L751         BuchiCegarLoop]: Abstraction has 3864 states and 4451 transitions.
[2020-11-25 11:52:36,034 INFO  L631         BuchiCegarLoop]: Abstraction has 3864 states and 4451 transitions.
[2020-11-25 11:52:36,034 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:52:36,034 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3864 states and 4451 transitions.
[2020-11-25 11:52:36,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:36,041 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:36,041 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:36,044 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:36,044 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:36,049 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:36,050 INFO  L82        PathProgramCache]: Analyzing trace with hash -1315186245, now seen corresponding path program 1 times
[2020-11-25 11:52:36,050 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:36,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:36,178 INFO  L134       CoverageAnalysis]: Checked inductivity of 267 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 258 trivial. 0 not checked.
[2020-11-25 11:52:36,179 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:36,179 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:52:36,179 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:36,179 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:36,179 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:36,180 INFO  L87              Difference]: Start difference. First operand 3864 states and 4451 transitions. cyclomatic complexity: 589 Second operand 6 states.
[2020-11-25 11:52:36,304 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:36,304 INFO  L93              Difference]: Finished difference Result 3883 states and 4473 transitions.
[2020-11-25 11:52:36,304 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:36,305 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3883 states and 4473 transitions.
[2020-11-25 11:52:36,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:36,334 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3883 states to 3870 states and 4457 transitions.
[2020-11-25 11:52:36,334 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:52:36,335 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:52:36,335 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3870 states and 4457 transitions.
[2020-11-25 11:52:36,340 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:36,340 INFO  L728         BuchiCegarLoop]: Abstraction has 3870 states and 4457 transitions.
[2020-11-25 11:52:36,345 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3870 states and 4457 transitions.
[2020-11-25 11:52:36,378 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3870 to 3870.
[2020-11-25 11:52:36,378 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3870 states.
[2020-11-25 11:52:36,382 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3870 states to 3870 states and 4457 transitions.
[2020-11-25 11:52:36,382 INFO  L751         BuchiCegarLoop]: Abstraction has 3870 states and 4457 transitions.
[2020-11-25 11:52:36,382 INFO  L631         BuchiCegarLoop]: Abstraction has 3870 states and 4457 transitions.
[2020-11-25 11:52:36,382 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:52:36,382 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3870 states and 4457 transitions.
[2020-11-25 11:52:36,388 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:36,388 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:36,388 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:36,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:36,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:36,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:36,395 INFO  L82        PathProgramCache]: Analyzing trace with hash 160839007, now seen corresponding path program 1 times
[2020-11-25 11:52:36,396 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:36,406 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:36,473 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:52:36,473 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:36,473 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:52:36,474 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:36,474 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:52:36,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:52:36,474 INFO  L87              Difference]: Start difference. First operand 3870 states and 4457 transitions. cyclomatic complexity: 589 Second operand 7 states.
[2020-11-25 11:52:36,586 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:36,587 INFO  L93              Difference]: Finished difference Result 3887 states and 4476 transitions.
[2020-11-25 11:52:36,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:52:36,587 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3887 states and 4476 transitions.
[2020-11-25 11:52:36,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:36,614 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3887 states to 3859 states and 4444 transitions.
[2020-11-25 11:52:36,614 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:52:36,615 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:52:36,615 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3859 states and 4444 transitions.
[2020-11-25 11:52:36,620 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:36,621 INFO  L728         BuchiCegarLoop]: Abstraction has 3859 states and 4444 transitions.
[2020-11-25 11:52:36,625 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3859 states and 4444 transitions.
[2020-11-25 11:52:36,661 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3859 to 3859.
[2020-11-25 11:52:36,661 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3859 states.
[2020-11-25 11:52:36,668 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3859 states to 3859 states and 4444 transitions.
[2020-11-25 11:52:36,668 INFO  L751         BuchiCegarLoop]: Abstraction has 3859 states and 4444 transitions.
[2020-11-25 11:52:36,668 INFO  L631         BuchiCegarLoop]: Abstraction has 3859 states and 4444 transitions.
[2020-11-25 11:52:36,668 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:52:36,668 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3859 states and 4444 transitions.
[2020-11-25 11:52:36,677 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:36,677 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:36,677 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:36,679 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:36,680 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:36,686 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:36,686 INFO  L82        PathProgramCache]: Analyzing trace with hash 1274414381, now seen corresponding path program 1 times
[2020-11-25 11:52:36,687 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:36,699 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:36,790 INFO  L134       CoverageAnalysis]: Checked inductivity of 266 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-11-25 11:52:36,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:36,790 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:52:36,791 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:36,792 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:36,792 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:36,792 INFO  L87              Difference]: Start difference. First operand 3859 states and 4444 transitions. cyclomatic complexity: 587 Second operand 6 states.
[2020-11-25 11:52:36,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:36,859 INFO  L93              Difference]: Finished difference Result 3878 states and 4466 transitions.
[2020-11-25 11:52:36,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:36,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3878 states and 4466 transitions.
[2020-11-25 11:52:36,867 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:36,876 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3878 states to 3865 states and 4450 transitions.
[2020-11-25 11:52:36,876 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:52:36,876 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:52:36,876 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3865 states and 4450 transitions.
[2020-11-25 11:52:36,879 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:36,879 INFO  L728         BuchiCegarLoop]: Abstraction has 3865 states and 4450 transitions.
[2020-11-25 11:52:36,882 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3865 states and 4450 transitions.
[2020-11-25 11:52:36,901 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3865 to 3865.
[2020-11-25 11:52:36,901 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3865 states.
[2020-11-25 11:52:36,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3865 states to 3865 states and 4450 transitions.
[2020-11-25 11:52:36,905 INFO  L751         BuchiCegarLoop]: Abstraction has 3865 states and 4450 transitions.
[2020-11-25 11:52:36,905 INFO  L631         BuchiCegarLoop]: Abstraction has 3865 states and 4450 transitions.
[2020-11-25 11:52:36,905 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:52:36,905 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3865 states and 4450 transitions.
[2020-11-25 11:52:36,908 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:36,909 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:36,909 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:36,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:36,911 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:36,916 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:36,917 INFO  L82        PathProgramCache]: Analyzing trace with hash -2131243136, now seen corresponding path program 1 times
[2020-11-25 11:52:36,917 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:36,928 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:36,986 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:52:36,986 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:36,986 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:52:36,986 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:36,986 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:52:36,986 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:52:36,986 INFO  L87              Difference]: Start difference. First operand 3865 states and 4450 transitions. cyclomatic complexity: 587 Second operand 7 states.
[2020-11-25 11:52:37,055 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:37,056 INFO  L93              Difference]: Finished difference Result 3882 states and 4469 transitions.
[2020-11-25 11:52:37,056 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:52:37,056 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3882 states and 4469 transitions.
[2020-11-25 11:52:37,062 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:37,070 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3882 states to 3854 states and 4437 transitions.
[2020-11-25 11:52:37,070 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:52:37,071 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:52:37,071 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3854 states and 4437 transitions.
[2020-11-25 11:52:37,073 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:37,073 INFO  L728         BuchiCegarLoop]: Abstraction has 3854 states and 4437 transitions.
[2020-11-25 11:52:37,076 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3854 states and 4437 transitions.
[2020-11-25 11:52:37,096 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3854 to 3854.
[2020-11-25 11:52:37,096 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3854 states.
[2020-11-25 11:52:37,099 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3854 states to 3854 states and 4437 transitions.
[2020-11-25 11:52:37,099 INFO  L751         BuchiCegarLoop]: Abstraction has 3854 states and 4437 transitions.
[2020-11-25 11:52:37,100 INFO  L631         BuchiCegarLoop]: Abstraction has 3854 states and 4437 transitions.
[2020-11-25 11:52:37,100 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:52:37,100 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3854 states and 4437 transitions.
[2020-11-25 11:52:37,104 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:37,104 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:37,104 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:37,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:37,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND TRUE   !(sender_s435 != null)
[L3214]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:37,109 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:37,109 INFO  L82        PathProgramCache]: Analyzing trace with hash 1951633467, now seen corresponding path program 1 times
[2020-11-25 11:52:37,110 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:37,121 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:37,189 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:52:37,190 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:37,190 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:52:37,190 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:37,190 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:37,190 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:37,190 INFO  L87              Difference]: Start difference. First operand 3854 states and 4437 transitions. cyclomatic complexity: 585 Second operand 6 states.
[2020-11-25 11:52:37,233 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:37,233 INFO  L93              Difference]: Finished difference Result 3886 states and 4481 transitions.
[2020-11-25 11:52:37,234 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:37,234 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3886 states and 4481 transitions.
[2020-11-25 11:52:37,241 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:37,250 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3886 states to 3858 states and 4447 transitions.
[2020-11-25 11:52:37,250 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1047
[2020-11-25 11:52:37,250 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1047
[2020-11-25 11:52:37,251 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3858 states and 4447 transitions.
[2020-11-25 11:52:37,253 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:37,253 INFO  L728         BuchiCegarLoop]: Abstraction has 3858 states and 4447 transitions.
[2020-11-25 11:52:37,256 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3858 states and 4447 transitions.
[2020-11-25 11:52:37,275 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3858 to 3858.
[2020-11-25 11:52:37,276 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3858 states.
[2020-11-25 11:52:37,279 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3858 states to 3858 states and 4447 transitions.
[2020-11-25 11:52:37,279 INFO  L751         BuchiCegarLoop]: Abstraction has 3858 states and 4447 transitions.
[2020-11-25 11:52:37,279 INFO  L631         BuchiCegarLoop]: Abstraction has 3858 states and 4447 transitions.
[2020-11-25 11:52:37,279 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 11:52:37,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3858 states and 4447 transitions.
[2020-11-25 11:52:37,283 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:37,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:37,284 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:37,285 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:37,285 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND TRUE   !(recipient_s435 != null)
[L3219]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND TRUE   !(recipient_s435 != null)
[L3219]              revert := true;
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:37,288 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:37,288 INFO  L82        PathProgramCache]: Analyzing trace with hash 2098824825, now seen corresponding path program 1 times
[2020-11-25 11:52:37,289 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:37,300 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:37,358 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:52:37,358 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:37,359 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:52:37,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:37,360 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:52:37,360 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:52:37,360 INFO  L87              Difference]: Start difference. First operand 3858 states and 4447 transitions. cyclomatic complexity: 591 Second operand 7 states.
[2020-11-25 11:52:37,431 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:37,432 INFO  L93              Difference]: Finished difference Result 3968 states and 4578 transitions.
[2020-11-25 11:52:37,432 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:52:37,432 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3968 states and 4578 transitions.
[2020-11-25 11:52:37,439 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:37,447 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3968 states to 3960 states and 4570 transitions.
[2020-11-25 11:52:37,447 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1070
[2020-11-25 11:52:37,447 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1070
[2020-11-25 11:52:37,447 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3960 states and 4570 transitions.
[2020-11-25 11:52:37,450 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:37,450 INFO  L728         BuchiCegarLoop]: Abstraction has 3960 states and 4570 transitions.
[2020-11-25 11:52:37,453 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3960 states and 4570 transitions.
[2020-11-25 11:52:37,477 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3960 to 3947.
[2020-11-25 11:52:37,477 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3947 states.
[2020-11-25 11:52:37,481 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3947 states to 3947 states and 4555 transitions.
[2020-11-25 11:52:37,481 INFO  L751         BuchiCegarLoop]: Abstraction has 3947 states and 4555 transitions.
[2020-11-25 11:52:37,481 INFO  L631         BuchiCegarLoop]: Abstraction has 3947 states and 4555 transitions.
[2020-11-25 11:52:37,481 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 11:52:37,481 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3947 states and 4555 transitions.
[2020-11-25 11:52:37,485 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:37,485 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:37,485 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:37,487 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:37,487 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND TRUE   !(b_s51 <= a_s51)
[L2626]              revert := true;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND TRUE   !(b_s51 <= a_s51)
[L2626]              revert := true;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:37,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:37,490 INFO  L82        PathProgramCache]: Analyzing trace with hash -1296833642, now seen corresponding path program 1 times
[2020-11-25 11:52:37,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:37,504 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:37,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:52:37,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:37,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 11:52:37,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:37,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 11:52:37,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 11:52:37,653 INFO  L87              Difference]: Start difference. First operand 3947 states and 4555 transitions. cyclomatic complexity: 610 Second operand 8 states.
[2020-11-25 11:52:39,005 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:39,005 INFO  L93              Difference]: Finished difference Result 4138 states and 4771 transitions.
[2020-11-25 11:52:39,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 11:52:39,005 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4138 states and 4771 transitions.
[2020-11-25 11:52:39,014 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:39,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4138 states to 4138 states and 4771 transitions.
[2020-11-25 11:52:39,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1164
[2020-11-25 11:52:39,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1164
[2020-11-25 11:52:39,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4138 states and 4771 transitions.
[2020-11-25 11:52:39,027 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:39,027 INFO  L728         BuchiCegarLoop]: Abstraction has 4138 states and 4771 transitions.
[2020-11-25 11:52:39,030 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4138 states and 4771 transitions.
[2020-11-25 11:52:39,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4138 to 3947.
[2020-11-25 11:52:39,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3947 states.
[2020-11-25 11:52:39,057 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3947 states to 3947 states and 4555 transitions.
[2020-11-25 11:52:39,057 INFO  L751         BuchiCegarLoop]: Abstraction has 3947 states and 4555 transitions.
[2020-11-25 11:52:39,057 INFO  L631         BuchiCegarLoop]: Abstraction has 3947 states and 4555 transitions.
[2020-11-25 11:52:39,057 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 11:52:39,057 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3947 states and 4555 transitions.
[2020-11-25 11:52:39,062 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:39,062 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:39,062 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:39,063 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:39,063 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:39,066 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:39,067 INFO  L82        PathProgramCache]: Analyzing trace with hash 864250092, now seen corresponding path program 1 times
[2020-11-25 11:52:39,067 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:39,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:39,489 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 245 trivial. 0 not checked.
[2020-11-25 11:52:39,489 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:39,489 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 11:52:39,489 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:39,490 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 11:52:39,490 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=492, Unknown=0, NotChecked=0, Total=552
[2020-11-25 11:52:39,490 INFO  L87              Difference]: Start difference. First operand 3947 states and 4555 transitions. cyclomatic complexity: 610 Second operand 24 states.
[2020-11-25 11:52:44,496 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:44,496 INFO  L93              Difference]: Finished difference Result 4009 states and 4626 transitions.
[2020-11-25 11:52:44,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 11:52:44,496 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4009 states and 4626 transitions.
[2020-11-25 11:52:44,503 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:44,511 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4009 states to 4009 states and 4626 transitions.
[2020-11-25 11:52:44,511 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1094
[2020-11-25 11:52:44,512 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1094
[2020-11-25 11:52:44,512 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4009 states and 4626 transitions.
[2020-11-25 11:52:44,514 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:44,514 INFO  L728         BuchiCegarLoop]: Abstraction has 4009 states and 4626 transitions.
[2020-11-25 11:52:44,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4009 states and 4626 transitions.
[2020-11-25 11:52:44,536 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4009 to 4002.
[2020-11-25 11:52:44,536 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4002 states.
[2020-11-25 11:52:44,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4002 states to 4002 states and 4619 transitions.
[2020-11-25 11:52:44,540 INFO  L751         BuchiCegarLoop]: Abstraction has 4002 states and 4619 transitions.
[2020-11-25 11:52:44,540 INFO  L631         BuchiCegarLoop]: Abstraction has 4002 states and 4619 transitions.
[2020-11-25 11:52:44,540 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 11:52:44,540 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4002 states and 4619 transitions.
[2020-11-25 11:52:44,545 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:44,545 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:44,545 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:44,546 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:44,546 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND TRUE   !(c_s26 >= a_s26)
[L2603]              revert := true;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND TRUE   !(c_s26 >= a_s26)
[L2603]              revert := true;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:44,550 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:44,550 INFO  L82        PathProgramCache]: Analyzing trace with hash 1686816162, now seen corresponding path program 1 times
[2020-11-25 11:52:44,551 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:44,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:44,700 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 245 trivial. 0 not checked.
[2020-11-25 11:52:44,700 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:44,700 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 11:52:44,700 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:44,701 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 11:52:44,701 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=379, Unknown=0, NotChecked=0, Total=420
[2020-11-25 11:52:44,701 INFO  L87              Difference]: Start difference. First operand 4002 states and 4619 transitions. cyclomatic complexity: 621 Second operand 21 states.
[2020-11-25 11:52:48,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:48,550 INFO  L93              Difference]: Finished difference Result 4033 states and 4656 transitions.
[2020-11-25 11:52:48,550 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 11:52:48,550 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4033 states and 4656 transitions.
[2020-11-25 11:52:48,558 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:48,565 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4033 states to 4033 states and 4656 transitions.
[2020-11-25 11:52:48,565 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1105
[2020-11-25 11:52:48,566 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1105
[2020-11-25 11:52:48,566 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4033 states and 4656 transitions.
[2020-11-25 11:52:48,568 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:48,568 INFO  L728         BuchiCegarLoop]: Abstraction has 4033 states and 4656 transitions.
[2020-11-25 11:52:48,571 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4033 states and 4656 transitions.
[2020-11-25 11:52:48,590 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4033 to 4012.
[2020-11-25 11:52:48,590 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4012 states.
[2020-11-25 11:52:48,594 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4012 states to 4012 states and 4632 transitions.
[2020-11-25 11:52:48,594 INFO  L751         BuchiCegarLoop]: Abstraction has 4012 states and 4632 transitions.
[2020-11-25 11:52:48,594 INFO  L631         BuchiCegarLoop]: Abstraction has 4012 states and 4632 transitions.
[2020-11-25 11:52:48,594 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 11:52:48,594 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4012 states and 4632 transitions.
[2020-11-25 11:52:48,598 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:48,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:48,598 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:48,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:48,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND FALSE  !(!(c_s26 >= a_s26))
[L2606]              __ret_0_ := c_s26;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND FALSE  !(revert)
[L3233]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s435];
[L3234]              __tmp___balances_ERC20[this][recipient_s435] := __var_7;
[L3235]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s435];
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND FALSE  !(revert)
[L2853]              __ret_0_ := true;
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:48,603 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:48,603 INFO  L82        PathProgramCache]: Analyzing trace with hash -52903507, now seen corresponding path program 1 times
[2020-11-25 11:52:48,603 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:48,614 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:48,719 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:52:48,720 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:48,720 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:52:48,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:48,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:48,720 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:48,720 INFO  L87              Difference]: Start difference. First operand 4012 states and 4632 transitions. cyclomatic complexity: 624 Second operand 6 states.
[2020-11-25 11:52:49,515 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:49,516 INFO  L93              Difference]: Finished difference Result 4768 states and 5539 transitions.
[2020-11-25 11:52:49,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 11:52:49,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4768 states and 5539 transitions.
[2020-11-25 11:52:49,527 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 11:52:49,536 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4768 states to 4064 states and 4784 transitions.
[2020-11-25 11:52:49,536 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 886
[2020-11-25 11:52:49,537 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 886
[2020-11-25 11:52:49,537 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4064 states and 4784 transitions.
[2020-11-25 11:52:49,539 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:49,539 INFO  L728         BuchiCegarLoop]: Abstraction has 4064 states and 4784 transitions.
[2020-11-25 11:52:49,542 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4064 states and 4784 transitions.
[2020-11-25 11:52:49,560 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4064 to 3385.
[2020-11-25 11:52:49,560 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3385 states.
[2020-11-25 11:52:49,563 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3385 states to 3385 states and 3910 transitions.
[2020-11-25 11:52:49,563 INFO  L751         BuchiCegarLoop]: Abstraction has 3385 states and 3910 transitions.
[2020-11-25 11:52:49,563 INFO  L631         BuchiCegarLoop]: Abstraction has 3385 states and 3910 transitions.
[2020-11-25 11:52:49,563 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 11:52:49,563 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3385 states and 3910 transitions.
[2020-11-25 11:52:49,567 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:49,567 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:49,567 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:49,568 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:49,569 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND FALSE  !(choice == 13)
[L6376]  COND FALSE  !(choice == 12)
[L6383]  COND FALSE  !(choice == 11)
[L6390]  COND FALSE  !(choice == 10)
[L6396]  COND FALSE  !(choice == 9)
[L6402]  COND FALSE  !(choice == 8)
[L6408]  COND FALSE  !(choice == 7)
[L6415]  COND TRUE   choice == 6
[L6416]              gas := gas - 21000;
[L6417]  COND TRUE   gas >= 0
[L6418]              assume amount_s810 >= 0 && amount_s810 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6419]              assume msgvalue_MSG == 0;
[L6420]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L1348]              havoc __exception;
[L1349]              revert := false;
[L1350]  COND FALSE  !(__exception)
[L1376]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L4035]  COND TRUE   DType[this] == CabGoldToken
[L4036]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s810);
[L3349]              __var_11 := null;
[L3350]  COND FALSE  !(!(account_s521 != null))
[L3354]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s521);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3354]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s521);
[L3355]  COND FALSE  !(revert)
[L3358]              _totalSupply_ERC20[this] := __var_12;
[L3359]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s521], value_s521);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3359]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s521], value_s521);
[L3360]  COND FALSE  !(revert)
[L3363]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s521];
[L3364]              _balances_ERC20[this][account_s521] := __var_13;
[L3365]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s521];
[L3366]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4036]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s810);
[L4037]  COND FALSE  !(revert)
[L1376]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L1377]              assume !revert && gas >= 0;
[L6420]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:49,573 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:49,573 INFO  L82        PathProgramCache]: Analyzing trace with hash 1880562520, now seen corresponding path program 1 times
[2020-11-25 11:52:49,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:49,596 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:50,259 INFO  L134       CoverageAnalysis]: Checked inductivity of 329 backedges. 24 proven. 1 refuted. 0 times theorem prover too weak. 304 trivial. 0 not checked.
[2020-11-25 11:52:50,259 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:50,259 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 11:52:50,260 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:50,260 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 11:52:50,260 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=1020, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 11:52:50,260 INFO  L87              Difference]: Start difference. First operand 3385 states and 3910 transitions. cyclomatic complexity: 528 Second operand 34 states.
[2020-11-25 11:52:57,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:57,281 INFO  L93              Difference]: Finished difference Result 3431 states and 3985 transitions.
[2020-11-25 11:52:57,282 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 11:52:57,282 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3431 states and 3985 transitions.
[2020-11-25 11:52:57,288 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 11:52:57,296 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3431 states to 3431 states and 3985 transitions.
[2020-11-25 11:52:57,296 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 794
[2020-11-25 11:52:57,296 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 794
[2020-11-25 11:52:57,296 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3431 states and 3985 transitions.
[2020-11-25 11:52:57,298 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:57,298 INFO  L728         BuchiCegarLoop]: Abstraction has 3431 states and 3985 transitions.
[2020-11-25 11:52:57,301 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3431 states and 3985 transitions.
[2020-11-25 11:52:57,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3431 to 3418.
[2020-11-25 11:52:57,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3418 states.
[2020-11-25 11:52:57,320 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3418 states to 3418 states and 3954 transitions.
[2020-11-25 11:52:57,320 INFO  L751         BuchiCegarLoop]: Abstraction has 3418 states and 3954 transitions.
[2020-11-25 11:52:57,320 INFO  L631         BuchiCegarLoop]: Abstraction has 3418 states and 3954 transitions.
[2020-11-25 11:52:57,320 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 11:52:57,320 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3418 states and 3954 transitions.
[2020-11-25 11:52:57,323 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:57,324 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:57,324 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:57,325 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:57,325 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND FALSE  !(DType[this] == CabGoldToken)
[L2864]  COND FALSE  !(DType[this] == ERC20Burnable)
[L2869]  COND TRUE   DType[this] == ERC20Mintable
[L2870]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2870]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2871]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND TRUE   !(c_s26 >= a_s26)
[L2603]              revert := true;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:57,329 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:57,329 INFO  L82        PathProgramCache]: Analyzing trace with hash -1137158025, now seen corresponding path program 1 times
[2020-11-25 11:52:57,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:57,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:57,425 INFO  L134       CoverageAnalysis]: Checked inductivity of 333 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 332 trivial. 0 not checked.
[2020-11-25 11:52:57,425 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:57,426 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:52:57,426 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:57,426 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:57,426 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:57,426 INFO  L87              Difference]: Start difference. First operand 3418 states and 3954 transitions. cyclomatic complexity: 541 Second operand 6 states.
[2020-11-25 11:52:57,491 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:57,491 INFO  L93              Difference]: Finished difference Result 3470 states and 4007 transitions.
[2020-11-25 11:52:57,491 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:57,491 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3470 states and 4007 transitions.
[2020-11-25 11:52:57,497 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:57,504 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3470 states to 3388 states and 3912 transitions.
[2020-11-25 11:52:57,504 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 782
[2020-11-25 11:52:57,504 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 782
[2020-11-25 11:52:57,504 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3388 states and 3912 transitions.
[2020-11-25 11:52:57,506 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:57,506 INFO  L728         BuchiCegarLoop]: Abstraction has 3388 states and 3912 transitions.
[2020-11-25 11:52:57,508 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3388 states and 3912 transitions.
[2020-11-25 11:52:57,525 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3388 to 3388.
[2020-11-25 11:52:57,525 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3388 states.
[2020-11-25 11:52:57,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3388 states to 3388 states and 3912 transitions.
[2020-11-25 11:52:57,528 INFO  L751         BuchiCegarLoop]: Abstraction has 3388 states and 3912 transitions.
[2020-11-25 11:52:57,528 INFO  L631         BuchiCegarLoop]: Abstraction has 3388 states and 3912 transitions.
[2020-11-25 11:52:57,528 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 11:52:57,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3388 states and 3912 transitions.
[2020-11-25 11:52:57,532 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:52:57,532 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:57,532 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:57,533 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:57,533 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:57,537 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:57,537 INFO  L82        PathProgramCache]: Analyzing trace with hash -1011073774, now seen corresponding path program 1 times
[2020-11-25 11:52:57,538 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:57,565 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:58,196 INFO  L134       CoverageAnalysis]: Checked inductivity of 333 backedges. 21 proven. 2 refuted. 0 times theorem prover too weak. 310 trivial. 0 not checked.
[2020-11-25 11:52:58,196 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:58,196 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 11:52:58,197 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:58,197 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 11:52:58,197 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=589, Unknown=0, NotChecked=0, Total=650
[2020-11-25 11:52:58,197 INFO  L87              Difference]: Start difference. First operand 3388 states and 3912 transitions. cyclomatic complexity: 529 Second operand 26 states.
[2020-11-25 11:53:04,736 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:04,737 INFO  L93              Difference]: Finished difference Result 3400 states and 3929 transitions.
[2020-11-25 11:53:04,737 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 11:53:04,737 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3400 states and 3929 transitions.
[2020-11-25 11:53:04,743 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:53:04,750 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3400 states to 3400 states and 3929 transitions.
[2020-11-25 11:53:04,750 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 786
[2020-11-25 11:53:04,750 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 786
[2020-11-25 11:53:04,750 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3400 states and 3929 transitions.
[2020-11-25 11:53:04,752 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:04,752 INFO  L728         BuchiCegarLoop]: Abstraction has 3400 states and 3929 transitions.
[2020-11-25 11:53:04,755 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3400 states and 3929 transitions.
[2020-11-25 11:53:04,769 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3400 to 3394.
[2020-11-25 11:53:04,769 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3394 states.
[2020-11-25 11:53:04,772 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3394 states to 3394 states and 3919 transitions.
[2020-11-25 11:53:04,772 INFO  L751         BuchiCegarLoop]: Abstraction has 3394 states and 3919 transitions.
[2020-11-25 11:53:04,772 INFO  L631         BuchiCegarLoop]: Abstraction has 3394 states and 3919 transitions.
[2020-11-25 11:53:04,772 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 11:53:04,772 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3394 states and 3919 transitions.
[2020-11-25 11:53:04,776 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:53:04,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:04,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:04,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:04,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND TRUE   !(c_s26 >= a_s26)
[L2603]              revert := true;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:04,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:04,781 INFO  L82        PathProgramCache]: Analyzing trace with hash 1208476254, now seen corresponding path program 1 times
[2020-11-25 11:53:04,781 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:04,798 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:05,141 INFO  L134       CoverageAnalysis]: Checked inductivity of 334 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 309 trivial. 0 not checked.
[2020-11-25 11:53:05,142 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:05,142 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 11:53:05,142 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:05,142 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 11:53:05,142 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=636, Unknown=0, NotChecked=0, Total=702
[2020-11-25 11:53:05,143 INFO  L87              Difference]: Start difference. First operand 3394 states and 3919 transitions. cyclomatic complexity: 530 Second operand 27 states.
[2020-11-25 11:53:10,587 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:10,587 INFO  L93              Difference]: Finished difference Result 3400 states and 3937 transitions.
[2020-11-25 11:53:10,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 11:53:10,587 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3400 states and 3937 transitions.
[2020-11-25 11:53:10,593 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 11:53:10,599 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3400 states to 3400 states and 3937 transitions.
[2020-11-25 11:53:10,599 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 784
[2020-11-25 11:53:10,599 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 784
[2020-11-25 11:53:10,599 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3400 states and 3937 transitions.
[2020-11-25 11:53:10,601 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:10,601 INFO  L728         BuchiCegarLoop]: Abstraction has 3400 states and 3937 transitions.
[2020-11-25 11:53:10,604 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3400 states and 3937 transitions.
[2020-11-25 11:53:10,618 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3400 to 3398.
[2020-11-25 11:53:10,618 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3398 states.
[2020-11-25 11:53:10,621 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3398 states to 3398 states and 3932 transitions.
[2020-11-25 11:53:10,621 INFO  L751         BuchiCegarLoop]: Abstraction has 3398 states and 3932 transitions.
[2020-11-25 11:53:10,621 INFO  L631         BuchiCegarLoop]: Abstraction has 3398 states and 3932 transitions.
[2020-11-25 11:53:10,621 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 11:53:10,621 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3398 states and 3932 transitions.
[2020-11-25 11:53:10,625 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:53:10,625 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:10,625 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:10,626 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:10,626 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND FALSE  !(choice == 13)
[L6376]  COND FALSE  !(choice == 12)
[L6383]  COND FALSE  !(choice == 11)
[L6390]  COND FALSE  !(choice == 10)
[L6396]  COND FALSE  !(choice == 9)
[L6402]  COND FALSE  !(choice == 8)
[L6408]  COND FALSE  !(choice == 7)
[L6415]  COND TRUE   choice == 6
[L6416]              gas := gas - 21000;
[L6417]  COND TRUE   gas >= 0
[L6418]              assume amount_s810 >= 0 && amount_s810 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6419]              assume msgvalue_MSG == 0;
[L6420]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L1348]              havoc __exception;
[L1349]              revert := false;
[L1350]  COND FALSE  !(__exception)
[L1376]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L4035]  COND FALSE  !(DType[this] == CabGoldToken)
[L4040]  COND TRUE   DType[this] == ERC20Burnable
[L4041]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s810);
[L3349]              __var_11 := null;
[L3350]  COND FALSE  !(!(account_s521 != null))
[L3354]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s521);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3354]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s521);
[L3355]  COND FALSE  !(revert)
[L3358]              _totalSupply_ERC20[this] := __var_12;
[L3359]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s521], value_s521);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3359]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s521], value_s521);
[L3360]  COND FALSE  !(revert)
[L3363]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s521];
[L3364]              _balances_ERC20[this][account_s521] := __var_13;
[L3365]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s521];
[L3366]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4041]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s810);
[L4042]  COND FALSE  !(revert)
[L1376]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L1377]              assume !revert && gas >= 0;
[L6420]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND TRUE   !(c_s26 >= a_s26)
[L2603]              revert := true;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND TRUE   !(c_s26 >= a_s26)
[L2603]              revert := true;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:10,629 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:10,630 INFO  L82        PathProgramCache]: Analyzing trace with hash 1397768503, now seen corresponding path program 1 times
[2020-11-25 11:53:10,630 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:10,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:10,725 INFO  L134       CoverageAnalysis]: Checked inductivity of 329 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 328 trivial. 0 not checked.
[2020-11-25 11:53:10,725 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:10,726 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:53:10,726 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:10,726 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:53:10,726 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:53:10,726 INFO  L87              Difference]: Start difference. First operand 3398 states and 3932 transitions. cyclomatic complexity: 540 Second operand 6 states.
[2020-11-25 11:53:10,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:10,783 INFO  L93              Difference]: Finished difference Result 3416 states and 3948 transitions.
[2020-11-25 11:53:10,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:53:10,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3416 states and 3948 transitions.
[2020-11-25 11:53:10,789 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:53:10,795 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3416 states to 3388 states and 3918 transitions.
[2020-11-25 11:53:10,795 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 780
[2020-11-25 11:53:10,795 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 780
[2020-11-25 11:53:10,795 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3388 states and 3918 transitions.
[2020-11-25 11:53:10,797 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:10,797 INFO  L728         BuchiCegarLoop]: Abstraction has 3388 states and 3918 transitions.
[2020-11-25 11:53:10,799 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3388 states and 3918 transitions.
[2020-11-25 11:53:10,813 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3388 to 3388.
[2020-11-25 11:53:10,813 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3388 states.
[2020-11-25 11:53:10,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3388 states to 3388 states and 3918 transitions.
[2020-11-25 11:53:10,816 INFO  L751         BuchiCegarLoop]: Abstraction has 3388 states and 3918 transitions.
[2020-11-25 11:53:10,816 INFO  L631         BuchiCegarLoop]: Abstraction has 3388 states and 3918 transitions.
[2020-11-25 11:53:10,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 11:53:10,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3388 states and 3918 transitions.
[2020-11-25 11:53:10,819 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:53:10,820 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:10,820 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:10,820 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:10,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND FALSE  !(choice == 13)
[L6376]  COND FALSE  !(choice == 12)
[L6383]  COND FALSE  !(choice == 11)
[L6390]  COND FALSE  !(choice == 10)
[L6396]  COND FALSE  !(choice == 9)
[L6402]  COND FALSE  !(choice == 8)
[L6408]  COND FALSE  !(choice == 7)
[L6415]  COND TRUE   choice == 6
[L6416]              gas := gas - 21000;
[L6417]  COND TRUE   gas >= 0
[L6418]              assume amount_s810 >= 0 && amount_s810 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6419]              assume msgvalue_MSG == 0;
[L6420]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L1348]              havoc __exception;
[L1349]              revert := false;
[L1350]  COND FALSE  !(__exception)
[L1376]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L4035]  COND TRUE   DType[this] == CabGoldToken
[L4036]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s810);
[L3349]              __var_11 := null;
[L3350]  COND FALSE  !(!(account_s521 != null))
[L3354]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s521);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3354]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s521);
[L3355]  COND FALSE  !(revert)
[L3358]              _totalSupply_ERC20[this] := __var_12;
[L3359]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s521], value_s521);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3359]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s521], value_s521);
[L3360]  COND FALSE  !(revert)
[L3363]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s521];
[L3364]              _balances_ERC20[this][account_s521] := __var_13;
[L3365]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s521];
[L3366]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4036]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s810);
[L4037]  COND FALSE  !(revert)
[L1376]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L1377]              assume !revert && gas >= 0;
[L6420]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s810);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND TRUE   __exception
[L420]               __tmp__Balance := Balance;
[L421]               __tmp__DType := DType;
[L422]               __tmp__Alloc := Alloc;
[L423]               __tmp__balance_ADDR := balance_ADDR;
[L424]               __tmp__M_Ref_int := M_Ref_int;
[L425]               __tmp__sum__balances0 := sum__balances0;
[L426]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L427]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L428]               __tmp__sum__allowances1 := sum__allowances1;
[L429]               __tmp__M_Ref_bool := M_Ref_bool;
[L430]               __tmp__sum := sum;
[L431]               __tmp__Length := Length;
[L432]               __tmp__now := now;
[L433]               __tmp___balances_ERC20 := _balances_ERC20;
[L434]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L435]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L436]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L437]               __tmp___minters_MinterRole := _minters_MinterRole;
[L438]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L439]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L440]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L441]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L442]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2830]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2831]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3212]              __var_4 := null;
[L3213]  COND FALSE  !(!(sender_s435 != null))
[L3217]              __var_5 := null;
[L3218]  COND FALSE  !(!(recipient_s435 != null))
[L3222]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L2625]  COND FALSE  !(!(b_s51 <= a_s51))
[L2629]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2630]              __ret_0_ := c_s51;
[L3222]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s435], amount_s435);
[L3223]  COND FALSE  !(revert)
[L3226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s435];
[L3227]              __tmp___balances_ERC20[this][sender_s435] := __var_6;
[L3228]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s435];
[L3229]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L2601]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2602]  COND TRUE   !(c_s26 >= a_s26)
[L2603]              revert := true;
[L3229]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s435], amount_s435);
[L3230]  COND TRUE   revert
[L2831]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2832]  COND TRUE   revert
[L442]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L443]               assume revert || gas < 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:10,823 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:10,824 INFO  L82        PathProgramCache]: Analyzing trace with hash -291937610, now seen corresponding path program 1 times
[2020-11-25 11:53:10,824 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:10,838 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:10,986 INFO  L134       CoverageAnalysis]: Checked inductivity of 329 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 329 trivial. 0 not checked.
[2020-11-25 11:53:10,986 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:10,986 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 11:53:10,986 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:10,986 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 11:53:10,986 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=153, Unknown=0, NotChecked=0, Total=182
[2020-11-25 11:53:10,987 INFO  L87              Difference]: Start difference. First operand 3388 states and 3918 transitions. cyclomatic complexity: 536 Second operand 14 states.
[2020-11-25 11:53:13,669 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:13,669 INFO  L93              Difference]: Finished difference Result 3458 states and 4011 transitions.
[2020-11-25 11:53:13,669 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 11:53:13,669 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3458 states and 4011 transitions.
[2020-11-25 11:53:13,676 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:53:13,682 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3458 states to 3412 states and 3963 transitions.
[2020-11-25 11:53:13,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 811
[2020-11-25 11:53:13,682 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 811
[2020-11-25 11:53:13,682 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3412 states and 3963 transitions.
[2020-11-25 11:53:13,685 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:13,685 INFO  L728         BuchiCegarLoop]: Abstraction has 3412 states and 3963 transitions.
[2020-11-25 11:53:13,687 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3412 states and 3963 transitions.
[2020-11-25 11:53:13,699 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3412 to 3285.
[2020-11-25 11:53:13,699 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3285 states.
[2020-11-25 11:53:13,702 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3285 states to 3285 states and 3788 transitions.
[2020-11-25 11:53:13,702 INFO  L751         BuchiCegarLoop]: Abstraction has 3285 states and 3788 transitions.
[2020-11-25 11:53:13,702 INFO  L631         BuchiCegarLoop]: Abstraction has 3285 states and 3788 transitions.
[2020-11-25 11:53:13,702 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 11:53:13,702 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3285 states and 3788 transitions.
[2020-11-25 11:53:13,705 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:53:13,705 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:13,705 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:13,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:13,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND FALSE  !(choice == 13)
[L6376]  COND FALSE  !(choice == 12)
[L6383]  COND FALSE  !(choice == 11)
[L6390]  COND FALSE  !(choice == 10)
[L6396]  COND FALSE  !(choice == 9)
[L6402]  COND FALSE  !(choice == 8)
[L6408]  COND TRUE   choice == 7
[L6409]              gas := gas - 21000;
[L6410]  COND TRUE   gas >= 0
[L6411]              assume amount_s795 >= 0 && amount_s795 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6412]              assume msgvalue_MSG == 0;
[L6413]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L1217]              havoc __exception;
[L1218]              revert := false;
[L1219]  COND FALSE  !(__exception)
[L1245]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L3947]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5520]  COND TRUE   DType[this] == CabGoldToken
[L5521]  CALL        call __var_21 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3728]  CALL        call __var_22 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s718);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3728]  RET         call __var_22 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s718);
[L3729]  COND FALSE  !(revert)
[L3732]              __ret_0_ := __var_22;
[L5521]  RET         call __var_21 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5522]  COND FALSE  !(revert)
[L5538]  COND FALSE  !(!__var_21)
[L3947]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3948]  COND FALSE  !(revert)
[L3951]  COND FALSE  !(DType[this] == CabGoldToken)
[L3956]  COND TRUE   DType[this] == ERC20Mintable
[L3957]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L3300]              __var_8 := null;
[L3301]  COND FALSE  !(!(account_s478 != null))
[L3305]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3305]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L3306]  COND FALSE  !(revert)
[L3309]              _totalSupply_ERC20[this] := __var_9;
[L3310]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3310]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L3311]  COND FALSE  !(revert)
[L3314]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L3315]              _balances_ERC20[this][account_s478] := __var_10;
[L3316]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L3317]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3957]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L3958]  COND FALSE  !(revert)
[L3964]              __ret_0_ := true;
[L1245]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L1246]              assume !revert && gas >= 0;
[L6413]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:13,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:13,710 INFO  L82        PathProgramCache]: Analyzing trace with hash -1299703916, now seen corresponding path program 1 times
[2020-11-25 11:53:13,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:13,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:13,803 INFO  L134       CoverageAnalysis]: Checked inductivity of 339 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 338 trivial. 0 not checked.
[2020-11-25 11:53:13,803 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:13,803 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:53:13,803 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:13,803 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:53:13,803 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:53:13,803 INFO  L87              Difference]: Start difference. First operand 3285 states and 3788 transitions. cyclomatic complexity: 508 Second operand 6 states.
[2020-11-25 11:53:13,867 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:13,867 INFO  L93              Difference]: Finished difference Result 3305 states and 3806 transitions.
[2020-11-25 11:53:13,867 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:53:13,867 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3305 states and 3806 transitions.
[2020-11-25 11:53:13,873 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:53:13,878 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3305 states to 3275 states and 3774 transitions.
[2020-11-25 11:53:13,878 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 740
[2020-11-25 11:53:13,878 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 740
[2020-11-25 11:53:13,878 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3275 states and 3774 transitions.
[2020-11-25 11:53:13,880 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:13,880 INFO  L728         BuchiCegarLoop]: Abstraction has 3275 states and 3774 transitions.
[2020-11-25 11:53:13,882 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3275 states and 3774 transitions.
[2020-11-25 11:53:13,893 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3275 to 3275.
[2020-11-25 11:53:13,893 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3275 states.
[2020-11-25 11:53:13,896 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3275 states to 3275 states and 3774 transitions.
[2020-11-25 11:53:13,896 INFO  L751         BuchiCegarLoop]: Abstraction has 3275 states and 3774 transitions.
[2020-11-25 11:53:13,896 INFO  L631         BuchiCegarLoop]: Abstraction has 3275 states and 3774 transitions.
[2020-11-25 11:53:13,896 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 11:53:13,896 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3275 states and 3774 transitions.
[2020-11-25 11:53:13,899 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:53:13,899 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:13,899 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:13,900 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:13,901 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND FALSE  !(choice == 15)
[L6362]  COND FALSE  !(choice == 14)
[L6369]  COND FALSE  !(choice == 13)
[L6376]  COND FALSE  !(choice == 12)
[L6383]  COND FALSE  !(choice == 11)
[L6390]  COND FALSE  !(choice == 10)
[L6396]  COND FALSE  !(choice == 9)
[L6402]  COND FALSE  !(choice == 8)
[L6408]  COND TRUE   choice == 7
[L6409]              gas := gas - 21000;
[L6410]  COND TRUE   gas >= 0
[L6411]              assume amount_s795 >= 0 && amount_s795 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6412]              assume msgvalue_MSG == 0;
[L6413]  CALL        call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L1217]              havoc __exception;
[L1218]              revert := false;
[L1219]  COND FALSE  !(__exception)
[L1245]  CALL        call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L3947]  CALL        call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5520]  COND TRUE   DType[this] == CabGoldToken
[L5521]  CALL        call __var_21 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3728]  CALL        call __var_22 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s718);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3728]  RET         call __var_22 := has~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s718);
[L3729]  COND FALSE  !(revert)
[L3732]              __ret_0_ := __var_22;
[L5521]  RET         call __var_21 := isMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5522]  COND FALSE  !(revert)
[L5538]  COND FALSE  !(!__var_21)
[L3947]  RET         call onlyMinter_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3948]  COND FALSE  !(revert)
[L3951]  COND TRUE   DType[this] == CabGoldToken
[L3952]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L3300]              __var_8 := null;
[L3301]  COND FALSE  !(!(account_s478 != null))
[L3305]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3305]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s478);
[L3306]  COND FALSE  !(revert)
[L3309]              _totalSupply_ERC20[this] := __var_9;
[L3310]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3310]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s478], amount_s478);
[L3311]  COND FALSE  !(revert)
[L3314]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s478];
[L3315]              _balances_ERC20[this][account_s478] := __var_10;
[L3316]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s478];
[L3317]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3952]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L3953]  COND FALSE  !(revert)
[L3964]              __ret_0_ := true;
[L1245]  RET         call __ret_0_ := mint~address~uint256_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L1246]              assume !revert && gas >= 0;
[L6413]  RET         call __ret_0_mint := mint~address~uint256_ERC20Mintable(this, msgsender_MSG, msgvalue_MSG, account_s795, amount_s795);
[L6471]  RET         call CorralChoice_CabGoldToken(this);
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:13,904 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:13,904 INFO  L82        PathProgramCache]: Analyzing trace with hash -944694790, now seen corresponding path program 1 times
[2020-11-25 11:53:13,905 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:13,925 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:14,188 INFO  L134       CoverageAnalysis]: Checked inductivity of 339 backedges. 58 proven. 0 refuted. 0 times theorem prover too weak. 281 trivial. 0 not checked.
[2020-11-25 11:53:14,189 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:14,189 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 11:53:14,189 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:14,189 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 11:53:14,189 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=293, Unknown=0, NotChecked=0, Total=342
[2020-11-25 11:53:14,189 INFO  L87              Difference]: Start difference. First operand 3275 states and 3774 transitions. cyclomatic complexity: 504 Second operand 19 states.
[2020-11-25 11:53:16,638 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:16,638 INFO  L93              Difference]: Finished difference Result 1793 states and 2054 transitions.
[2020-11-25 11:53:16,638 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 11:53:16,638 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1793 states and 2054 transitions.
[2020-11-25 11:53:16,641 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:53:16,641 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1793 states to 0 states and 0 transitions.
[2020-11-25 11:53:16,641 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:53:16,641 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:53:16,641 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:53:16,641 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:16,641 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:53:16,641 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:53:16,641 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:53:16,641 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 11:53:16,641 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:53:16,641 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:53:16,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:53:16,644 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:53:16 BasicIcfg
[2020-11-25 11:53:16,645 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:53:16,645 INFO  L168              Benchmark]: Toolchain (without parser) took 45503.90 ms. Allocated memory was 1.0 GB in the beginning and 2.7 GB in the end (delta: 1.7 GB). Free memory was 929.8 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 211.2 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,646 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,646 INFO  L168              Benchmark]: Boogie Preprocessor took 107.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,646 INFO  L168              Benchmark]: UtopiaSpecLang took 63.42 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,646 INFO  L168              Benchmark]: Boogie Printer took 19.84 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,646 INFO  L168              Benchmark]: RCFGBuilder took 994.91 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 47.2 MB). Free memory was 903.0 MB in the beginning and 984.9 MB in the end (delta: -81.9 MB). Peak memory consumption was 189.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,647 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.27 ms. Allocated memory is still 1.1 GB. Free memory was 984.9 MB in the beginning and 978.2 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,647 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1882.38 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 177.2 MB). Free memory was 978.2 MB in the beginning and 919.2 MB in the end (delta: 59.0 MB). Peak memory consumption was 459.3 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,648 INFO  L168              Benchmark]: BlockEncodingV2 took 166.00 ms. Allocated memory is still 1.3 GB. Free memory was 919.2 MB in the beginning and 823.8 MB in the end (delta: 95.4 MB). Peak memory consumption was 95.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,648 INFO  L168              Benchmark]: BuchiAutomizer took 42229.27 ms. Allocated memory was 1.3 GB in the beginning and 2.7 GB in the end (delta: 1.5 GB). Free memory was 823.8 MB in the beginning and 2.4 GB in the end (delta: -1.6 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:53:16,651 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5916 locations, 11051 edges
  - StatisticsResult: Encoded RCFG
    5808 locations, 10756 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 107.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.42 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.84 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 994.91 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 47.2 MB). Free memory was 903.0 MB in the beginning and 984.9 MB in the end (delta: -81.9 MB). Peak memory consumption was 189.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.27 ms. Allocated memory is still 1.1 GB. Free memory was 984.9 MB in the beginning and 978.2 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1882.38 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 177.2 MB). Free memory was 978.2 MB in the beginning and 919.2 MB in the end (delta: 59.0 MB). Peak memory consumption was 459.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 166.00 ms. Allocated memory is still 1.3 GB. Free memory was 919.2 MB in the beginning and 823.8 MB in the end (delta: 95.4 MB). Peak memory consumption was 95.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 42229.27 ms. Allocated memory was 1.3 GB in the beginning and 2.7 GB in the end (delta: 1.5 GB). Free memory was 823.8 MB in the beginning and 2.4 GB in the end (delta: -1.6 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2279 locations, 3353 edges
  - StatisticsResult: BuchiProgram size
    5916 locations, 11051 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 21 terminating modules (21 trivial, 0 deterministic, 0 nondeterministic). 21 modules have a trivial ranking function, the largest among these consists of 34 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 42.1s and 22 iterations.  TraceHistogramMax:6. Analysis of lassos took 4.3s. Construction of modules took 29.2s. BÃ¼chi inclusion checks took 7.0s. Highest rank in rank-based complementation 0. Minimization of det autom 21. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 20 MinimizatonAttempts, 2303 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 4420 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 82441 SDtfs, 60415 SDslu, 314435 SDs, 0 SdLazy, 295155 SolverSat, 13026 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 29.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU21 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
