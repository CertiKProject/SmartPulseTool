This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:02:55,003 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:02:55,004 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:02:55,020 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:02:55,021 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:02:55,021 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:02:55,023 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:02:55,025 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:02:55,028 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:02:55,030 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:02:55,030 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:02:55,031 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:02:55,031 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:02:55,032 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:02:55,033 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:02:55,034 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:02:55,034 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:02:55,035 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:02:55,037 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:02:55,038 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:02:55,038 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:02:55,039 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:02:55,041 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:02:55,041 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:02:55,041 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:02:55,041 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:02:55,042 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:02:55,042 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:02:55,043 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:02:55,043 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:02:55,043 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:02:55,044 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:02:55,044 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:02:55,045 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:02:55,045 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:02:55,046 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:02:55,046 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:02:55,046 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:02:55,046 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:02:55,047 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:02:55,048 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:02:55,048 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:02:55,056 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:02:55,056 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:02:55,057 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:02:55,058 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:02:55,058 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:02:55,058 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:02:55,058 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:02:55,058 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:02:55,058 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:02:55,058 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:02:55,058 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:02:55,058 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:02:55,059 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:02:55,059 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:02:55,060 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:02:55,060 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:02:55,060 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:02:55,060 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:02:55,084 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:02:55,094 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:02:55,096 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:02:55,096 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:02:55,097 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:02:55,097 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl
[2020-11-25 17:02:55,097 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl'
[2020-11-25 17:02:55,187 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:02:55,189 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:02:55,189 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:02:55,189 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:02:55,189 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:02:55,205 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,207 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,239 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,240 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,263 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,274 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,283 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,293 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:02:55,294 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:02:55,294 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:02:55,298 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:02:55,305 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/1) ...
[2020-11-25 17:02:55,323 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_GOF[this] == old(governance_GOF[this]) && pendingGov_GOF[this] == old(pendingGov_GOF[this]) && minters_GOF[this] == old(minters_GOF[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]))))
[2020-11-25 17:02:55,329 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_GOF[this] == old(governance_GOF[this]) && pendingGov_GOF[this] == old(pendingGov_GOF[this]) && minters_GOF[this] == old(minters_GOF[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]))))
[2020-11-25 17:02:55,338 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_GOF[this] == old(governance_GOF[this]) && pendingGov_GOF[this] == old(pendingGov_GOF[this]) && minters_GOF[this] == old(minters_GOF[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]))))
[2020-11-25 17:02:55,344 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s140 && amount_s140<=_balances_ERC20[this][msg.sender] ) && amount_s140>=0 ) && amount_s140<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s140]>=0 ) && _balances_ERC20[this][recipient_s140]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:02:55,347 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && governance_GOF[this]==( old(governance_GOF[this]) ) ) && pendingGov_GOF[this]==( old(pendingGov_GOF[this]) ) ) && minters_GOF[this]==( old(minters_GOF[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && _cap_ERC20Detailed[this]==( old(_cap_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[governance_GOF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[governance_GOF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[pendingGov_GOF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[pendingGov_GOF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[minters_GOF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[minters_GOF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 17:02:55,358 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_GOF[this] == old(governance_GOF[this]) && pendingGov_GOF[this] == old(pendingGov_GOF[this]) && minters_GOF[this] == old(minters_GOF[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]))))
[2020-11-25 17:02:55,359 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:02:55,371 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:02:55 PropertyContainer
[2020-11-25 17:02:55,371 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:02:55,372 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:02:55,372 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:02:55,372 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:02:55,373 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/2) ...
[2020-11-25 17:02:55,373 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:02:55,373 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:02:55,391 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:02:55" (2/2) ...
[2020-11-25 17:02:55,391 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:02:55,391 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:02:55,391 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:02:55,391 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:02:55,392 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/2) ...
[2020-11-25 17:02:55,446 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:02:55,446 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 17:02:55,446 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 17:02:55,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 17:02:55,446 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 17:02:55,446 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 17:02:55,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 17:02:55,447 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:02:55,448 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 17:02:55,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 17:02:55,448 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 17:02:55,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 17:02:55,449 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 17:02:55,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 17:02:55,449 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 17:02:55,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 17:02:55,449 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 17:02:55,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 17:02:55,449 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 17:02:55,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 17:02:55,449 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:02:55,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 17:02:55,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 17:02:55,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 17:02:55,450 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Detailed
[2020-11-25 17:02:55,451 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:02:55,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF_NoBaseCtor__success
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF
[2020-11-25 17:02:55,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF
[2020-11-25 17:02:55,452 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GOF
[2020-11-25 17:02:55,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GOF
[2020-11-25 17:02:55,453 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_GOF
[2020-11-25 17:02:55,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_GOF
[2020-11-25 17:02:55,453 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_GOF
[2020-11-25 17:02:55,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_GOF
[2020-11-25 17:02:55,453 INFO  L130     BoogieDeclarations]: Found specification of procedure setPendingGov~address_GOF
[2020-11-25 17:02:55,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPendingGov~address_GOF
[2020-11-25 17:02:55,453 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptGov_GOF
[2020-11-25 17:02:55,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptGov_GOF
[2020-11-25 17:02:55,453 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_GOF__success
[2020-11-25 17:02:55,453 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_GOF
[2020-11-25 17:02:55,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_GOF
[2020-11-25 17:02:55,454 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingGov_GOF
[2020-11-25 17:02:55,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingGov_GOF
[2020-11-25 17:02:55,454 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_GOF
[2020-11-25 17:02:55,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_GOF
[2020-11-25 17:02:55,454 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:02:55,454 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:02:55,454 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:02:55,454 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGov_pre__success
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:02:55,455 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GOF
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 17:02:55,456 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 17:02:55,457 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,458 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 17:02:55,459 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 17:02:55,459 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,459 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,459 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 17:02:55,459 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 17:02:55,460 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 17:02:55,460 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 17:02:55,460 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 17:02:55,460 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 17:02:55,461 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 17:02:55,461 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 17:02:55,461 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 17:02:55,461 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Detailed__success
[2020-11-25 17:02:55,462 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Detailed__fail
[2020-11-25 17:02:55,462 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:02:55,462 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:02:55,462 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:02:55,462 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:02:55,462 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:02:55,463 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:02:55,463 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:02:55,463 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF_NoBaseCtor__fail
[2020-11-25 17:02:55,463 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF__success
[2020-11-25 17:02:55,464 INFO  L130     BoogieDeclarations]: Found specification of procedure GOF_GOF__fail
[2020-11-25 17:02:55,464 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GOF__success
[2020-11-25 17:02:55,464 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GOF__fail
[2020-11-25 17:02:55,464 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_GOF__success
[2020-11-25 17:02:55,464 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_GOF__fail
[2020-11-25 17:02:55,465 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_GOF__success
[2020-11-25 17:02:55,465 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_GOF__fail
[2020-11-25 17:02:55,465 INFO  L130     BoogieDeclarations]: Found specification of procedure setPendingGov~address_GOF__success
[2020-11-25 17:02:55,465 INFO  L130     BoogieDeclarations]: Found specification of procedure setPendingGov~address_GOF__fail
[2020-11-25 17:02:55,465 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptGov_GOF__success
[2020-11-25 17:02:55,465 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptGov_GOF__fail
[2020-11-25 17:02:55,466 INFO  L130     BoogieDeclarations]: Found specification of procedure _beforeTokenTransfer~address~address~uint256_GOF__fail
[2020-11-25 17:02:55,466 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_GOF__success
[2020-11-25 17:02:55,466 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_GOF__fail
[2020-11-25 17:02:55,466 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingGov_GOF__success
[2020-11-25 17:02:55,466 INFO  L130     BoogieDeclarations]: Found specification of procedure pendingGov_GOF__fail
[2020-11-25 17:02:55,467 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_GOF__success
[2020-11-25 17:02:55,467 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_GOF__fail
[2020-11-25 17:02:55,467 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:02:55,467 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:02:55,467 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:02:55,467 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGov_pre__fail
[2020-11-25 17:02:55,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:02:55,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:02:55,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 17:02:55,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 17:02:55,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 17:02:55,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 17:02:55,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 17:02:55,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 17:02:55,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 17:02:55,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 17:02:55,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 17:02:55,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 17:02:55,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:02:55,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:02:55,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 17:02:55,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 17:02:55,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 17:02:55,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 17:02:55,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 17:02:55,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 17:02:55,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 17:02:55,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 17:02:55,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 17:02:55,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_ERC20__fail
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_ERC20__success
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 17:02:55,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Detailed__fail
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Detailed__success
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:02:55,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF_NoBaseCtor__fail
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF_NoBaseCtor__success
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF__fail
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure GOF_GOF__success
[2020-11-25 17:02:55,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GOF__fail
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GOF__success
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_GOF__fail
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_GOF__success
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_GOF__fail
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_GOF__success
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPendingGov~address_GOF__fail
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPendingGov~address_GOF__success
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptGov_GOF__fail
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptGov_GOF__success
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_GOF__fail
[2020-11-25 17:02:55,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure _beforeTokenTransfer~address~address~uint256_GOF__success
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_GOF__fail
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_GOF__success
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingGov_GOF__fail
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure pendingGov_GOF__success
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_GOF__fail
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_GOF__success
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:02:55,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGov_pre__fail
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGov_pre__success
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:02:55,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:02:55,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GOF
[2020-11-25 17:02:55,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:02:55,479 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:02:55,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:02:55,717 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:02:55,718 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:02:55,718 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:02:56,280 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:02:56,281 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 17:02:56,283 INFO  L202        PluginConnector]: Adding new model GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:02:56 BoogieIcfgContainer
[2020-11-25 17:02:56,283 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:02:55" (2/2) ...
[2020-11-25 17:02:56,283 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:02:56,284 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@50ed29e2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:02:56, skipping insertion in model container
[2020-11-25 17:02:56,284 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:02:56,284 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:02:56,284 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:02:56,285 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:02:56,285 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/3) ...
[2020-11-25 17:02:56,286 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6b993753 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:02:56, skipping insertion in model container
[2020-11-25 17:02:56,286 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:02:55" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:02:56,322 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:02:56 NWAContainer
[2020-11-25 17:02:56,322 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:02:56,323 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:02:56,323 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:02:56,323 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:02:56,324 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:02:56" (3/4) ...
[2020-11-25 17:02:56,325 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@68c6402b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:02:56, skipping insertion in model container
[2020-11-25 17:02:56,325 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:02:56" (4/4) ...
[2020-11-25 17:02:56,328 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:02:56,332 INFO  L110   BuchiProductObserver]: Initial RCFG 2086 locations, 2868 edges
[2020-11-25 17:02:56,333 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:02:56,344 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:02:57,699 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:02:57,706 INFO  L110   BuchiProductObserver]: BuchiProgram size 5190 locations, 9326 edges
[2020-11-25 17:02:57,706 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:02:57 BoogieIcfgContainer
[2020-11-25 17:02:57,706 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:02:57,706 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:02:57,706 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:02:57,708 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:02:57,708 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:02:57" (1/1) ...
[2020-11-25 17:02:57,841 INFO  L313           BlockEncoder]: Initial Icfg 5190 locations, 9326 edges
[2020-11-25 17:02:57,842 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:02:57,843 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:02:57,843 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:02:57,844 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:02:57,861 INFO  L70    emoveInfeasibleEdges]: Removed 180 edges and 15 locations because of local infeasibility
[2020-11-25 17:02:57,873 INFO  L70        RemoveSinkStates]: Removed 122 edges and 81 locations by removing sink states
[2020-11-25 17:02:57,890 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:02:57,897 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:02:57,903 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:02:57,903 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:02:57,907 INFO  L313           BlockEncoder]: Encoded RCFG 5070 locations, 8989 edges
[2020-11-25 17:02:57,908 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:02:57 BasicIcfg
[2020-11-25 17:02:57,908 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:02:57,908 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:02:57,908 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:02:57,911 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:02:57,911 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:02:57,911 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:02:55" (1/6) ...
[2020-11-25 17:02:57,913 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3658bddc and model type GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:02:57, skipping insertion in model container
[2020-11-25 17:02:57,913 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:02:57,913 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:02:55" (2/6) ...
[2020-11-25 17:02:57,913 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3658bddc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:02:57, skipping insertion in model container
[2020-11-25 17:02:57,914 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:02:57,914 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:02:56" (3/6) ...
[2020-11-25 17:02:57,914 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3658bddc and model type GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:02:57, skipping insertion in model container
[2020-11-25 17:02:57,914 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:02:57,914 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:02:56" (4/6) ...
[2020-11-25 17:02:57,914 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3658bddc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:02:57, skipping insertion in model container
[2020-11-25 17:02:57,914 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:02:57,914 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:02:57" (5/6) ...
[2020-11-25 17:02:57,914 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3658bddc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:02:57, skipping insertion in model container
[2020-11-25 17:02:57,914 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:02:57,915 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:02:57" (6/6) ...
[2020-11-25 17:02:57,916 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GOF_0x488e0369f9bc5c40c002ea7c1fe4fd01a198801c_transfer-self.bpl_BEv2
[2020-11-25 17:02:57,947 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:02:57,948 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:02:57,948 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:02:57,948 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:02:57,948 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:02:57,948 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:02:57,948 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:02:57,948 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:02:57,948 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:02:57,994 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5070 states.
[2020-11-25 17:02:58,051 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:02:58,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:02:58,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:02:58,060 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:02:58,060 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:02:58,060 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:02:58,060 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5070 states.
[2020-11-25 17:02:58,115 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:02:58,115 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:02:58,115 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:02:58,117 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:02:58,117 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND TRUE   revert
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:02:58,130 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:02:58,131 INFO  L82        PathProgramCache]: Analyzing trace with hash 776956254, now seen corresponding path program 1 times
[2020-11-25 17:02:58,136 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:02:58,152 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:02:58,193 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:02:58,195 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:02:58,195 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:02:58,477 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:02:58,489 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:02:58,489 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:02:58,491 INFO  L87              Difference]: Start difference. First operand 5070 states. Second operand 4 states.
[2020-11-25 17:02:59,044 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:02:59,044 INFO  L93              Difference]: Finished difference Result 3547 states and 4156 transitions.
[2020-11-25 17:02:59,044 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:02:59,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3547 states and 4156 transitions.
[2020-11-25 17:02:59,064 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:02:59,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3547 states to 3547 states and 4156 transitions.
[2020-11-25 17:02:59,090 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 17:02:59,092 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 890
[2020-11-25 17:02:59,092 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3547 states and 4156 transitions.
[2020-11-25 17:02:59,103 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:02:59,103 INFO  L728         BuchiCegarLoop]: Abstraction has 3547 states and 4156 transitions.
[2020-11-25 17:02:59,123 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3547 states and 4156 transitions.
[2020-11-25 17:02:59,179 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3547 to 3547.
[2020-11-25 17:02:59,180 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3547 states.
[2020-11-25 17:02:59,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3547 states to 3547 states and 4156 transitions.
[2020-11-25 17:02:59,186 INFO  L751         BuchiCegarLoop]: Abstraction has 3547 states and 4156 transitions.
[2020-11-25 17:02:59,187 INFO  L631         BuchiCegarLoop]: Abstraction has 3547 states and 4156 transitions.
[2020-11-25 17:02:59,187 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:02:59,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3547 states and 4156 transitions.
[2020-11-25 17:02:59,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:02:59,195 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:02:59,195 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:02:59,197 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:02:59,197 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND TRUE   revert
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:02:59,201 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:02:59,201 INFO  L82        PathProgramCache]: Analyzing trace with hash -835908506, now seen corresponding path program 1 times
[2020-11-25 17:02:59,202 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:02:59,212 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:02:59,234 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:02:59,234 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:02:59,234 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:02:59,236 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:02:59,236 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:02:59,236 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:02:59,236 INFO  L87              Difference]: Start difference. First operand 3547 states and 4156 transitions. cyclomatic complexity: 611 Second operand 4 states.
[2020-11-25 17:03:00,241 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:00,241 INFO  L93              Difference]: Finished difference Result 4945 states and 5710 transitions.
[2020-11-25 17:03:00,241 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:03:00,241 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4945 states and 5710 transitions.
[2020-11-25 17:03:00,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:03:00,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4945 states to 4711 states and 5436 transitions.
[2020-11-25 17:03:00,273 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1199
[2020-11-25 17:03:00,274 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1228
[2020-11-25 17:03:00,274 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4711 states and 5436 transitions.
[2020-11-25 17:03:00,279 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:00,279 INFO  L728         BuchiCegarLoop]: Abstraction has 4711 states and 5436 transitions.
[2020-11-25 17:03:00,283 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4711 states and 5436 transitions.
[2020-11-25 17:03:00,315 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4711 to 3657.
[2020-11-25 17:03:00,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3657 states.
[2020-11-25 17:03:00,319 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3657 states to 3657 states and 4070 transitions.
[2020-11-25 17:03:00,319 INFO  L751         BuchiCegarLoop]: Abstraction has 3657 states and 4070 transitions.
[2020-11-25 17:03:00,319 INFO  L631         BuchiCegarLoop]: Abstraction has 3657 states and 4070 transitions.
[2020-11-25 17:03:00,319 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:03:00,319 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3657 states and 4070 transitions.
[2020-11-25 17:03:00,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:00,327 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:00,327 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:00,329 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:00,329 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND TRUE   !(sender_s329 != null)
[L3051]              revert := true;
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND TRUE   !(sender_s329 != null)
[L3051]              revert := true;
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:00,333 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:00,333 INFO  L82        PathProgramCache]: Analyzing trace with hash 1955289907, now seen corresponding path program 1 times
[2020-11-25 17:03:00,334 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:00,349 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:00,439 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:00,439 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:00,439 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 17:03:00,440 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:00,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 17:03:00,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 17:03:00,440 INFO  L87              Difference]: Start difference. First operand 3657 states and 4070 transitions. cyclomatic complexity: 415 Second operand 8 states.
[2020-11-25 17:03:00,549 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:00,549 INFO  L93              Difference]: Finished difference Result 3681 states and 4098 transitions.
[2020-11-25 17:03:00,549 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 17:03:00,549 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3681 states and 4098 transitions.
[2020-11-25 17:03:00,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:00,569 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3681 states to 3661 states and 4076 transitions.
[2020-11-25 17:03:00,569 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 957
[2020-11-25 17:03:00,569 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 957
[2020-11-25 17:03:00,569 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3661 states and 4076 transitions.
[2020-11-25 17:03:00,573 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:00,573 INFO  L728         BuchiCegarLoop]: Abstraction has 3661 states and 4076 transitions.
[2020-11-25 17:03:00,576 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3661 states and 4076 transitions.
[2020-11-25 17:03:00,598 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3661 to 3661.
[2020-11-25 17:03:00,598 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3661 states.
[2020-11-25 17:03:00,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3661 states to 3661 states and 4076 transitions.
[2020-11-25 17:03:00,602 INFO  L751         BuchiCegarLoop]: Abstraction has 3661 states and 4076 transitions.
[2020-11-25 17:03:00,602 INFO  L631         BuchiCegarLoop]: Abstraction has 3661 states and 4076 transitions.
[2020-11-25 17:03:00,602 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:03:00,602 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3661 states and 4076 transitions.
[2020-11-25 17:03:00,606 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:00,606 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:00,606 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:00,608 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:00,608 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND TRUE   !(recipient_s329 != null)
[L3056]              revert := true;
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND TRUE   !(recipient_s329 != null)
[L3056]              revert := true;
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:00,612 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:00,612 INFO  L82        PathProgramCache]: Analyzing trace with hash 1853255641, now seen corresponding path program 1 times
[2020-11-25 17:03:00,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:00,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:00,659 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:00,659 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:00,660 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:03:00,660 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:00,660 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:03:00,660 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:03:00,660 INFO  L87              Difference]: Start difference. First operand 3661 states and 4076 transitions. cyclomatic complexity: 417 Second operand 7 states.
[2020-11-25 17:03:00,714 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:00,714 INFO  L93              Difference]: Finished difference Result 3765 states and 4193 transitions.
[2020-11-25 17:03:00,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:03:00,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3765 states and 4193 transitions.
[2020-11-25 17:03:00,723 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:00,734 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3765 states to 3757 states and 4185 transitions.
[2020-11-25 17:03:00,734 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 976
[2020-11-25 17:03:00,735 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 976
[2020-11-25 17:03:00,735 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3757 states and 4185 transitions.
[2020-11-25 17:03:00,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:00,738 INFO  L728         BuchiCegarLoop]: Abstraction has 3757 states and 4185 transitions.
[2020-11-25 17:03:00,741 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3757 states and 4185 transitions.
[2020-11-25 17:03:00,767 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3757 to 3744.
[2020-11-25 17:03:00,767 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3744 states.
[2020-11-25 17:03:00,771 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3744 states to 3744 states and 4170 transitions.
[2020-11-25 17:03:00,771 INFO  L751         BuchiCegarLoop]: Abstraction has 3744 states and 4170 transitions.
[2020-11-25 17:03:00,771 INFO  L631         BuchiCegarLoop]: Abstraction has 3744 states and 4170 transitions.
[2020-11-25 17:03:00,771 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:03:00,771 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3744 states and 4170 transitions.
[2020-11-25 17:03:00,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:00,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:00,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:00,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:00,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND FALSE  !(DType[this] == GOF)
[L3109]  COND TRUE   DType[this] == ERC20
[L3110]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3110]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3111]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND FALSE  !(DType[this] == GOF)
[L3109]  COND TRUE   DType[this] == ERC20
[L3110]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3110]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3111]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:00,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:00,781 INFO  L82        PathProgramCache]: Analyzing trace with hash -2136429251, now seen corresponding path program 1 times
[2020-11-25 17:03:00,782 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:00,792 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:00,840 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:00,840 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:00,840 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:03:00,840 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:00,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:03:00,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:03:00,841 INFO  L87              Difference]: Start difference. First operand 3744 states and 4170 transitions. cyclomatic complexity: 428 Second operand 7 states.
[2020-11-25 17:03:00,937 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:00,937 INFO  L93              Difference]: Finished difference Result 3828 states and 4263 transitions.
[2020-11-25 17:03:00,937 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:03:00,937 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3828 states and 4263 transitions.
[2020-11-25 17:03:00,945 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:00,958 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3828 states to 3754 states and 4178 transitions.
[2020-11-25 17:03:00,958 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 974
[2020-11-25 17:03:00,959 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 974
[2020-11-25 17:03:00,960 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3754 states and 4178 transitions.
[2020-11-25 17:03:00,966 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:00,966 INFO  L728         BuchiCegarLoop]: Abstraction has 3754 states and 4178 transitions.
[2020-11-25 17:03:00,971 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3754 states and 4178 transitions.
[2020-11-25 17:03:01,003 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3754 to 3754.
[2020-11-25 17:03:01,003 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3754 states.
[2020-11-25 17:03:01,008 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3754 states to 3754 states and 4178 transitions.
[2020-11-25 17:03:01,008 INFO  L751         BuchiCegarLoop]: Abstraction has 3754 states and 4178 transitions.
[2020-11-25 17:03:01,008 INFO  L631         BuchiCegarLoop]: Abstraction has 3754 states and 4178 transitions.
[2020-11-25 17:03:01,008 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:03:01,008 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3754 states and 4178 transitions.
[2020-11-25 17:03:01,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:01,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:01,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:01,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:01,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND FALSE  !(__tmp__DType[this] == GOF)
[L3064]  COND TRUE   __tmp__DType[this] == ERC20
[L3065]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3065]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3066]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND TRUE   !(b_s609 <= a_s609)
[L3503]              revert := true;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND FALSE  !(__tmp__DType[this] == GOF)
[L3064]  COND TRUE   __tmp__DType[this] == ERC20
[L3065]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3065]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3066]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND TRUE   !(b_s609 <= a_s609)
[L3503]              revert := true;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:01,024 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:01,024 INFO  L82        PathProgramCache]: Analyzing trace with hash -37495816, now seen corresponding path program 1 times
[2020-11-25 17:03:01,025 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:01,046 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:01,112 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:01,112 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:01,112 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:03:01,113 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:01,113 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:03:01,113 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:03:01,113 INFO  L87              Difference]: Start difference. First operand 3754 states and 4178 transitions. cyclomatic complexity: 426 Second operand 4 states.
[2020-11-25 17:03:01,160 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:01,160 INFO  L93              Difference]: Finished difference Result 3806 states and 4248 transitions.
[2020-11-25 17:03:01,160 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:03:01,160 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3806 states and 4248 transitions.
[2020-11-25 17:03:01,166 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:01,175 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3806 states to 3806 states and 4248 transitions.
[2020-11-25 17:03:01,175 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 985
[2020-11-25 17:03:01,175 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 985
[2020-11-25 17:03:01,176 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3806 states and 4248 transitions.
[2020-11-25 17:03:01,178 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:01,178 INFO  L728         BuchiCegarLoop]: Abstraction has 3806 states and 4248 transitions.
[2020-11-25 17:03:01,181 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3806 states and 4248 transitions.
[2020-11-25 17:03:01,203 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3806 to 3796.
[2020-11-25 17:03:01,203 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3796 states.
[2020-11-25 17:03:01,206 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3796 states to 3796 states and 4236 transitions.
[2020-11-25 17:03:01,206 INFO  L751         BuchiCegarLoop]: Abstraction has 3796 states and 4236 transitions.
[2020-11-25 17:03:01,206 INFO  L631         BuchiCegarLoop]: Abstraction has 3796 states and 4236 transitions.
[2020-11-25 17:03:01,206 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:03:01,206 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3796 states and 4236 transitions.
[2020-11-25 17:03:01,210 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:01,210 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:01,210 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:01,212 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:01,212 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND TRUE   !(b_s609 <= a_s609)
[L3503]              revert := true;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND TRUE   !(b_s609 <= a_s609)
[L3503]              revert := true;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:01,215 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:01,215 INFO  L82        PathProgramCache]: Analyzing trace with hash 1148728415, now seen corresponding path program 1 times
[2020-11-25 17:03:01,216 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:01,227 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:01,284 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:01,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:01,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 17:03:01,285 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:01,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 17:03:01,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 17:03:01,285 INFO  L87              Difference]: Start difference. First operand 3796 states and 4236 transitions. cyclomatic complexity: 442 Second operand 10 states.
[2020-11-25 17:03:02,424 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:02,425 INFO  L93              Difference]: Finished difference Result 3995 states and 4463 transitions.
[2020-11-25 17:03:02,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 17:03:02,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3995 states and 4463 transitions.
[2020-11-25 17:03:02,431 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:02,439 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3995 states to 3995 states and 4463 transitions.
[2020-11-25 17:03:02,439 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1076
[2020-11-25 17:03:02,439 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1076
[2020-11-25 17:03:02,439 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3995 states and 4463 transitions.
[2020-11-25 17:03:02,442 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:02,442 INFO  L728         BuchiCegarLoop]: Abstraction has 3995 states and 4463 transitions.
[2020-11-25 17:03:02,445 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3995 states and 4463 transitions.
[2020-11-25 17:03:02,466 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3995 to 3800.
[2020-11-25 17:03:02,466 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3800 states.
[2020-11-25 17:03:02,469 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3800 states to 3800 states and 4244 transitions.
[2020-11-25 17:03:02,469 INFO  L751         BuchiCegarLoop]: Abstraction has 3800 states and 4244 transitions.
[2020-11-25 17:03:02,469 INFO  L631         BuchiCegarLoop]: Abstraction has 3800 states and 4244 transitions.
[2020-11-25 17:03:02,469 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:03:02,469 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3800 states and 4244 transitions.
[2020-11-25 17:03:02,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:02,473 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:02,473 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:02,475 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:02,475 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND TRUE   from_s867 == null
[L3796]  COND TRUE   __tmp__DType[this] == GOF
[L3797]  CALL        call __var_31 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2539]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L3797]  RET         call __var_31 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3798]  COND FALSE  !(revert)
[L3804]  CALL        call __var_30 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_31, amount_s867);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND FALSE  !(!(c_s582 >= a_s582))
[L3483]              __ret_0_ := c_s582;
[L3804]  RET         call __var_30 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_31, amount_s867);
[L3805]  COND FALSE  !(revert)
[L3808]  COND TRUE   __tmp__DType[this] == GOF
[L3809]  CALL        call __var_32 := cap_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L3433]              __ret_0_ := __tmp___cap_ERC20Detailed[this];
[L3809]  RET         call __var_32 := cap_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3816]  COND TRUE   !(__var_30 <= __var_32)
[L3817]              revert := true;
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND TRUE   from_s867 == null
[L3796]  COND TRUE   __tmp__DType[this] == GOF
[L3797]  CALL        call __var_31 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2539]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L3797]  RET         call __var_31 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3798]  COND FALSE  !(revert)
[L3804]  CALL        call __var_30 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_31, amount_s867);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND FALSE  !(!(c_s582 >= a_s582))
[L3483]              __ret_0_ := c_s582;
[L3804]  RET         call __var_30 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_31, amount_s867);
[L3805]  COND FALSE  !(revert)
[L3808]  COND TRUE   __tmp__DType[this] == GOF
[L3809]  CALL        call __var_32 := cap_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L3433]              __ret_0_ := __tmp___cap_ERC20Detailed[this];
[L3809]  RET         call __var_32 := cap_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3816]  COND TRUE   !(__var_30 <= __var_32)
[L3817]              revert := true;
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:02,478 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:02,478 INFO  L82        PathProgramCache]: Analyzing trace with hash -1004682093, now seen corresponding path program 1 times
[2020-11-25 17:03:02,479 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:02,488 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:02,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:02,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:02,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 17:03:02,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:02,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 17:03:02,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 17:03:02,527 INFO  L87              Difference]: Start difference. First operand 3800 states and 4244 transitions. cyclomatic complexity: 446 Second operand 9 states.
[2020-11-25 17:03:02,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:02,595 INFO  L93              Difference]: Finished difference Result 3910 states and 4381 transitions.
[2020-11-25 17:03:02,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 17:03:02,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3910 states and 4381 transitions.
[2020-11-25 17:03:02,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:02,609 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3910 states to 3864 states and 4324 transitions.
[2020-11-25 17:03:02,610 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 990
[2020-11-25 17:03:02,610 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 990
[2020-11-25 17:03:02,610 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3864 states and 4324 transitions.
[2020-11-25 17:03:02,612 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:02,612 INFO  L728         BuchiCegarLoop]: Abstraction has 3864 states and 4324 transitions.
[2020-11-25 17:03:02,615 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3864 states and 4324 transitions.
[2020-11-25 17:03:02,634 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3864 to 3856.
[2020-11-25 17:03:02,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3856 states.
[2020-11-25 17:03:02,637 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3856 states to 3856 states and 4312 transitions.
[2020-11-25 17:03:02,637 INFO  L751         BuchiCegarLoop]: Abstraction has 3856 states and 4312 transitions.
[2020-11-25 17:03:02,637 INFO  L631         BuchiCegarLoop]: Abstraction has 3856 states and 4312 transitions.
[2020-11-25 17:03:02,637 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 17:03:02,638 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3856 states and 4312 transitions.
[2020-11-25 17:03:02,641 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:02,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:02,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:02,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:02,642 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:02,646 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:02,646 INFO  L82        PathProgramCache]: Analyzing trace with hash 482371469, now seen corresponding path program 1 times
[2020-11-25 17:03:02,646 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:02,677 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:03,014 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:03,015 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:03,015 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 17:03:03,015 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:03,015 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 17:03:03,015 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=590, Unknown=0, NotChecked=0, Total=650
[2020-11-25 17:03:03,016 INFO  L87              Difference]: Start difference. First operand 3856 states and 4312 transitions. cyclomatic complexity: 458 Second operand 26 states.
[2020-11-25 17:03:08,617 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:08,617 INFO  L93              Difference]: Finished difference Result 3918 states and 4399 transitions.
[2020-11-25 17:03:08,617 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 17:03:08,617 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3918 states and 4399 transitions.
[2020-11-25 17:03:08,623 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:03:08,631 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3918 states to 3918 states and 4399 transitions.
[2020-11-25 17:03:08,631 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1008
[2020-11-25 17:03:08,631 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1008
[2020-11-25 17:03:08,631 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3918 states and 4399 transitions.
[2020-11-25 17:03:08,633 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:08,633 INFO  L728         BuchiCegarLoop]: Abstraction has 3918 states and 4399 transitions.
[2020-11-25 17:03:08,637 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3918 states and 4399 transitions.
[2020-11-25 17:03:08,654 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3918 to 3903.
[2020-11-25 17:03:08,654 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3903 states.
[2020-11-25 17:03:08,657 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3903 states to 3903 states and 4368 transitions.
[2020-11-25 17:03:08,657 INFO  L751         BuchiCegarLoop]: Abstraction has 3903 states and 4368 transitions.
[2020-11-25 17:03:08,657 INFO  L631         BuchiCegarLoop]: Abstraction has 3903 states and 4368 transitions.
[2020-11-25 17:03:08,657 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 17:03:08,657 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3903 states and 4368 transitions.
[2020-11-25 17:03:08,661 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:08,661 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:08,661 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:08,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:08,662 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND FALSE  !(!(c_s582 >= a_s582))
[L3483]              __ret_0_ := c_s582;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND FALSE  !(revert)
[L3083]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s329];
[L3084]              __tmp___balances_ERC20[this][recipient_s329] := __var_15;
[L3085]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s329];
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND FALSE  !(revert)
[L2590]              __ret_0_ := true;
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND FALSE  !(!(c_s582 >= a_s582))
[L3483]              __ret_0_ := c_s582;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND FALSE  !(revert)
[L3083]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s329];
[L3084]              __tmp___balances_ERC20[this][recipient_s329] := __var_15;
[L3085]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s329];
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND FALSE  !(revert)
[L2590]              __ret_0_ := true;
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:08,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:08,666 INFO  L82        PathProgramCache]: Analyzing trace with hash 909359656, now seen corresponding path program 1 times
[2020-11-25 17:03:08,666 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:08,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:08,706 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:08,706 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:08,706 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 17:03:08,707 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:08,707 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 17:03:08,707 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 17:03:08,707 INFO  L87              Difference]: Start difference. First operand 3903 states and 4368 transitions. cyclomatic complexity: 469 Second operand 5 states.
[2020-11-25 17:03:09,158 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:09,159 INFO  L93              Difference]: Finished difference Result 4693 states and 5342 transitions.
[2020-11-25 17:03:09,159 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:03:09,159 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4693 states and 5342 transitions.
[2020-11-25 17:03:09,169 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 17:03:09,178 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4693 states to 3786 states and 4415 transitions.
[2020-11-25 17:03:09,178 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 842
[2020-11-25 17:03:09,179 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 842
[2020-11-25 17:03:09,179 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3786 states and 4415 transitions.
[2020-11-25 17:03:09,181 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:09,181 INFO  L728         BuchiCegarLoop]: Abstraction has 3786 states and 4415 transitions.
[2020-11-25 17:03:09,184 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3786 states and 4415 transitions.
[2020-11-25 17:03:09,203 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3786 to 3200.
[2020-11-25 17:03:09,203 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3200 states.
[2020-11-25 17:03:09,206 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3200 states to 3200 states and 3654 transitions.
[2020-11-25 17:03:09,206 INFO  L751         BuchiCegarLoop]: Abstraction has 3200 states and 3654 transitions.
[2020-11-25 17:03:09,206 INFO  L631         BuchiCegarLoop]: Abstraction has 3200 states and 3654 transitions.
[2020-11-25 17:03:09,206 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 17:03:09,206 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3200 states and 3654 transitions.
[2020-11-25 17:03:09,210 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 17:03:09,210 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:09,210 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:09,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:09,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND TRUE   !(c_s582 >= a_s582)
[L3480]              revert := true;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND TRUE   !(c_s582 >= a_s582)
[L3480]              revert := true;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:09,214 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:09,214 INFO  L82        PathProgramCache]: Analyzing trace with hash 1578343828, now seen corresponding path program 1 times
[2020-11-25 17:03:09,215 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:09,224 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:09,323 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 17:03:09,323 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:09,323 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 17:03:09,323 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:09,323 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 17:03:09,324 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=420, Unknown=0, NotChecked=0, Total=462
[2020-11-25 17:03:09,324 INFO  L87              Difference]: Start difference. First operand 3200 states and 3654 transitions. cyclomatic complexity: 458 Second operand 22 states.
[2020-11-25 17:03:11,540 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:11,540 INFO  L93              Difference]: Finished difference Result 3215 states and 3661 transitions.
[2020-11-25 17:03:11,540 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 17:03:11,540 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3215 states and 3661 transitions.
[2020-11-25 17:03:11,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:03:11,552 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3215 states to 3215 states and 3661 transitions.
[2020-11-25 17:03:11,552 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 769
[2020-11-25 17:03:11,553 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 769
[2020-11-25 17:03:11,553 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3215 states and 3661 transitions.
[2020-11-25 17:03:11,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:11,555 INFO  L728         BuchiCegarLoop]: Abstraction has 3215 states and 3661 transitions.
[2020-11-25 17:03:11,557 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3215 states and 3661 transitions.
[2020-11-25 17:03:11,570 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3215 to 3037.
[2020-11-25 17:03:11,570 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3037 states.
[2020-11-25 17:03:11,573 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3037 states to 3037 states and 3433 transitions.
[2020-11-25 17:03:11,573 INFO  L751         BuchiCegarLoop]: Abstraction has 3037 states and 3433 transitions.
[2020-11-25 17:03:11,573 INFO  L631         BuchiCegarLoop]: Abstraction has 3037 states and 3433 transitions.
[2020-11-25 17:03:11,573 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 17:03:11,573 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3037 states and 3433 transitions.
[2020-11-25 17:03:11,576 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:11,576 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:11,576 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:11,577 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:11,577 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND FALSE  !(choice == 15)
[L5497]  COND FALSE  !(choice == 14)
[L5504]  COND FALSE  !(choice == 13)
[L5511]  COND FALSE  !(choice == 12)
[L5517]  COND FALSE  !(choice == 11)
[L5523]  COND FALSE  !(choice == 10)
[L5529]  COND FALSE  !(choice == 9)
[L5535]  COND FALSE  !(choice == 8)
[L5541]  COND FALSE  !(choice == 7)
[L5547]  COND FALSE  !(choice == 6)
[L5553]  COND TRUE   choice == 5
[L5554]              gas := gas - 21000;
[L5555]  COND TRUE   gas >= 0
[L5556]              assume _amount_s750 >= 0 && _amount_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5557]              assume msgvalue_MSG == 0;
[L5558]  CALL        call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1299]              havoc __exception;
[L1300]              revert := false;
[L1301]  COND FALSE  !(__exception)
[L1328]  CALL        call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3677]  COND FALSE  !(!minters_GOF[this][msgsender_MSG])
[L3681]  COND TRUE   DType[this] == GOF
[L3682]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3179]              __var_16 := null;
[L3180]  COND FALSE  !(!(account_s380 != null))
[L3184]              __var_17 := null;
[L3185]  COND FALSE  !(DType[this] == GOF)
[L3190]  COND TRUE   DType[this] == ERC20
[L3191]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3191]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3192]  COND FALSE  !(revert)
[L3198]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3198]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3199]  COND FALSE  !(revert)
[L3202]              _totalSupply_ERC20[this] := __var_18;
[L3203]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3203]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3204]  COND FALSE  !(revert)
[L3207]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s380];
[L3208]              _balances_ERC20[this][account_s380] := __var_19;
[L3209]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s380];
[L3210]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3682]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3683]  COND FALSE  !(revert)
[L1328]  RET         call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1329]              assume !revert && gas >= 0;
[L5558]  RET         call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:11,580 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:11,581 INFO  L82        PathProgramCache]: Analyzing trace with hash 1765909712, now seen corresponding path program 1 times
[2020-11-25 17:03:11,581 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:11,593 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:11,679 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 17:03:11,680 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:11,680 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:03:11,680 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:11,680 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:03:11,680 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:03:11,680 INFO  L87              Difference]: Start difference. First operand 3037 states and 3433 transitions. cyclomatic complexity: 399 Second operand 7 states.
[2020-11-25 17:03:11,740 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:11,740 INFO  L93              Difference]: Finished difference Result 3085 states and 3483 transitions.
[2020-11-25 17:03:11,741 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:03:11,741 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3085 states and 3483 transitions.
[2020-11-25 17:03:11,746 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:11,751 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3085 states to 3027 states and 3419 transitions.
[2020-11-25 17:03:11,752 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 690
[2020-11-25 17:03:11,752 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 690
[2020-11-25 17:03:11,752 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3027 states and 3419 transitions.
[2020-11-25 17:03:11,754 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:11,754 INFO  L728         BuchiCegarLoop]: Abstraction has 3027 states and 3419 transitions.
[2020-11-25 17:03:11,756 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3027 states and 3419 transitions.
[2020-11-25 17:03:11,767 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3027 to 3027.
[2020-11-25 17:03:11,767 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3027 states.
[2020-11-25 17:03:11,770 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3027 states to 3027 states and 3419 transitions.
[2020-11-25 17:03:11,770 INFO  L751         BuchiCegarLoop]: Abstraction has 3027 states and 3419 transitions.
[2020-11-25 17:03:11,770 INFO  L631         BuchiCegarLoop]: Abstraction has 3027 states and 3419 transitions.
[2020-11-25 17:03:11,770 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 17:03:11,770 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3027 states and 3419 transitions.
[2020-11-25 17:03:11,773 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:11,774 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:11,774 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:11,775 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:11,775 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND FALSE  !(choice == 15)
[L5497]  COND FALSE  !(choice == 14)
[L5504]  COND FALSE  !(choice == 13)
[L5511]  COND FALSE  !(choice == 12)
[L5517]  COND FALSE  !(choice == 11)
[L5523]  COND FALSE  !(choice == 10)
[L5529]  COND FALSE  !(choice == 9)
[L5535]  COND FALSE  !(choice == 8)
[L5541]  COND FALSE  !(choice == 7)
[L5547]  COND FALSE  !(choice == 6)
[L5553]  COND TRUE   choice == 5
[L5554]              gas := gas - 21000;
[L5555]  COND TRUE   gas >= 0
[L5556]              assume _amount_s750 >= 0 && _amount_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5557]              assume msgvalue_MSG == 0;
[L5558]  CALL        call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1299]              havoc __exception;
[L1300]              revert := false;
[L1301]  COND FALSE  !(__exception)
[L1328]  CALL        call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3677]  COND FALSE  !(!minters_GOF[this][msgsender_MSG])
[L3681]  COND TRUE   DType[this] == GOF
[L3682]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3179]              __var_16 := null;
[L3180]  COND FALSE  !(!(account_s380 != null))
[L3184]              __var_17 := null;
[L3185]  COND TRUE   DType[this] == GOF
[L3186]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3186]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3187]  COND FALSE  !(revert)
[L3198]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3198]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3199]  COND FALSE  !(revert)
[L3202]              _totalSupply_ERC20[this] := __var_18;
[L3203]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3203]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3204]  COND FALSE  !(revert)
[L3207]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s380];
[L3208]              _balances_ERC20[this][account_s380] := __var_19;
[L3209]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s380];
[L3210]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3682]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3683]  COND FALSE  !(revert)
[L1328]  RET         call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1329]              assume !revert && gas >= 0;
[L5558]  RET         call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:11,779 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:11,779 INFO  L82        PathProgramCache]: Analyzing trace with hash -727752666, now seen corresponding path program 1 times
[2020-11-25 17:03:11,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:11,790 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:11,843 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 17:03:11,843 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:11,843 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:03:11,844 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:11,844 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:03:11,844 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:03:11,844 INFO  L87              Difference]: Start difference. First operand 3027 states and 3419 transitions. cyclomatic complexity: 395 Second operand 3 states.
[2020-11-25 17:03:11,855 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:11,855 INFO  L93              Difference]: Finished difference Result 3031 states and 3423 transitions.
[2020-11-25 17:03:11,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:03:11,855 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3031 states and 3423 transitions.
[2020-11-25 17:03:11,860 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:11,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3031 states to 3031 states and 3423 transitions.
[2020-11-25 17:03:11,865 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 690
[2020-11-25 17:03:11,865 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 690
[2020-11-25 17:03:11,865 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3031 states and 3423 transitions.
[2020-11-25 17:03:11,867 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:11,867 INFO  L728         BuchiCegarLoop]: Abstraction has 3031 states and 3423 transitions.
[2020-11-25 17:03:11,868 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3031 states and 3423 transitions.
[2020-11-25 17:03:11,880 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3031 to 3031.
[2020-11-25 17:03:11,880 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3031 states.
[2020-11-25 17:03:11,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3031 states to 3031 states and 3423 transitions.
[2020-11-25 17:03:11,883 INFO  L751         BuchiCegarLoop]: Abstraction has 3031 states and 3423 transitions.
[2020-11-25 17:03:11,883 INFO  L631         BuchiCegarLoop]: Abstraction has 3031 states and 3423 transitions.
[2020-11-25 17:03:11,883 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 17:03:11,883 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3031 states and 3423 transitions.
[2020-11-25 17:03:11,886 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:11,886 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:11,886 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:11,887 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:11,887 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND TRUE   choice == 15
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5493]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5494]              assume msgvalue_MSG == 0;
[L5495]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L635]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2775]  COND TRUE   DType[this] == GOF
[L2776]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND FALSE  !(DType[this] == GOF)
[L3109]  COND TRUE   DType[this] == ERC20
[L3110]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3110]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3111]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2776]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2777]  COND FALSE  !(revert)
[L2788]  COND TRUE   DType[this] == GOF
[L2789]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2789]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2790]  COND FALSE  !(revert)
[L2801]  COND TRUE   DType[this] == GOF
[L2802]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2802]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2803]  COND FALSE  !(revert)
[L2814]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L2814]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L2815]  COND FALSE  !(revert)
[L2818]  COND TRUE   DType[this] == GOF
[L2819]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3315]              __var_24 := null;
[L3316]  COND FALSE  !(!(owner_s475 != null))
[L3320]              __var_25 := null;
[L3321]  COND FALSE  !(!(spender_s475 != null))
[L3325]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] - _allowances_ERC20[this][owner_s475][spender_s475];
[L3326]              _allowances_ERC20[this][owner_s475][spender_s475] := amount_s475;
[L3327]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] + _allowances_ERC20[this][owner_s475][spender_s475];
[L3328]              assert { :EventEmitted "Approval_ERC20" } true;
[L2819]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2820]  COND FALSE  !(revert)
[L2831]              __ret_0_ := true;
[L635]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L636]               assume !revert && gas >= 0;
[L5495]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:11,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:11,891 INFO  L82        PathProgramCache]: Analyzing trace with hash 1480998883, now seen corresponding path program 1 times
[2020-11-25 17:03:11,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:11,903 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:11,973 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 17:03:11,973 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:03:11,973 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:03:11,974 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:11,974 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:03:11,974 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:03:11,974 INFO  L87              Difference]: Start difference. First operand 3031 states and 3423 transitions. cyclomatic complexity: 395 Second operand 7 states.
[2020-11-25 17:03:12,033 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:12,033 INFO  L93              Difference]: Finished difference Result 3085 states and 3475 transitions.
[2020-11-25 17:03:12,033 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:03:12,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3085 states and 3475 transitions.
[2020-11-25 17:03:12,038 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:12,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3085 states to 2951 states and 3317 transitions.
[2020-11-25 17:03:12,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 17:03:12,043 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 17:03:12,043 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2951 states and 3317 transitions.
[2020-11-25 17:03:12,045 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:12,045 INFO  L728         BuchiCegarLoop]: Abstraction has 2951 states and 3317 transitions.
[2020-11-25 17:03:12,046 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2951 states and 3317 transitions.
[2020-11-25 17:03:12,058 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2951 to 2951.
[2020-11-25 17:03:12,058 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2951 states.
[2020-11-25 17:03:12,060 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2951 states to 2951 states and 3317 transitions.
[2020-11-25 17:03:12,061 INFO  L751         BuchiCegarLoop]: Abstraction has 2951 states and 3317 transitions.
[2020-11-25 17:03:12,061 INFO  L631         BuchiCegarLoop]: Abstraction has 2951 states and 3317 transitions.
[2020-11-25 17:03:12,061 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 17:03:12,061 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2951 states and 3317 transitions.
[2020-11-25 17:03:12,063 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:12,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:12,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:12,065 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:12,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND TRUE   choice == 15
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5493]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5494]              assume msgvalue_MSG == 0;
[L5495]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L635]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2775]  COND TRUE   DType[this] == GOF
[L2776]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2776]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2777]  COND FALSE  !(revert)
[L2788]  COND TRUE   DType[this] == GOF
[L2789]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2789]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2790]  COND FALSE  !(revert)
[L2801]  COND TRUE   DType[this] == GOF
[L2802]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2802]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2803]  COND FALSE  !(revert)
[L2814]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L2814]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L2815]  COND FALSE  !(revert)
[L2818]  COND TRUE   DType[this] == GOF
[L2819]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3315]              __var_24 := null;
[L3316]  COND FALSE  !(!(owner_s475 != null))
[L3320]              __var_25 := null;
[L3321]  COND FALSE  !(!(spender_s475 != null))
[L3325]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] - _allowances_ERC20[this][owner_s475][spender_s475];
[L3326]              _allowances_ERC20[this][owner_s475][spender_s475] := amount_s475;
[L3327]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] + _allowances_ERC20[this][owner_s475][spender_s475];
[L3328]              assert { :EventEmitted "Approval_ERC20" } true;
[L2819]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2820]  COND FALSE  !(revert)
[L2831]              __ret_0_ := true;
[L635]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L636]               assume !revert && gas >= 0;
[L5495]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:12,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:12,068 INFO  L82        PathProgramCache]: Analyzing trace with hash 759704925, now seen corresponding path program 1 times
[2020-11-25 17:03:12,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:12,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:12,979 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 0 proven. 5 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 17:03:12,979 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:03:12,979 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 17:03:12,980 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:12,980 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 17:03:12,980 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=150, Invalid=1572, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 17:03:12,980 INFO  L87              Difference]: Start difference. First operand 2951 states and 3317 transitions. cyclomatic complexity: 369 Second operand 42 states.
[2020-11-25 17:03:21,211 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:21,211 INFO  L93              Difference]: Finished difference Result 2996 states and 3396 transitions.
[2020-11-25 17:03:21,212 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 17:03:21,212 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2996 states and 3396 transitions.
[2020-11-25 17:03:21,225 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:03:21,237 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2996 states to 2996 states and 3396 transitions.
[2020-11-25 17:03:21,237 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 711
[2020-11-25 17:03:21,237 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 711
[2020-11-25 17:03:21,237 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2996 states and 3396 transitions.
[2020-11-25 17:03:21,239 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:21,239 INFO  L728         BuchiCegarLoop]: Abstraction has 2996 states and 3396 transitions.
[2020-11-25 17:03:21,242 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2996 states and 3396 transitions.
[2020-11-25 17:03:21,258 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2996 to 2982.
[2020-11-25 17:03:21,258 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2982 states.
[2020-11-25 17:03:21,260 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2982 states to 2982 states and 3359 transitions.
[2020-11-25 17:03:21,261 INFO  L751         BuchiCegarLoop]: Abstraction has 2982 states and 3359 transitions.
[2020-11-25 17:03:21,261 INFO  L631         BuchiCegarLoop]: Abstraction has 2982 states and 3359 transitions.
[2020-11-25 17:03:21,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 17:03:21,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2982 states and 3359 transitions.
[2020-11-25 17:03:21,264 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:21,264 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:21,264 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:21,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:21,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND TRUE   choice == 15
[L5491]              gas := gas - 21000;
[L5492]  COND TRUE   gas >= 0
[L5493]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5494]              assume msgvalue_MSG == 0;
[L5495]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L606]               havoc __exception;
[L607]               revert := false;
[L608]   COND FALSE  !(__exception)
[L635]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2775]  COND TRUE   DType[this] == GOF
[L2776]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2776]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2777]  COND FALSE  !(revert)
[L2788]  COND TRUE   DType[this] == GOF
[L2789]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2789]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2790]  COND FALSE  !(revert)
[L2801]  COND TRUE   DType[this] == GOF
[L2802]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2802]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2803]  COND FALSE  !(revert)
[L2814]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L2814]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, 865270858);
[L2815]  COND FALSE  !(revert)
[L2818]  COND TRUE   DType[this] == GOF
[L2819]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L3315]              __var_24 := null;
[L3316]  COND FALSE  !(!(owner_s475 != null))
[L3320]              __var_25 := null;
[L3321]  COND FALSE  !(!(spender_s475 != null))
[L3325]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] - _allowances_ERC20[this][owner_s475][spender_s475];
[L3326]              _allowances_ERC20[this][owner_s475][spender_s475] := amount_s475;
[L3327]              sum__allowances1[owner_s475] := sum__allowances1[owner_s475] + _allowances_ERC20[this][owner_s475][spender_s475];
[L3328]              assert { :EventEmitted "Approval_ERC20" } true;
[L2819]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2820]  COND FALSE  !(revert)
[L2831]              __ret_0_ := true;
[L635]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L636]               assume !revert && gas >= 0;
[L5495]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND TRUE   !(c_s582 >= a_s582)
[L3480]              revert := true;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND TRUE   !(c_s582 >= a_s582)
[L3480]              revert := true;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:21,269 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:21,269 INFO  L82        PathProgramCache]: Analyzing trace with hash 1365571428, now seen corresponding path program 1 times
[2020-11-25 17:03:21,269 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:21,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:21,951 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 0 proven. 5 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 17:03:21,951 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:03:21,951 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 17:03:21,951 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:21,952 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 17:03:21,952 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=94, Invalid=1238, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 17:03:21,952 INFO  L87              Difference]: Start difference. First operand 2982 states and 3359 transitions. cyclomatic complexity: 382 Second operand 37 states.
[2020-11-25 17:03:29,600 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:29,600 INFO  L93              Difference]: Finished difference Result 3064 states and 3495 transitions.
[2020-11-25 17:03:29,600 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-11-25 17:03:29,600 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3064 states and 3495 transitions.
[2020-11-25 17:03:29,608 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:03:29,615 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3064 states to 3064 states and 3495 transitions.
[2020-11-25 17:03:29,615 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 740
[2020-11-25 17:03:29,615 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 740
[2020-11-25 17:03:29,615 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3064 states and 3495 transitions.
[2020-11-25 17:03:29,617 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:29,617 INFO  L728         BuchiCegarLoop]: Abstraction has 3064 states and 3495 transitions.
[2020-11-25 17:03:29,619 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3064 states and 3495 transitions.
[2020-11-25 17:03:29,666 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3064 to 2986.
[2020-11-25 17:03:29,667 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2986 states.
[2020-11-25 17:03:29,670 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2986 states to 2986 states and 3369 transitions.
[2020-11-25 17:03:29,670 INFO  L751         BuchiCegarLoop]: Abstraction has 2986 states and 3369 transitions.
[2020-11-25 17:03:29,670 INFO  L631         BuchiCegarLoop]: Abstraction has 2986 states and 3369 transitions.
[2020-11-25 17:03:29,670 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 17:03:29,670 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2986 states and 3369 transitions.
[2020-11-25 17:03:29,673 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:29,673 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:29,673 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:29,674 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:29,674 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND TRUE   !(c_s582 >= a_s582)
[L3480]              revert := true;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:29,688 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:29,688 INFO  L82        PathProgramCache]: Analyzing trace with hash 748982777, now seen corresponding path program 1 times
[2020-11-25 17:03:29,689 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:29,716 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:30,898 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 0 proven. 16 refuted. 0 times theorem prover too weak. 94 trivial. 0 not checked.
[2020-11-25 17:03:30,898 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:03:30,898 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 17:03:30,898 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:30,899 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 17:03:30,899 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=127, Invalid=1595, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 17:03:30,899 INFO  L87              Difference]: Start difference. First operand 2986 states and 3369 transitions. cyclomatic complexity: 389 Second operand 42 states.
[2020-11-25 17:03:35,551 WARN  L188               SmtUtils]: Spent 256.00 ms on a formula simplification. DAG size of input: 122 DAG size of output: 98
[2020-11-25 17:03:35,968 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 82 DAG size of output: 72
[2020-11-25 17:03:45,098 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:45,098 INFO  L93              Difference]: Finished difference Result 3040 states and 3470 transitions.
[2020-11-25 17:03:45,099 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 17:03:45,099 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3040 states and 3470 transitions.
[2020-11-25 17:03:45,104 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:03:45,110 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3040 states to 3040 states and 3470 transitions.
[2020-11-25 17:03:45,110 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 711
[2020-11-25 17:03:45,110 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 711
[2020-11-25 17:03:45,111 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3040 states and 3470 transitions.
[2020-11-25 17:03:45,112 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:45,112 INFO  L728         BuchiCegarLoop]: Abstraction has 3040 states and 3470 transitions.
[2020-11-25 17:03:45,114 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3040 states and 3470 transitions.
[2020-11-25 17:03:45,127 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3040 to 2982.
[2020-11-25 17:03:45,127 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2982 states.
[2020-11-25 17:03:45,129 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2982 states to 2982 states and 3365 transitions.
[2020-11-25 17:03:45,130 INFO  L751         BuchiCegarLoop]: Abstraction has 2982 states and 3365 transitions.
[2020-11-25 17:03:45,130 INFO  L631         BuchiCegarLoop]: Abstraction has 2982 states and 3365 transitions.
[2020-11-25 17:03:45,130 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 17:03:45,130 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2982 states and 3365 transitions.
[2020-11-25 17:03:45,132 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:45,133 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:45,133 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:45,133 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:45,133 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND TRUE   __exception
[L417]               __tmp__Balance := Balance;
[L418]               __tmp__DType := DType;
[L419]               __tmp__Alloc := Alloc;
[L420]               __tmp__balance_ADDR := balance_ADDR;
[L421]               __tmp__M_Ref_int := M_Ref_int;
[L422]               __tmp__sum__balances0 := sum__balances0;
[L423]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L425]               __tmp__sum__allowances1 := sum__allowances1;
[L426]               __tmp__M_Ref_bool := M_Ref_bool;
[L427]               __tmp__sum_minters2 := sum_minters2;
[L428]               __tmp__Length := Length;
[L429]               __tmp__now := now;
[L430]               __tmp___balances_ERC20 := _balances_ERC20;
[L431]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L432]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L433]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L434]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L435]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L436]               __tmp___cap_ERC20Detailed := _cap_ERC20Detailed;
[L437]               __tmp__governance_GOF := governance_GOF;
[L438]               __tmp__pendingGov_GOF := pendingGov_GOF;
[L439]               __tmp__minters_GOF := minters_GOF;
[L440]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2564]  COND TRUE   __tmp__DType[this] == GOF
[L2565]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2469]              __ret_0_ := msgsender_MSG;
[L2565]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2566]  COND FALSE  !(revert)
[L2577]  COND TRUE   __tmp__DType[this] == GOF
[L2578]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3049]              __var_12 := null;
[L3050]  COND FALSE  !(!(sender_s329 != null))
[L3054]              __var_13 := null;
[L3055]  COND FALSE  !(!(recipient_s329 != null))
[L3059]  COND TRUE   __tmp__DType[this] == GOF
[L3060]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3786]  COND TRUE   __tmp__DType[this] == GOF
[L3787]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3787]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3788]  COND FALSE  !(revert)
[L3794]              __var_29 := null;
[L3795]  COND FALSE  !(from_s867 == null)
[L3060]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__fail(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3061]  COND FALSE  !(revert)
[L3072]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3502]  COND FALSE  !(!(b_s609 <= a_s609))
[L3506]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3507]              __ret_0_ := c_s609;
[L3072]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3073]  COND FALSE  !(revert)
[L3076]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s329];
[L3077]              __tmp___balances_ERC20[this][sender_s329] := __var_14;
[L3078]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s329];
[L3079]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3478]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3479]  COND TRUE   !(c_s582 >= a_s582)
[L3480]              revert := true;
[L3079]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s329], amount_s329);
[L3080]  COND TRUE   revert
[L2578]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2579]  COND TRUE   revert
[L440]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L441]               assume revert || gas < 0;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:45,137 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:45,137 INFO  L82        PathProgramCache]: Analyzing trace with hash -1225319680, now seen corresponding path program 1 times
[2020-11-25 17:03:45,137 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:45,152 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:45,656 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 17:03:45,656 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:03:45,656 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 17:03:45,657 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:45,657 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 17:03:45,657 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=108, Invalid=1532, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 17:03:45,658 INFO  L87              Difference]: Start difference. First operand 2982 states and 3365 transitions. cyclomatic complexity: 389 Second operand 41 states.
[2020-11-25 17:03:53,227 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:53,227 INFO  L93              Difference]: Finished difference Result 3058 states and 3479 transitions.
[2020-11-25 17:03:53,227 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 17:03:53,228 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3058 states and 3479 transitions.
[2020-11-25 17:03:53,233 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:53,239 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3058 states to 3058 states and 3479 transitions.
[2020-11-25 17:03:53,239 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 738
[2020-11-25 17:03:53,239 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 738
[2020-11-25 17:03:53,239 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3058 states and 3479 transitions.
[2020-11-25 17:03:53,241 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:53,241 INFO  L728         BuchiCegarLoop]: Abstraction has 3058 states and 3479 transitions.
[2020-11-25 17:03:53,243 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3058 states and 3479 transitions.
[2020-11-25 17:03:53,253 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3058 to 2955.
[2020-11-25 17:03:53,254 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2955 states.
[2020-11-25 17:03:53,256 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2955 states to 2955 states and 3325 transitions.
[2020-11-25 17:03:53,256 INFO  L751         BuchiCegarLoop]: Abstraction has 2955 states and 3325 transitions.
[2020-11-25 17:03:53,256 INFO  L631         BuchiCegarLoop]: Abstraction has 2955 states and 3325 transitions.
[2020-11-25 17:03:53,256 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 17:03:53,256 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2955 states and 3325 transitions.
[2020-11-25 17:03:53,259 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:03:53,259 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:53,259 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:53,260 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:53,260 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND FALSE  !(choice == 15)
[L5497]  COND FALSE  !(choice == 14)
[L5504]  COND FALSE  !(choice == 13)
[L5511]  COND FALSE  !(choice == 12)
[L5517]  COND FALSE  !(choice == 11)
[L5523]  COND FALSE  !(choice == 10)
[L5529]  COND FALSE  !(choice == 9)
[L5535]  COND FALSE  !(choice == 8)
[L5541]  COND FALSE  !(choice == 7)
[L5547]  COND FALSE  !(choice == 6)
[L5553]  COND TRUE   choice == 5
[L5554]              gas := gas - 21000;
[L5555]  COND TRUE   gas >= 0
[L5556]              assume _amount_s750 >= 0 && _amount_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5557]              assume msgvalue_MSG == 0;
[L5558]  CALL        call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1299]              havoc __exception;
[L1300]              revert := false;
[L1301]  COND FALSE  !(__exception)
[L1328]  CALL        call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3677]  COND FALSE  !(!minters_GOF[this][msgsender_MSG])
[L3681]  COND TRUE   DType[this] == GOF
[L3682]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3179]              __var_16 := null;
[L3180]  COND FALSE  !(!(account_s380 != null))
[L3184]              __var_17 := null;
[L3185]  COND TRUE   DType[this] == GOF
[L3186]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND TRUE   from_s867 == null
[L3840]  COND TRUE   DType[this] == GOF
[L3841]  CALL        call __var_31 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              __ret_0_ := _totalSupply_ERC20[this];
[L3841]  RET         call __var_31 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3842]  COND FALSE  !(revert)
[L3848]  CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_31, amount_s867);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3848]  RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_31, amount_s867);
[L3849]  COND FALSE  !(revert)
[L3852]  COND TRUE   DType[this] == GOF
[L3853]  CALL        call __var_32 := cap_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L3439]              __ret_0_ := _cap_ERC20Detailed[this];
[L3853]  RET         call __var_32 := cap_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L3854]  COND FALSE  !(revert)
[L3860]  COND FALSE  !(!(__var_30 <= __var_32))
[L3186]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3187]  COND FALSE  !(revert)
[L3198]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3198]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3199]  COND FALSE  !(revert)
[L3202]              _totalSupply_ERC20[this] := __var_18;
[L3203]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3203]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3204]  COND FALSE  !(revert)
[L3207]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s380];
[L3208]              _balances_ERC20[this][account_s380] := __var_19;
[L3209]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s380];
[L3210]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3682]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3683]  COND FALSE  !(revert)
[L1328]  RET         call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1329]              assume !revert && gas >= 0;
[L5558]  RET         call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND TRUE   choice == 20
[L5459]              gas := gas - 21000;
[L5460]  COND FALSE  !(gas >= 0)
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:53,263 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:53,263 INFO  L82        PathProgramCache]: Analyzing trace with hash 285014345, now seen corresponding path program 1 times
[2020-11-25 17:03:53,264 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:53,274 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:03:53,345 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 1 proven. 60 refuted. 0 times theorem prover too weak. 55 trivial. 0 not checked.
[2020-11-25 17:03:53,345 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:03:53,345 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 17:03:53,346 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:03:53,346 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 17:03:53,346 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 17:03:53,346 INFO  L87              Difference]: Start difference. First operand 2955 states and 3325 transitions. cyclomatic complexity: 374 Second operand 10 states.
[2020-11-25 17:03:54,157 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:03:54,157 INFO  L93              Difference]: Finished difference Result 2984 states and 3370 transitions.
[2020-11-25 17:03:54,157 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 17:03:54,157 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2984 states and 3370 transitions.
[2020-11-25 17:03:54,162 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:54,168 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2984 states to 2984 states and 3370 transitions.
[2020-11-25 17:03:54,168 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 700
[2020-11-25 17:03:54,168 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 700
[2020-11-25 17:03:54,168 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2984 states and 3370 transitions.
[2020-11-25 17:03:54,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:03:54,170 INFO  L728         BuchiCegarLoop]: Abstraction has 2984 states and 3370 transitions.
[2020-11-25 17:03:54,172 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2984 states and 3370 transitions.
[2020-11-25 17:03:54,183 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2984 to 2984.
[2020-11-25 17:03:54,183 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2984 states.
[2020-11-25 17:03:54,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2984 states to 2984 states and 3370 transitions.
[2020-11-25 17:03:54,186 INFO  L751         BuchiCegarLoop]: Abstraction has 2984 states and 3370 transitions.
[2020-11-25 17:03:54,186 INFO  L631         BuchiCegarLoop]: Abstraction has 2984 states and 3370 transitions.
[2020-11-25 17:03:54,186 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 17:03:54,186 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2984 states and 3370 transitions.
[2020-11-25 17:03:54,189 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:03:54,189 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:03:54,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:03:54,190 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:03:54,190 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5592]              assume null == 0;
[L5593]  CALL        call this := FreshRefGenerator__success();
[L2397]              havoc newRef;
[L2398]              assume Alloc[newRef] == false;
[L2399]              Alloc[newRef] := true;
[L2400]              assume newRef != null;
[L5593]  RET         call this := FreshRefGenerator__success();
[L5594]              assume now >= 0;
[L5595]              assume DType[this] == GOF;
[L5596]              assume msgvalue_MSG == 0;
[L5597]              gas := gas - 53000;
[L5598]  CALL        call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L1234]              havoc __exception;
[L1235]              revert := false;
[L1236]  COND FALSE  !(__exception)
[L1263]  CALL        call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L3637]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L3637]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3638]  COND FALSE  !(revert)
[L3641]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3641]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3642]  COND FALSE  !(revert)
[L3645]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2461]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2446]              assume msgsender_MSG != null;
[L2447]              Balance[this] := 0;
[L2461]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2523]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2524]  COND FALSE  !(revert)
[L2527]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L2527]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2531]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]              assume msgsender_MSG != null;
[L2496]              Balance[this] := 0;
[L2497]              _balances_ERC20[this] := zeroRefintArr();
[L2498]              sum__balances0[this] := 0;
[L2499]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2500]              sum__allowances1[this] := 0;
[L2501]              _totalSupply_ERC20[this] := 0;
[L2531]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2532]  COND FALSE  !(revert)
[L3645]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3646]  COND FALSE  !(revert)
[L3649]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3385]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2429]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]              assume msgsender_MSG != null;
[L2415]              Balance[this] := 0;
[L2429]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2430]  COND FALSE  !(revert)
[L3385]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3386]  COND FALSE  !(revert)
[L3389]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3358]              assume msgsender_MSG != null;
[L3359]              Balance[this] := 0;
[L3360]              _name_ERC20Detailed[this] := -1192880992;
[L3361]              _symbol_ERC20Detailed[this] := -1192880992;
[L3362]              _decimals_ERC20Detailed[this] := 0;
[L3363]              _cap_ERC20Detailed[this] := 0;
[L3365]              _name_ERC20Detailed[this] := name_s524;
[L3366]              _symbol_ERC20Detailed[this] := symbol_s524;
[L3367]              _decimals_ERC20Detailed[this] := decimals_s524;
[L3368]              _cap_ERC20Detailed[this] := cap_s524;
[L3389]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s524, symbol_s524, decimals_s524, cap_s524);
[L3390]  COND FALSE  !(revert)
[L3649]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1949039374, 575069518, 18, 100000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936));
[L3650]  COND FALSE  !(revert)
[L3653]  CALL        call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3598]              assume msgsender_MSG != null;
[L3599]              Balance[this] := 0;
[L3600]              governance_GOF[this] := null;
[L3601]              pendingGov_GOF[this] := null;
[L3602]              minters_GOF[this] := zeroRefboolArr();
[L3605]              havoc __var_26;
[L3606]              governance_GOF[this] := __var_26;
[L3653]  RET         call GOF_GOF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  COND FALSE  !(revert)
[L1263]  RET         call GOF_GOF__success(this, msgsender_MSG, msgvalue_MSG);
[L1264]              assume !revert && gas >= 0;
[L5598]  RET         call GOF_GOF(this, msgsender_MSG, msgvalue_MSG);
[L5599]              assume !revert && gas >= 0;
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND FALSE  !(choice == 15)
[L5497]  COND FALSE  !(choice == 14)
[L5504]  COND FALSE  !(choice == 13)
[L5511]  COND FALSE  !(choice == 12)
[L5517]  COND FALSE  !(choice == 11)
[L5523]  COND FALSE  !(choice == 10)
[L5529]  COND FALSE  !(choice == 9)
[L5535]  COND FALSE  !(choice == 8)
[L5541]  COND FALSE  !(choice == 7)
[L5547]  COND FALSE  !(choice == 6)
[L5553]  COND FALSE  !(choice == 5)
[L5560]  COND TRUE   choice == 4
[L5561]              gas := gas - 21000;
[L5562]  COND TRUE   gas >= 0
[L5563]              assume msgvalue_MSG == 0;
[L5564]  CALL        call addMinter~address_GOF(this, msgsender_MSG, msgvalue_MSG, _minter_s764);
[L1362]              havoc __exception;
[L1363]              revert := false;
[L1364]  COND FALSE  !(__exception)
[L1391]  CALL        call addMinter~address_GOF__success(this, msgsender_MSG, msgvalue_MSG, _minter_s764);
[L3702]  CALL        call onlyGov_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4917]  COND FALSE  !(!(msgsender_MSG == governance_GOF[this]))
[L3702]  RET         call onlyGov_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3703]  COND FALSE  !(revert)
[L3706]              minters_GOF[this][_minter_s764] := true;
[L1391]  RET         call addMinter~address_GOF__success(this, msgsender_MSG, msgvalue_MSG, _minter_s764);
[L1392]              assume !revert && gas >= 0;
[L5564]  RET         call addMinter~address_GOF(this, msgsender_MSG, msgvalue_MSG, _minter_s764);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND FALSE  !(choice == 18)
[L5477]  COND FALSE  !(choice == 17)
[L5483]  COND FALSE  !(choice == 16)
[L5490]  COND FALSE  !(choice == 15)
[L5497]  COND FALSE  !(choice == 14)
[L5504]  COND FALSE  !(choice == 13)
[L5511]  COND FALSE  !(choice == 12)
[L5517]  COND FALSE  !(choice == 11)
[L5523]  COND FALSE  !(choice == 10)
[L5529]  COND FALSE  !(choice == 9)
[L5535]  COND FALSE  !(choice == 8)
[L5541]  COND FALSE  !(choice == 7)
[L5547]  COND FALSE  !(choice == 6)
[L5553]  COND TRUE   choice == 5
[L5554]              gas := gas - 21000;
[L5555]  COND TRUE   gas >= 0
[L5556]              assume _amount_s750 >= 0 && _amount_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5557]              assume msgvalue_MSG == 0;
[L5558]  CALL        call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1299]              havoc __exception;
[L1300]              revert := false;
[L1301]  COND FALSE  !(__exception)
[L1328]  CALL        call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3677]  COND FALSE  !(!minters_GOF[this][msgsender_MSG])
[L3681]  COND TRUE   DType[this] == GOF
[L3682]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3179]              __var_16 := null;
[L3180]  COND FALSE  !(!(account_s380 != null))
[L3184]              __var_17 := null;
[L3185]  COND TRUE   DType[this] == GOF
[L3186]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND TRUE   from_s867 == null
[L3840]  COND TRUE   DType[this] == GOF
[L3841]  CALL        call __var_31 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              __ret_0_ := _totalSupply_ERC20[this];
[L3841]  RET         call __var_31 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3842]  COND FALSE  !(revert)
[L3848]  CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_31, amount_s867);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3848]  RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_31, amount_s867);
[L3849]  COND FALSE  !(revert)
[L3852]  COND TRUE   DType[this] == GOF
[L3853]  CALL        call __var_32 := cap_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L3439]              __ret_0_ := _cap_ERC20Detailed[this];
[L3853]  RET         call __var_32 := cap_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L3854]  COND FALSE  !(revert)
[L3860]  COND FALSE  !(!(__var_30 <= __var_32))
[L3186]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, null, account_s380, amount_s380);
[L3187]  COND FALSE  !(revert)
[L3198]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3198]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s380);
[L3199]  COND FALSE  !(revert)
[L3202]              _totalSupply_ERC20[this] := __var_18;
[L3203]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3203]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s380], amount_s380);
[L3204]  COND FALSE  !(revert)
[L3207]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s380];
[L3208]              _balances_ERC20[this][account_s380] := __var_19;
[L3209]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s380];
[L3210]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3682]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L3683]  COND FALSE  !(revert)
[L1328]  RET         call mint~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L1329]              assume !revert && gas >= 0;
[L5558]  RET         call mint~address~uint256_GOF(this, msgsender_MSG, msgvalue_MSG, _account_s750, _amount_s750);
[L5602]  RET         call CorralChoice_GOF(this);
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

Loop:
[L5602]  CALL        call CorralChoice_GOF(this);
[L5402]              havoc msgsender_MSG;
[L5403]              havoc msgvalue_MSG;
[L5404]              havoc choice;
[L5405]              havoc __ret_0_totalSupply;
[L5406]              havoc account_s121;
[L5407]              havoc __ret_0_balanceOf;
[L5408]              havoc recipient_s140;
[L5409]              havoc amount_s140;
[L5410]              havoc __ret_0_transfer;
[L5411]              havoc owner_s156;
[L5412]              havoc spender_s156;
[L5413]              havoc __ret_0_allowance;
[L5414]              havoc spender_s175;
[L5415]              havoc amount_s175;
[L5416]              havoc __ret_0_approve;
[L5417]              havoc sender_s211;
[L5418]              havoc recipient_s211;
[L5419]              havoc amount_s211;
[L5420]              havoc __ret_0_transferFrom;
[L5421]              havoc spender_s238;
[L5422]              havoc addedValue_s238;
[L5423]              havoc __ret_0_increaseAllowance;
[L5424]              havoc spender_s266;
[L5425]              havoc subtractedValue_s266;
[L5426]              havoc __ret_0_decreaseAllowance;
[L5427]              havoc name_s524;
[L5428]              havoc symbol_s524;
[L5429]              havoc decimals_s524;
[L5430]              havoc cap_s524;
[L5431]              havoc __ret_0_name;
[L5432]              havoc __ret_0_symbol;
[L5433]              havoc __ret_0_decimals;
[L5434]              havoc __ret_0_cap;
[L5435]              havoc __ret_0_governance;
[L5436]              havoc __ret_0_pendingGov;
[L5437]              havoc arg870_s0;
[L5438]              havoc __ret_0_minters;
[L5439]              havoc _account_s750;
[L5440]              havoc _amount_s750;
[L5441]              havoc _minter_s764;
[L5442]              havoc _minter_s778;
[L5443]              havoc _pendingGov_s799;
[L5444]              havoc tmpNow;
[L5445]              havoc gas;
[L5446]              assume gas > 4000000 && gas <= 8000000;
[L5447]              tmpNow := now;
[L5448]              havoc now;
[L5449]              assume now > tmpNow;
[L5450]              assume msgsender_MSG != null;
[L5451]              assume DType[msgsender_MSG] != IERC20;
[L5452]              assume DType[msgsender_MSG] != Context;
[L5453]              assume DType[msgsender_MSG] != ERC20;
[L5454]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5455]              assume DType[msgsender_MSG] != SafeMath;
[L5456]              assume DType[msgsender_MSG] != GOF;
[L5457]              Alloc[msgsender_MSG] := true;
[L5458]  COND FALSE  !(choice == 20)
[L5464]  COND FALSE  !(choice == 19)
[L5470]  COND TRUE   choice == 18
[L5471]              gas := gas - 21000;
[L5472]  COND TRUE   gas >= 0
[L5473]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5474]              assume msgvalue_MSG == 0;
[L5475]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L414]               havoc __exception;
[L415]               revert := false;
[L416]   COND FALSE  !(__exception)
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2597]  COND TRUE   DType[this] == GOF
[L2598]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2475]              __ret_0_ := msgsender_MSG;
[L2598]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2599]  COND FALSE  !(revert)
[L2610]  COND TRUE   DType[this] == GOF
[L2611]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L3094]              __var_12 := null;
[L3095]  COND FALSE  !(!(sender_s329 != null))
[L3099]              __var_13 := null;
[L3100]  COND FALSE  !(!(recipient_s329 != null))
[L3104]  COND TRUE   DType[this] == GOF
[L3105]  CALL        call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3830]  COND TRUE   DType[this] == GOF
[L3831]  CALL        call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3831]  RET         call _beforeTokenTransfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s867, to_s867, amount_s867);
[L3832]  COND FALSE  !(revert)
[L3838]              __var_29 := null;
[L3839]  COND FALSE  !(from_s867 == null)
[L3105]  RET         call _beforeTokenTransfer~address~address~uint256_GOF__success(this, msgsender_MSG, msgvalue_MSG, sender_s329, recipient_s329, amount_s329);
[L3106]  COND FALSE  !(revert)
[L3117]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3514]  COND FALSE  !(!(b_s609 <= a_s609))
[L3518]              c_s609 := (a_s609 - b_s609) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3519]              __ret_0_ := c_s609;
[L3117]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s329], amount_s329, 1468195899);
[L3118]  COND FALSE  !(revert)
[L3121]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s329];
[L3122]              _balances_ERC20[this][sender_s329] := __var_14;
[L3123]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s329];
[L3124]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3490]              c_s582 := (a_s582 + b_s582) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3491]  COND FALSE  !(!(c_s582 >= a_s582))
[L3495]              __ret_0_ := c_s582;
[L3124]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s329], amount_s329);
[L3125]  COND FALSE  !(revert)
[L3128]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s329];
[L3129]              _balances_ERC20[this][recipient_s329] := __var_15;
[L3130]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s329];
[L3131]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2611]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2612]  COND FALSE  !(revert)
[L2623]              __ret_0_ := true;
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L444]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_GOF[this] == old(governance_GOF[this])) && pendingGov_GOF[this] == old(pendingGov_GOF[this])) && minters_GOF[this] == old(minters_GOF[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _cap_ERC20Detailed[this] == old(_cap_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L5475]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L5602]  RET         call CorralChoice_GOF(this);

[2020-11-25 17:03:54,193 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:03:54,193 INFO  L82        PathProgramCache]: Analyzing trace with hash -1896264399, now seen corresponding path program 1 times
[2020-11-25 17:03:54,194 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:03:54,222 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 17:17:53,914 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 17:17:53,916 INFO  L168              Benchmark]: Toolchain (without parser) took 898728.23 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 935.2 MB in the beginning and 3.8 GB in the end (delta: -2.9 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,916 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,916 INFO  L168              Benchmark]: Boogie Preprocessor took 104.74 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,917 INFO  L168              Benchmark]: UtopiaSpecLang took 77.72 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,917 INFO  L168              Benchmark]: Boogie Printer took 19.12 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.2 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,917 INFO  L168              Benchmark]: RCFGBuilder took 892.39 ms. Allocated memory is still 1.0 GB. Free memory was 908.2 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,917 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.59 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 759.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,918 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1383.47 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.6 MB). Free memory was 759.7 MB in the beginning and 805.9 MB in the end (delta: -46.2 MB). Peak memory consumption was 149.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,918 INFO  L168              Benchmark]: BlockEncodingV2 took 201.56 ms. Allocated memory is still 1.2 GB. Free memory was 805.9 MB in the beginning and 723.5 MB in the end (delta: 82.4 MB). Peak memory consumption was 82.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,918 INFO  L168              Benchmark]: BuchiAutomizer took 896007.23 ms. Allocated memory was 1.2 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 723.5 MB in the beginning and 3.8 GB in the end (delta: -3.1 GB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
[2020-11-25 17:17:53,920 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5190 locations, 9326 edges
  - StatisticsResult: Encoded RCFG
    5070 locations, 8989 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 104.74 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 77.72 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.12 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.2 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 892.39 ms. Allocated memory is still 1.0 GB. Free memory was 908.2 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.59 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 759.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1383.47 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.6 MB). Free memory was 759.7 MB in the beginning and 805.9 MB in the end (delta: -46.2 MB). Peak memory consumption was 149.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 201.56 ms. Allocated memory is still 1.2 GB. Free memory was 805.9 MB in the beginning and 723.5 MB in the end (delta: 82.4 MB). Peak memory consumption was 82.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896007.23 ms. Allocated memory was 1.2 GB in the beginning and 6.6 GB in the end (delta: 5.4 GB). Free memory was 723.5 MB in the beginning and 3.8 GB in the end (delta: -3.1 GB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2086 locations, 2868 edges
  - StatisticsResult: BuchiProgram size
    5190 locations, 9326 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
