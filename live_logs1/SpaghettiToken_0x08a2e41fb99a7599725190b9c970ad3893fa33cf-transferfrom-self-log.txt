This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 04:45:55,222 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 04:45:55,223 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 04:45:55,231 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 04:45:55,232 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 04:45:55,232 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 04:45:55,233 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 04:45:55,235 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 04:45:55,236 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 04:45:55,237 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 04:45:55,238 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 04:45:55,238 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 04:45:55,238 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 04:45:55,239 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 04:45:55,240 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 04:45:55,240 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 04:45:55,241 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 04:45:55,241 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 04:45:55,242 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 04:45:55,243 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 04:45:55,244 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 04:45:55,244 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 04:45:55,246 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 04:45:55,246 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 04:45:55,246 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 04:45:55,246 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 04:45:55,246 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 04:45:55,247 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 04:45:55,247 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 04:45:55,247 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 04:45:55,247 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 04:45:55,248 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 04:45:55,248 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 04:45:55,248 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 04:45:55,249 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 04:45:55,249 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 04:45:55,249 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 04:45:55,249 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 04:45:55,250 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 04:45:55,250 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 04:45:55,250 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 04:45:55,250 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 04:45:55,258 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 04:45:55,258 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 04:45:55,258 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 04:45:55,259 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 04:45:55,259 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 04:45:55,259 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 04:45:55,259 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 04:45:55,259 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 04:45:55,259 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 04:45:55,259 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 04:45:55,259 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 04:45:55,260 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 04:45:55,260 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 04:45:55,261 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 04:45:55,261 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 04:45:55,261 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 04:45:55,261 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 04:45:55,261 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 04:45:55,280 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 04:45:55,293 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 04:45:55,295 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 04:45:55,296 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 04:45:55,297 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 04:45:55,297 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl
[2020-11-25 04:45:55,297 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl'
[2020-11-25 04:45:55,352 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 04:45:55,353 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 04:45:55,353 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 04:45:55,353 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 04:45:55,353 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 04:45:55,364 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,364 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,381 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,381 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,396 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,402 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,406 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,412 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 04:45:55,413 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 04:45:55,413 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 04:45:55,415 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 04:45:55,418 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/1) ...
[2020-11-25 04:45:55,432 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(SpaghettiToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:45:55,441 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(SpaghettiToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:45:55,449 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(SpaghettiToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:45:55,455 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=src_s309 || p2!=msg.sender ) && src_s309==dst_s309 ) && wad_s309<=balanceOf_SpaghettiToken[this][src_s309] ) && wad_s309<=allowance_SpaghettiToken[this][src_s309][msg.sender] ) && wad_s309>=0 ) && wad_s309<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][dst_s309]>=0 ) && balanceOf_SpaghettiToken[this][dst_s309]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][src_s309]>=0 ) && balanceOf_SpaghettiToken[this][src_s309]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_SpaghettiToken[this][src_s309][msg.sender]>=0 ) && allowance_SpaghettiToken[this][src_s309][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[COMPEQ,IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 04:45:55,458 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && allowance_SpaghettiToken[this][src_s309][msg.sender]==( ( old(allowance_SpaghettiToken[this][src_s309][msg.sender]) ) - wad_s309 ) ) && totalSupply_SpaghettiToken[this]==( old(totalSupply_SpaghettiToken[this]) ) ) && balanceOf_SpaghettiToken[this]==( old(balanceOf_SpaghettiToken[this]) ) ) && allowance_SpaghettiToken[this][p1][p2]==( old(allowance_SpaghettiToken[this][p1][p2]) ) ) && symbol_SpaghettiToken[this]==( old(symbol_SpaghettiToken[this]) ) ) && decimals_SpaghettiToken[this]==( old(decimals_SpaghettiToken[this]) ) ) && name_SpaghettiToken[this]==( old(name_SpaghettiToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_SpaghettiToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]]
[2020-11-25 04:45:55,462 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(SpaghettiToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this]) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:45:55,462 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_SpaghettiToken0) ==> ( <>AP(success_transferFrom_SpaghettiToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 04:45:55,467 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:45:55 PropertyContainer
[2020-11-25 04:45:55,467 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 04:45:55,468 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 04:45:55,468 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 04:45:55,468 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 04:45:55,469 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/2) ...
[2020-11-25 04:45:55,469 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 04:45:55,469 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 04:45:55,477 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:45:55" (2/2) ...
[2020-11-25 04:45:55,478 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 04:45:55,478 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 04:45:55,478 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 04:45:55,478 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 04:45:55,479 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/2) ...
[2020-11-25 04:45:55,535 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 04:45:55,535 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:45:55,535 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath
[2020-11-25 04:45:55,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath
[2020-11-25 04:45:55,535 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:45:55,536 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:45:55,536 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:45:55,536 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:45:55,536 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:45:55,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:45:55,536 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken
[2020-11-25 04:45:55,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken
[2020-11-25 04:45:55,536 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:45:55,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:45:55,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:45:55,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,537 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:45:55,537 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken
[2020-11-25 04:45:55,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken
[2020-11-25 04:45:55,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken
[2020-11-25 04:45:55,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DSMath
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DSMath
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:45:55,538 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__success
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,539 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__success
[2020-11-25 04:45:55,540 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:45:55,541 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__success
[2020-11-25 04:45:55,541 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:45:55,541 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__success
[2020-11-25 04:45:55,541 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__fail
[2020-11-25 04:45:55,541 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 04:45:55,541 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 04:45:55,541 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 04:45:55,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 04:45:55,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 04:45:55,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:45:55,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:45:55,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__fail
[2020-11-25 04:45:55,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__success
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:45:55,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:45:55,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__success
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__success
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__fail
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__success
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 04:45:55,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 04:45:55,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 04:45:55,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DSMath
[2020-11-25 04:45:55,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DSMath
[2020-11-25 04:45:55,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:45:55,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 04:45:55,545 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 04:45:55,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 04:45:55,709 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:45:55,840 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:45:55,840 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:45:55,841 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:45:55,990 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 04:45:55,991 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 04:45:55,992 INFO  L202        PluginConnector]: Adding new model SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:45:55 BoogieIcfgContainer
[2020-11-25 04:45:55,992 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:45:55" (2/2) ...
[2020-11-25 04:45:55,992 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 04:45:55,993 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2c20f034 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:45:55, skipping insertion in model container
[2020-11-25 04:45:55,993 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 04:45:55,993 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 04:45:55,993 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 04:45:55,995 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 04:45:55,995 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/3) ...
[2020-11-25 04:45:55,995 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@61a9175f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:45:55, skipping insertion in model container
[2020-11-25 04:45:55,995 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:45:55" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 04:45:56,034 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:45:56 NWAContainer
[2020-11-25 04:45:56,034 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 04:45:56,034 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 04:45:56,034 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 04:45:56,035 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 04:45:56,036 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:45:55" (3/4) ...
[2020-11-25 04:45:56,037 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7035983d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:45:56, skipping insertion in model container
[2020-11-25 04:45:56,037 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:45:56" (4/4) ...
[2020-11-25 04:45:56,041 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 04:45:56,044 INFO  L110   BuchiProductObserver]: Initial RCFG 746 locations, 936 edges
[2020-11-25 04:45:56,044 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 04:45:56,053 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 04:45:56,897 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 04:45:56,899 INFO  L110   BuchiProductObserver]: BuchiProgram size 1780 locations, 3022 edges
[2020-11-25 04:45:56,899 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:45:56 BoogieIcfgContainer
[2020-11-25 04:45:56,899 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 04:45:56,900 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 04:45:56,900 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 04:45:56,901 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 04:45:56,902 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:45:56" (1/1) ...
[2020-11-25 04:45:56,958 INFO  L313           BlockEncoder]: Initial Icfg 1780 locations, 3022 edges
[2020-11-25 04:45:56,958 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 04:45:56,958 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 04:45:56,959 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 04:45:56,959 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 04:45:56,968 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 7 locations because of local infeasibility
[2020-11-25 04:45:56,973 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 04:45:56,980 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 04:45:56,983 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 04:45:56,984 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 04:45:56,985 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 04:45:56,988 INFO  L313           BlockEncoder]: Encoded RCFG 1742 locations, 2919 edges
[2020-11-25 04:45:56,988 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:45:56 BasicIcfg
[2020-11-25 04:45:56,988 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 04:45:56,989 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 04:45:56,989 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 04:45:56,991 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 04:45:56,992 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:45:56,992 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:45:55" (1/6) ...
[2020-11-25 04:45:56,993 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a246dbb and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:45:56, skipping insertion in model container
[2020-11-25 04:45:56,994 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:45:56,994 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:45:55" (2/6) ...
[2020-11-25 04:45:56,994 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a246dbb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:45:56, skipping insertion in model container
[2020-11-25 04:45:56,994 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:45:56,994 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:45:55" (3/6) ...
[2020-11-25 04:45:56,994 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a246dbb and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:45:56, skipping insertion in model container
[2020-11-25 04:45:56,994 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:45:56,994 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:45:56" (4/6) ...
[2020-11-25 04:45:56,995 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a246dbb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:45:56, skipping insertion in model container
[2020-11-25 04:45:56,995 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:45:56,995 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:45:56" (5/6) ...
[2020-11-25 04:45:56,995 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a246dbb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:45:56, skipping insertion in model container
[2020-11-25 04:45:56,995 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:45:56,995 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:45:56" (6/6) ...
[2020-11-25 04:45:56,997 INFO  L404   chiAutomizerObserver]: Analyzing ICFG SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-self.bpl_BEv2
[2020-11-25 04:45:57,035 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 04:45:57,035 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 04:45:57,035 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 04:45:57,035 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 04:45:57,035 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 04:45:57,035 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 04:45:57,036 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 04:45:57,036 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 04:45:57,036 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 04:45:57,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1742 states.
[2020-11-25 04:45:57,113 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:57,113 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:45:57,113 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:45:57,123 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:57,123 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:57,123 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 04:45:57,123 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1742 states.
[2020-11-25 04:45:57,135 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:57,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:45:57,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:45:57,137 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:57,137 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND TRUE   revert
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:45:57,154 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:45:57,154 INFO  L82        PathProgramCache]: Analyzing trace with hash -953009248, now seen corresponding path program 1 times
[2020-11-25 04:45:57,158 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:45:57,177 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:45:57,228 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:45:57,230 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:45:57,230 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 04:45:57,234 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:45:57,340 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 04:45:57,341 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 04:45:57,343 INFO  L87              Difference]: Start difference. First operand 1742 states. Second operand 3 states.
[2020-11-25 04:45:57,489 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:45:57,489 INFO  L93              Difference]: Finished difference Result 1381 states and 1526 transitions.
[2020-11-25 04:45:57,489 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 04:45:57,491 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1381 states and 1526 transitions.
[2020-11-25 04:45:57,500 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:57,514 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1381 states to 1381 states and 1526 transitions.
[2020-11-25 04:45:57,515 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 04:45:57,517 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 425
[2020-11-25 04:45:57,517 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1381 states and 1526 transitions.
[2020-11-25 04:45:57,523 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:45:57,523 INFO  L728         BuchiCegarLoop]: Abstraction has 1381 states and 1526 transitions.
[2020-11-25 04:45:57,540 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1381 states and 1526 transitions.
[2020-11-25 04:45:57,574 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1381 to 1381.
[2020-11-25 04:45:57,574 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1381 states.
[2020-11-25 04:45:57,578 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1381 states to 1381 states and 1526 transitions.
[2020-11-25 04:45:57,579 INFO  L751         BuchiCegarLoop]: Abstraction has 1381 states and 1526 transitions.
[2020-11-25 04:45:57,579 INFO  L631         BuchiCegarLoop]: Abstraction has 1381 states and 1526 transitions.
[2020-11-25 04:45:57,579 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 04:45:57,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1381 states and 1526 transitions.
[2020-11-25 04:45:57,585 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:57,585 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:45:57,585 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:45:57,587 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:57,587 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND TRUE   revert
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND TRUE   !(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1269]              revert := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND TRUE   !(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1269]              revert := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:45:57,592 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:45:57,592 INFO  L82        PathProgramCache]: Analyzing trace with hash 2099718220, now seen corresponding path program 1 times
[2020-11-25 04:45:57,593 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:45:57,605 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:45:57,639 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:45:57,639 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:45:57,639 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:45:57,641 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:45:57,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:45:57,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:45:57,641 INFO  L87              Difference]: Start difference. First operand 1381 states and 1526 transitions. cyclomatic complexity: 147 Second operand 4 states.
[2020-11-25 04:45:57,865 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:45:57,865 INFO  L93              Difference]: Finished difference Result 1999 states and 2278 transitions.
[2020-11-25 04:45:57,865 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:45:57,866 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1999 states and 2278 transitions.
[2020-11-25 04:45:57,876 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 04:45:57,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1999 states to 1935 states and 2202 transitions.
[2020-11-25 04:45:57,885 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 588
[2020-11-25 04:45:57,886 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-11-25 04:45:57,886 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1935 states and 2202 transitions.
[2020-11-25 04:45:57,889 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:45:57,889 INFO  L728         BuchiCegarLoop]: Abstraction has 1935 states and 2202 transitions.
[2020-11-25 04:45:57,890 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1935 states and 2202 transitions.
[2020-11-25 04:45:57,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1935 to 1417.
[2020-11-25 04:45:57,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1417 states.
[2020-11-25 04:45:57,913 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1417 states to 1417 states and 1524 transitions.
[2020-11-25 04:45:57,913 INFO  L751         BuchiCegarLoop]: Abstraction has 1417 states and 1524 transitions.
[2020-11-25 04:45:57,913 INFO  L631         BuchiCegarLoop]: Abstraction has 1417 states and 1524 transitions.
[2020-11-25 04:45:57,913 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 04:45:57,913 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1417 states and 1524 transitions.
[2020-11-25 04:45:57,916 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:57,916 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:45:57,916 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:45:57,917 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:57,917 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1199]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1199]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:45:57,921 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:45:57,921 INFO  L82        PathProgramCache]: Analyzing trace with hash 564675398, now seen corresponding path program 1 times
[2020-11-25 04:45:57,921 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:45:57,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:45:57,978 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:45:57,979 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:45:57,979 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 04:45:57,979 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:45:57,979 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 04:45:57,979 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 04:45:57,980 INFO  L87              Difference]: Start difference. First operand 1417 states and 1524 transitions. cyclomatic complexity: 109 Second operand 6 states.
[2020-11-25 04:45:58,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:45:58,594 INFO  L93              Difference]: Finished difference Result 1645 states and 1797 transitions.
[2020-11-25 04:45:58,594 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:45:58,594 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1645 states and 1797 transitions.
[2020-11-25 04:45:58,602 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:45:58,609 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1645 states to 1645 states and 1797 transitions.
[2020-11-25 04:45:58,609 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 515
[2020-11-25 04:45:58,610 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 515
[2020-11-25 04:45:58,610 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1645 states and 1797 transitions.
[2020-11-25 04:45:58,612 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:45:58,612 INFO  L728         BuchiCegarLoop]: Abstraction has 1645 states and 1797 transitions.
[2020-11-25 04:45:58,613 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1645 states and 1797 transitions.
[2020-11-25 04:45:58,630 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1645 to 1469.
[2020-11-25 04:45:58,630 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1469 states.
[2020-11-25 04:45:58,633 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1469 states to 1469 states and 1584 transitions.
[2020-11-25 04:45:58,633 INFO  L751         BuchiCegarLoop]: Abstraction has 1469 states and 1584 transitions.
[2020-11-25 04:45:58,633 INFO  L631         BuchiCegarLoop]: Abstraction has 1469 states and 1584 transitions.
[2020-11-25 04:45:58,633 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 04:45:58,633 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1469 states and 1584 transitions.
[2020-11-25 04:45:58,637 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:58,637 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:45:58,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:45:58,639 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:58,639 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1215]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1215]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:45:58,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:45:58,642 INFO  L82        PathProgramCache]: Analyzing trace with hash 1847091074, now seen corresponding path program 1 times
[2020-11-25 04:45:58,643 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:45:58,651 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:45:58,706 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:45:58,706 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:45:58,707 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 04:45:58,707 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:45:58,707 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 04:45:58,707 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 04:45:58,707 INFO  L87              Difference]: Start difference. First operand 1469 states and 1584 transitions. cyclomatic complexity: 117 Second operand 6 states.
[2020-11-25 04:45:59,088 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:45:59,089 INFO  L93              Difference]: Finished difference Result 1571 states and 1703 transitions.
[2020-11-25 04:45:59,342 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:45:59,342 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1571 states and 1703 transitions.
[2020-11-25 04:45:59,349 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:45:59,358 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1571 states to 1571 states and 1703 transitions.
[2020-11-25 04:45:59,358 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 500
[2020-11-25 04:45:59,358 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 500
[2020-11-25 04:45:59,358 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1571 states and 1703 transitions.
[2020-11-25 04:45:59,360 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:45:59,361 INFO  L728         BuchiCegarLoop]: Abstraction has 1571 states and 1703 transitions.
[2020-11-25 04:45:59,362 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1571 states and 1703 transitions.
[2020-11-25 04:45:59,379 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1571 to 1469.
[2020-11-25 04:45:59,380 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1469 states.
[2020-11-25 04:45:59,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1469 states to 1469 states and 1584 transitions.
[2020-11-25 04:45:59,383 INFO  L751         BuchiCegarLoop]: Abstraction has 1469 states and 1584 transitions.
[2020-11-25 04:45:59,383 INFO  L631         BuchiCegarLoop]: Abstraction has 1469 states and 1584 transitions.
[2020-11-25 04:45:59,383 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 04:45:59,383 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1469 states and 1584 transitions.
[2020-11-25 04:45:59,387 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:59,387 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:45:59,387 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:45:59,389 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:59,389 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:45:59,393 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:45:59,393 INFO  L82        PathProgramCache]: Analyzing trace with hash -617540756, now seen corresponding path program 1 times
[2020-11-25 04:45:59,394 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:45:59,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:45:59,453 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:45:59,453 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:45:59,454 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:45:59,454 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:45:59,454 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:45:59,454 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:45:59,454 INFO  L87              Difference]: Start difference. First operand 1469 states and 1584 transitions. cyclomatic complexity: 117 Second operand 7 states.
[2020-11-25 04:45:59,525 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:45:59,525 INFO  L93              Difference]: Finished difference Result 1489 states and 1605 transitions.
[2020-11-25 04:45:59,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:45:59,526 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1489 states and 1605 transitions.
[2020-11-25 04:45:59,530 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:59,534 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1489 states to 1477 states and 1592 transitions.
[2020-11-25 04:45:59,534 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 458
[2020-11-25 04:45:59,534 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 458
[2020-11-25 04:45:59,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1477 states and 1592 transitions.
[2020-11-25 04:45:59,536 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:45:59,536 INFO  L728         BuchiCegarLoop]: Abstraction has 1477 states and 1592 transitions.
[2020-11-25 04:45:59,537 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1477 states and 1592 transitions.
[2020-11-25 04:45:59,548 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1477 to 1475.
[2020-11-25 04:45:59,548 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1475 states.
[2020-11-25 04:45:59,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1475 states to 1475 states and 1590 transitions.
[2020-11-25 04:45:59,549 INFO  L751         BuchiCegarLoop]: Abstraction has 1475 states and 1590 transitions.
[2020-11-25 04:45:59,550 INFO  L631         BuchiCegarLoop]: Abstraction has 1475 states and 1590 transitions.
[2020-11-25 04:45:59,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 04:45:59,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1475 states and 1590 transitions.
[2020-11-25 04:45:59,552 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:45:59,552 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:45:59,552 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:45:59,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:45:59,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND FALSE  !(!(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1202]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1203]  CALL        call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1203]  RET         call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1204]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:45:59,555 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:45:59,555 INFO  L82        PathProgramCache]: Analyzing trace with hash -1811701162, now seen corresponding path program 1 times
[2020-11-25 04:45:59,556 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:45:59,566 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:45:59,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:45:59,671 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:45:59,671 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 04:45:59,671 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:45:59,671 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 04:45:59,671 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 04:45:59,671 INFO  L87              Difference]: Start difference. First operand 1475 states and 1590 transitions. cyclomatic complexity: 117 Second operand 14 states.
[2020-11-25 04:46:00,993 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:00,994 INFO  L93              Difference]: Finished difference Result 1813 states and 2039 transitions.
[2020-11-25 04:46:00,994 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 04:46:00,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1813 states and 2039 transitions.
[2020-11-25 04:46:00,999 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 04:46:01,005 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1813 states to 1813 states and 2039 transitions.
[2020-11-25 04:46:01,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 579
[2020-11-25 04:46:01,005 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 579
[2020-11-25 04:46:01,006 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1813 states and 2039 transitions.
[2020-11-25 04:46:01,007 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:01,007 INFO  L728         BuchiCegarLoop]: Abstraction has 1813 states and 2039 transitions.
[2020-11-25 04:46:01,009 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1813 states and 2039 transitions.
[2020-11-25 04:46:01,023 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1813 to 1622.
[2020-11-25 04:46:01,023 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1622 states.
[2020-11-25 04:46:01,025 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1622 states to 1622 states and 1766 transitions.
[2020-11-25 04:46:01,025 INFO  L751         BuchiCegarLoop]: Abstraction has 1622 states and 1766 transitions.
[2020-11-25 04:46:01,025 INFO  L631         BuchiCegarLoop]: Abstraction has 1622 states and 1766 transitions.
[2020-11-25 04:46:01,025 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 04:46:01,025 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1622 states and 1766 transitions.
[2020-11-25 04:46:01,027 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:46:01,027 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:01,028 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:01,028 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:01,028 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1007]              revert := true;
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:01,030 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:01,030 INFO  L82        PathProgramCache]: Analyzing trace with hash -2145531701, now seen corresponding path program 1 times
[2020-11-25 04:46:01,031 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:01,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:01,273 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 04:46:01,273 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:46:01,274 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 04:46:01,274 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:01,274 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 04:46:01,274 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=502, Unknown=0, NotChecked=0, Total=552
[2020-11-25 04:46:01,274 INFO  L87              Difference]: Start difference. First operand 1622 states and 1766 transitions. cyclomatic complexity: 148 Second operand 24 states.
[2020-11-25 04:46:03,603 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:03,603 INFO  L93              Difference]: Finished difference Result 1735 states and 1980 transitions.
[2020-11-25 04:46:03,604 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 04:46:03,604 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1735 states and 1980 transitions.
[2020-11-25 04:46:03,608 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 04:46:03,613 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1735 states to 1735 states and 1980 transitions.
[2020-11-25 04:46:03,613 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 565
[2020-11-25 04:46:03,613 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 565
[2020-11-25 04:46:03,613 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1735 states and 1980 transitions.
[2020-11-25 04:46:03,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:03,615 INFO  L728         BuchiCegarLoop]: Abstraction has 1735 states and 1980 transitions.
[2020-11-25 04:46:03,616 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1735 states and 1980 transitions.
[2020-11-25 04:46:03,630 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1735 to 1664.
[2020-11-25 04:46:03,630 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1664 states.
[2020-11-25 04:46:03,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1664 states to 1664 states and 1835 transitions.
[2020-11-25 04:46:03,631 INFO  L751         BuchiCegarLoop]: Abstraction has 1664 states and 1835 transitions.
[2020-11-25 04:46:03,631 INFO  L631         BuchiCegarLoop]: Abstraction has 1664 states and 1835 transitions.
[2020-11-25 04:46:03,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 04:46:03,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1664 states and 1835 transitions.
[2020-11-25 04:46:03,634 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:46:03,634 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:03,634 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:03,636 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:03,636 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:03,640 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:03,640 INFO  L82        PathProgramCache]: Analyzing trace with hash -2071678454, now seen corresponding path program 1 times
[2020-11-25 04:46:03,641 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:03,649 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:03,673 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 04:46:03,673 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:46:03,673 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 04:46:03,674 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:03,674 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 04:46:03,674 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 04:46:03,674 INFO  L87              Difference]: Start difference. First operand 1664 states and 1835 transitions. cyclomatic complexity: 177 Second operand 6 states.
[2020-11-25 04:46:03,731 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:03,731 INFO  L93              Difference]: Finished difference Result 1701 states and 1878 transitions.
[2020-11-25 04:46:03,731 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 04:46:03,731 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1701 states and 1878 transitions.
[2020-11-25 04:46:03,735 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:46:03,738 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1701 states to 1701 states and 1878 transitions.
[2020-11-25 04:46:03,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 543
[2020-11-25 04:46:03,739 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 543
[2020-11-25 04:46:03,739 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1701 states and 1878 transitions.
[2020-11-25 04:46:03,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:03,740 INFO  L728         BuchiCegarLoop]: Abstraction has 1701 states and 1878 transitions.
[2020-11-25 04:46:03,741 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1701 states and 1878 transitions.
[2020-11-25 04:46:03,751 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1701 to 1672.
[2020-11-25 04:46:03,751 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1672 states.
[2020-11-25 04:46:03,752 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1672 states to 1672 states and 1843 transitions.
[2020-11-25 04:46:03,753 INFO  L751         BuchiCegarLoop]: Abstraction has 1672 states and 1843 transitions.
[2020-11-25 04:46:03,753 INFO  L631         BuchiCegarLoop]: Abstraction has 1672 states and 1843 transitions.
[2020-11-25 04:46:03,753 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 04:46:03,753 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1672 states and 1843 transitions.
[2020-11-25 04:46:03,755 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:46:03,755 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:03,755 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:03,756 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:03,756 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND TRUE   choice == 2
[L1995]              gas := gas - 21000;
[L1996]  COND TRUE   gas >= 0
[L1997]              assume wad_s194 >= 0 && wad_s194 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1998]              assume msgvalue_MSG == 0;
[L1999]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L304]               havoc __exception;
[L305]               revert := false;
[L306]   COND FALSE  !(__exception)
[L327]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L1180]  CALL        call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L1180]  RET         call __var_3 := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s194, wad_s194);
[L1181]  COND FALSE  !(revert)
[L1184]              __ret_0_ := __var_3;
[L327]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L328]               assume !revert && gas >= 0;
[L1999]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, dst_s194, wad_s194);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:03,758 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:03,759 INFO  L82        PathProgramCache]: Analyzing trace with hash -745663615, now seen corresponding path program 1 times
[2020-11-25 04:46:03,759 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:03,779 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:04,316 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 99 DAG size of output: 79
[2020-11-25 04:46:05,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 04:46:05,019 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:46:05,019 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 04:46:05,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:05,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 04:46:05,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=84, Invalid=1106, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 04:46:05,020 INFO  L87              Difference]: Start difference. First operand 1672 states and 1843 transitions. cyclomatic complexity: 177 Second operand 35 states.
[2020-11-25 04:46:08,224 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 105
[2020-11-25 04:46:11,050 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:11,050 INFO  L93              Difference]: Finished difference Result 1694 states and 1932 transitions.
[2020-11-25 04:46:11,050 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 04:46:11,050 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1694 states and 1932 transitions.
[2020-11-25 04:46:11,053 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 04:46:11,057 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1694 states to 1694 states and 1932 transitions.
[2020-11-25 04:46:11,057 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 540
[2020-11-25 04:46:11,058 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 540
[2020-11-25 04:46:11,058 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1694 states and 1932 transitions.
[2020-11-25 04:46:11,059 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:11,059 INFO  L728         BuchiCegarLoop]: Abstraction has 1694 states and 1932 transitions.
[2020-11-25 04:46:11,060 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1694 states and 1932 transitions.
[2020-11-25 04:46:11,070 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1694 to 1659.
[2020-11-25 04:46:11,070 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1659 states.
[2020-11-25 04:46:11,071 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1659 states to 1659 states and 1825 transitions.
[2020-11-25 04:46:11,071 INFO  L751         BuchiCegarLoop]: Abstraction has 1659 states and 1825 transitions.
[2020-11-25 04:46:11,071 INFO  L631         BuchiCegarLoop]: Abstraction has 1659 states and 1825 transitions.
[2020-11-25 04:46:11,071 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 04:46:11,071 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1659 states and 1825 transitions.
[2020-11-25 04:46:11,073 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:46:11,073 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:11,073 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:11,075 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:11,075 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND FALSE  !(revert)
[L1247]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1248]              __tmp__balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1249]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1250]  CALL        call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1332]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1333]  CALL        call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1333]  RET         call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1334]  COND FALSE  !(revert)
[L1340]              __tmp__totalSupply_SpaghettiToken[this] := __var_8;
[L1250]  RET         call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1251]  COND FALSE  !(revert)
[L1254]              __ret_0_ := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND FALSE  !(revert)
[L1247]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1248]              __tmp__balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1249]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1250]  CALL        call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1332]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1333]  CALL        call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1333]  RET         call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1334]  COND FALSE  !(revert)
[L1340]              __tmp__totalSupply_SpaghettiToken[this] := __var_8;
[L1250]  RET         call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1251]  COND FALSE  !(revert)
[L1254]              __ret_0_ := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:11,078 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:11,078 INFO  L82        PathProgramCache]: Analyzing trace with hash -798486423, now seen corresponding path program 1 times
[2020-11-25 04:46:11,079 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:11,085 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:11,104 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 04:46:11,104 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:46:11,104 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 04:46:11,104 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:11,104 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 04:46:11,104 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 04:46:11,105 INFO  L87              Difference]: Start difference. First operand 1659 states and 1825 transitions. cyclomatic complexity: 172 Second operand 5 states.
[2020-11-25 04:46:11,230 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:11,230 INFO  L93              Difference]: Finished difference Result 2059 states and 2471 transitions.
[2020-11-25 04:46:11,230 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:46:11,230 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2059 states and 2471 transitions.
[2020-11-25 04:46:11,235 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-25 04:46:11,241 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2059 states to 1558 states and 1967 transitions.
[2020-11-25 04:46:11,241 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 400
[2020-11-25 04:46:11,241 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 400
[2020-11-25 04:46:11,241 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1558 states and 1967 transitions.
[2020-11-25 04:46:11,242 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:11,242 INFO  L728         BuchiCegarLoop]: Abstraction has 1558 states and 1967 transitions.
[2020-11-25 04:46:11,243 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1558 states and 1967 transitions.
[2020-11-25 04:46:11,257 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1558 to 1160.
[2020-11-25 04:46:11,258 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1160 states.
[2020-11-25 04:46:11,259 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1160 states to 1160 states and 1301 transitions.
[2020-11-25 04:46:11,259 INFO  L751         BuchiCegarLoop]: Abstraction has 1160 states and 1301 transitions.
[2020-11-25 04:46:11,259 INFO  L631         BuchiCegarLoop]: Abstraction has 1160 states and 1301 transitions.
[2020-11-25 04:46:11,259 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 04:46:11,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1160 states and 1301 transitions.
[2020-11-25 04:46:11,260 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:46:11,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:11,260 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:11,261 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:11,261 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND FALSE  !(revert)
[L1247]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1248]              __tmp__balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1249]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1250]  CALL        call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1332]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1333]  CALL        call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1333]  RET         call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1334]  COND TRUE   revert
[L1250]  RET         call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1251]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:11,263 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:11,263 INFO  L82        PathProgramCache]: Analyzing trace with hash -1319867521, now seen corresponding path program 1 times
[2020-11-25 04:46:11,264 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:11,272 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:11,360 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 8 trivial. 0 not checked.
[2020-11-25 04:46:11,360 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:46:11,360 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 04:46:11,361 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:11,361 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 04:46:11,361 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-11-25 04:46:11,361 INFO  L87              Difference]: Start difference. First operand 1160 states and 1301 transitions. cyclomatic complexity: 147 Second operand 18 states.
[2020-11-25 04:46:12,474 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:12,474 INFO  L93              Difference]: Finished difference Result 1196 states and 1391 transitions.
[2020-11-25 04:46:12,474 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 04:46:12,475 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1196 states and 1391 transitions.
[2020-11-25 04:46:12,477 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:46:12,481 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1196 states to 1196 states and 1391 transitions.
[2020-11-25 04:46:12,481 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 322
[2020-11-25 04:46:12,481 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 322
[2020-11-25 04:46:12,481 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1196 states and 1391 transitions.
[2020-11-25 04:46:12,482 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:12,482 INFO  L728         BuchiCegarLoop]: Abstraction has 1196 states and 1391 transitions.
[2020-11-25 04:46:12,483 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1196 states and 1391 transitions.
[2020-11-25 04:46:12,492 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1196 to 1140.
[2020-11-25 04:46:12,492 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1140 states.
[2020-11-25 04:46:12,494 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1140 states to 1140 states and 1266 transitions.
[2020-11-25 04:46:12,494 INFO  L751         BuchiCegarLoop]: Abstraction has 1140 states and 1266 transitions.
[2020-11-25 04:46:12,494 INFO  L631         BuchiCegarLoop]: Abstraction has 1140 states and 1266 transitions.
[2020-11-25 04:46:12,494 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 04:46:12,494 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1140 states and 1266 transitions.
[2020-11-25 04:46:12,496 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:46:12,496 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:12,496 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:12,497 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:12,497 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1272]  COND TRUE   DType[this] == SpaghettiToken
[L1273]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1273]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1274]  COND FALSE  !(revert)
[L1280]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1281]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1282]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND FALSE  !(!(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1202]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1203]  CALL        call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1203]  RET         call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1204]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:12,500 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:12,500 INFO  L82        PathProgramCache]: Analyzing trace with hash 239345148, now seen corresponding path program 1 times
[2020-11-25 04:46:12,500 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:12,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:13,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 24 backedges. 3 proven. 15 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-11-25 04:46:13,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:46:13,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-25 04:46:13,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:13,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-25 04:46:13,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=134, Invalid=1936, Unknown=0, NotChecked=0, Total=2070
[2020-11-25 04:46:13,811 INFO  L87              Difference]: Start difference. First operand 1140 states and 1266 transitions. cyclomatic complexity: 131 Second operand 46 states.
[2020-11-25 04:46:18,350 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:18,350 INFO  L93              Difference]: Finished difference Result 1366 states and 1561 transitions.
[2020-11-25 04:46:18,350 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 04:46:18,350 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1366 states and 1561 transitions.
[2020-11-25 04:46:18,353 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:46:18,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1366 states to 1366 states and 1561 transitions.
[2020-11-25 04:46:18,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 379
[2020-11-25 04:46:18,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 379
[2020-11-25 04:46:18,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1366 states and 1561 transitions.
[2020-11-25 04:46:18,358 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:18,358 INFO  L728         BuchiCegarLoop]: Abstraction has 1366 states and 1561 transitions.
[2020-11-25 04:46:18,358 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1366 states and 1561 transitions.
[2020-11-25 04:46:18,366 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1366 to 1330.
[2020-11-25 04:46:18,366 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1330 states.
[2020-11-25 04:46:18,368 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1330 states to 1330 states and 1517 transitions.
[2020-11-25 04:46:18,368 INFO  L751         BuchiCegarLoop]: Abstraction has 1330 states and 1517 transitions.
[2020-11-25 04:46:18,368 INFO  L631         BuchiCegarLoop]: Abstraction has 1330 states and 1517 transitions.
[2020-11-25 04:46:18,368 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 04:46:18,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1330 states and 1517 transitions.
[2020-11-25 04:46:18,369 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:46:18,370 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:18,370 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:18,370 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:18,370 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND TRUE   choice == 3
[L1988]              gas := gas - 21000;
[L1989]  COND TRUE   gas >= 0
[L1990]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1991]              assume msgvalue_MSG == 0;
[L1992]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L249]               havoc __exception;
[L250]               revert := false;
[L251]   COND FALSE  !(__exception)
[L272]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1159]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1161]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1162]              __ret_0_ := true;
[L272]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L273]               assume !revert && gas >= 0;
[L1992]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND FALSE  !(!(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1202]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1203]  CALL        call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1203]  RET         call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1204]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1272]  COND TRUE   DType[this] == SpaghettiToken
[L1273]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1273]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1274]  COND FALSE  !(revert)
[L1280]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1281]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1282]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:18,373 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:18,373 INFO  L82        PathProgramCache]: Analyzing trace with hash -1259612739, now seen corresponding path program 1 times
[2020-11-25 04:46:18,374 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:18,383 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:18,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-11-25 04:46:18,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:46:18,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:46:18,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:18,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:46:18,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:46:18,420 INFO  L87              Difference]: Start difference. First operand 1330 states and 1517 transitions. cyclomatic complexity: 194 Second operand 7 states.
[2020-11-25 04:46:18,666 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:18,666 INFO  L93              Difference]: Finished difference Result 1441 states and 1717 transitions.
[2020-11-25 04:46:18,666 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 04:46:18,666 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1441 states and 1717 transitions.
[2020-11-25 04:46:18,670 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 04:46:18,673 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1441 states to 1441 states and 1717 transitions.
[2020-11-25 04:46:18,673 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 394
[2020-11-25 04:46:18,674 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 394
[2020-11-25 04:46:18,674 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1441 states and 1717 transitions.
[2020-11-25 04:46:18,675 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:18,675 INFO  L728         BuchiCegarLoop]: Abstraction has 1441 states and 1717 transitions.
[2020-11-25 04:46:18,676 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1441 states and 1717 transitions.
[2020-11-25 04:46:18,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1441 to 1260.
[2020-11-25 04:46:18,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1260 states.
[2020-11-25 04:46:18,684 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1260 states to 1260 states and 1413 transitions.
[2020-11-25 04:46:18,684 INFO  L751         BuchiCegarLoop]: Abstraction has 1260 states and 1413 transitions.
[2020-11-25 04:46:18,685 INFO  L631         BuchiCegarLoop]: Abstraction has 1260 states and 1413 transitions.
[2020-11-25 04:46:18,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 04:46:18,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1260 states and 1413 transitions.
[2020-11-25 04:46:18,686 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:46:18,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:18,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:18,687 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:18,687 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND TRUE   choice == 3
[L1988]              gas := gas - 21000;
[L1989]  COND TRUE   gas >= 0
[L1990]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1991]              assume msgvalue_MSG == 0;
[L1992]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L249]               havoc __exception;
[L250]               revert := false;
[L251]   COND FALSE  !(__exception)
[L272]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1159]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1161]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1162]              __ret_0_ := true;
[L272]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L273]               assume !revert && gas >= 0;
[L1992]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1007]              revert := true;
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:18,689 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:18,689 INFO  L82        PathProgramCache]: Analyzing trace with hash -1907576444, now seen corresponding path program 1 times
[2020-11-25 04:46:18,689 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:18,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:18,769 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 04:46:18,769 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:46:18,769 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 04:46:18,770 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:46:18,770 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 04:46:18,770 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 04:46:18,770 INFO  L87              Difference]: Start difference. First operand 1260 states and 1413 transitions. cyclomatic complexity: 158 Second operand 14 states.
[2020-11-25 04:46:19,376 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:46:19,376 INFO  L93              Difference]: Finished difference Result 1303 states and 1495 transitions.
[2020-11-25 04:46:19,376 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 04:46:19,376 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1303 states and 1495 transitions.
[2020-11-25 04:46:19,379 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:46:19,382 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1303 states to 1303 states and 1495 transitions.
[2020-11-25 04:46:19,382 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 347
[2020-11-25 04:46:19,382 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 347
[2020-11-25 04:46:19,382 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1303 states and 1495 transitions.
[2020-11-25 04:46:19,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:46:19,383 INFO  L728         BuchiCegarLoop]: Abstraction has 1303 states and 1495 transitions.
[2020-11-25 04:46:19,384 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1303 states and 1495 transitions.
[2020-11-25 04:46:19,390 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1303 to 1260.
[2020-11-25 04:46:19,390 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1260 states.
[2020-11-25 04:46:19,392 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1260 states to 1260 states and 1413 transitions.
[2020-11-25 04:46:19,392 INFO  L751         BuchiCegarLoop]: Abstraction has 1260 states and 1413 transitions.
[2020-11-25 04:46:19,392 INFO  L631         BuchiCegarLoop]: Abstraction has 1260 states and 1413 transitions.
[2020-11-25 04:46:19,392 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 04:46:19,392 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1260 states and 1413 transitions.
[2020-11-25 04:46:19,393 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:46:19,393 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:46:19,393 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:46:19,394 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:46:19,394 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND TRUE   choice == 3
[L1988]              gas := gas - 21000;
[L1989]  COND TRUE   gas >= 0
[L1990]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1991]              assume msgvalue_MSG == 0;
[L1992]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L249]               havoc __exception;
[L250]               revert := false;
[L251]   COND FALSE  !(__exception)
[L272]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1159]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1161]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1162]              __ret_0_ := true;
[L272]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L273]               assume !revert && gas >= 0;
[L1992]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1272]  COND TRUE   DType[this] == SpaghettiToken
[L1273]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1273]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1274]  COND FALSE  !(revert)
[L1280]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1281]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1282]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:46:19,397 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:19,397 INFO  L82        PathProgramCache]: Analyzing trace with hash -37145798, now seen corresponding path program 1 times
[2020-11-25 04:46:19,397 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:19,417 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:46:19,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:46:19,504 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:19,505 INFO  L82        PathProgramCache]: Analyzing trace with hash -1386272023, now seen corresponding path program 1 times
[2020-11-25 04:46:19,505 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:19,581 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:46:19,607 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:46:19,619 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:46:19,619 INFO  L82        PathProgramCache]: Analyzing trace with hash -2093465392, now seen corresponding path program 1 times
[2020-11-25 04:46:19,620 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:46:19,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:46:22,219 WARN  L188               SmtUtils]: Spent 463.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 80
[2020-11-25 04:46:23,110 WARN  L188               SmtUtils]: Spent 610.00 ms on a formula simplification. DAG size of input: 214 DAG size of output: 93
[2020-11-25 04:46:25,720 WARN  L188               SmtUtils]: Spent 1.43 s on a formula simplification. DAG size of input: 221 DAG size of output: 108
[2020-11-25 04:46:27,802 WARN  L188               SmtUtils]: Spent 1.29 s on a formula simplification. DAG size of input: 211 DAG size of output: 82
[2020-11-25 04:46:36,652 WARN  L188               SmtUtils]: Spent 3.86 s on a formula simplification. DAG size of input: 277 DAG size of output: 103
[2020-11-25 04:46:41,916 WARN  L188               SmtUtils]: Spent 3.42 s on a formula simplification. DAG size of input: 285 DAG size of output: 133
[2020-11-25 04:46:49,257 WARN  L188               SmtUtils]: Spent 1.93 s on a formula simplification. DAG size of input: 266 DAG size of output: 117
[2020-11-25 04:46:50,891 WARN  L188               SmtUtils]: Spent 985.00 ms on a formula simplification. DAG size of input: 246 DAG size of output: 112
[2020-11-25 04:46:51,544 WARN  L188               SmtUtils]: Spent 389.00 ms on a formula simplification. DAG size of input: 95 DAG size of output: 43
[2020-11-25 04:46:51,842 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 86 DAG size of output: 60
[2020-11-25 04:46:52,212 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 99
[2020-11-25 04:46:52,603 WARN  L188               SmtUtils]: Spent 224.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 100
[2020-11-25 04:46:53,544 WARN  L188               SmtUtils]: Spent 653.00 ms on a formula simplification. DAG size of input: 454 DAG size of output: 122
[2020-11-25 04:46:54,696 WARN  L188               SmtUtils]: Spent 829.00 ms on a formula simplification. DAG size of input: 470 DAG size of output: 139
[2020-11-25 04:46:55,591 WARN  L188               SmtUtils]: Spent 591.00 ms on a formula simplification. DAG size of input: 401 DAG size of output: 110
[2020-11-25 04:46:56,630 WARN  L188               SmtUtils]: Spent 701.00 ms on a formula simplification. DAG size of input: 305 DAG size of output: 83
[2020-11-25 04:46:58,758 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 93
[2020-11-25 04:46:59,592 WARN  L188               SmtUtils]: Spent 239.00 ms on a formula simplification. DAG size of input: 173 DAG size of output: 118
[2020-11-25 04:47:00,126 WARN  L188               SmtUtils]: Spent 267.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 120
[2020-11-25 04:47:01,923 WARN  L188               SmtUtils]: Spent 1.37 s on a formula simplification. DAG size of input: 418 DAG size of output: 130
[2020-11-25 04:47:03,582 WARN  L188               SmtUtils]: Spent 826.00 ms on a formula simplification. DAG size of input: 393 DAG size of output: 97
[2020-11-25 04:47:04,540 WARN  L188               SmtUtils]: Spent 535.00 ms on a formula simplification. DAG size of input: 360 DAG size of output: 90
[2020-11-25 04:47:05,285 INFO  L134       CoverageAnalysis]: Checked inductivity of 192 backedges. 16 proven. 104 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-11-25 04:47:05,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:47:05,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [75] total 75
[2020-11-25 04:47:05,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 76 interpolants.
[2020-11-25 04:47:05,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=284, Invalid=5416, Unknown=0, NotChecked=0, Total=5700
[2020-11-25 04:47:05,286 INFO  L87              Difference]: Start difference. First operand 1260 states and 1413 transitions. cyclomatic complexity: 158 Second operand 76 states.
[2020-11-25 04:47:12,100 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 80 DAG size of output: 79
[2020-11-25 04:47:12,877 WARN  L188               SmtUtils]: Spent 272.00 ms on a formula simplification. DAG size of input: 91 DAG size of output: 91
[2020-11-25 04:47:13,495 WARN  L188               SmtUtils]: Spent 226.00 ms on a formula simplification. DAG size of input: 104 DAG size of output: 104
[2020-11-25 04:47:13,931 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 80 DAG size of output: 80
[2020-11-25 04:47:14,735 WARN  L188               SmtUtils]: Spent 240.00 ms on a formula simplification. DAG size of input: 100 DAG size of output: 100
[2020-11-25 04:47:23,078 WARN  L188               SmtUtils]: Spent 3.01 s on a formula simplification. DAG size of input: 168 DAG size of output: 128
[2020-11-25 04:47:32,706 WARN  L188               SmtUtils]: Spent 4.63 s on a formula simplification. DAG size of input: 205 DAG size of output: 157
[2020-11-25 04:47:37,447 WARN  L188               SmtUtils]: Spent 707.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 136
[2020-11-25 04:47:56,987 WARN  L188               SmtUtils]: Spent 173.00 ms on a formula simplification. DAG size of input: 119 DAG size of output: 119
[2020-11-25 04:47:57,387 WARN  L188               SmtUtils]: Spent 265.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 134
[2020-11-25 04:48:00,740 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification. DAG size of input: 149 DAG size of output: 115
[2020-11-25 04:48:12,391 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:48:12,391 INFO  L93              Difference]: Finished difference Result 1599 states and 1910 transitions.
[2020-11-25 04:48:12,391 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 67 states. 
[2020-11-25 04:48:12,391 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1599 states and 1910 transitions.
[2020-11-25 04:48:12,396 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 04:48:12,400 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1599 states to 1599 states and 1910 transitions.
[2020-11-25 04:48:12,400 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 514
[2020-11-25 04:48:12,400 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 514
[2020-11-25 04:48:12,400 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1599 states and 1910 transitions.
[2020-11-25 04:48:12,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:48:12,401 INFO  L728         BuchiCegarLoop]: Abstraction has 1599 states and 1910 transitions.
[2020-11-25 04:48:12,402 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1599 states and 1910 transitions.
[2020-11-25 04:48:12,412 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1599 to 1541.
[2020-11-25 04:48:12,412 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1541 states.
[2020-11-25 04:48:12,414 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1541 states to 1541 states and 1836 transitions.
[2020-11-25 04:48:12,414 INFO  L751         BuchiCegarLoop]: Abstraction has 1541 states and 1836 transitions.
[2020-11-25 04:48:12,414 INFO  L631         BuchiCegarLoop]: Abstraction has 1541 states and 1836 transitions.
[2020-11-25 04:48:12,414 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 04:48:12,414 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1541 states and 1836 transitions.
[2020-11-25 04:48:12,416 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 04:48:12,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:48:12,416 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:48:12,417 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:48:12,417 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND TRUE   choice == 3
[L1988]              gas := gas - 21000;
[L1989]  COND TRUE   gas >= 0
[L1990]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1991]              assume msgvalue_MSG == 0;
[L1992]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L249]               havoc __exception;
[L250]               revert := false;
[L251]   COND FALSE  !(__exception)
[L272]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1159]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1161]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1162]              __ret_0_ := true;
[L272]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L273]               assume !revert && gas >= 0;
[L1992]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1272]  COND TRUE   DType[this] == SpaghettiToken
[L1273]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1273]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1274]  COND FALSE  !(revert)
[L1280]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1281]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1282]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != src_s309 || p2 != msgsender_MSG) && src_s309 == dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1272]  COND TRUE   DType[this] == SpaghettiToken
[L1273]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1273]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1274]  COND FALSE  !(revert)
[L1280]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1281]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1282]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this] == old(balanceOf_SpaghettiToken[this])) && allowance_SpaghettiToken[this][p1][p2] == old(allowance_SpaghettiToken[this][p1][p2])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:48:12,420 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:48:12,420 INFO  L82        PathProgramCache]: Analyzing trace with hash -1332079901, now seen corresponding path program 1 times
[2020-11-25 04:48:12,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:48:12,482 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:48:12,574 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:48:12,594 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:48:12,594 INFO  L82        PathProgramCache]: Analyzing trace with hash -1386272023, now seen corresponding path program 2 times
[2020-11-25 04:48:12,595 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:48:12,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:48:12,658 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:48:12,667 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:48:12,667 INFO  L82        PathProgramCache]: Analyzing trace with hash 83957831, now seen corresponding path program 1 times
[2020-11-25 04:48:12,668 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:48:12,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:48:13,029 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 04:48:13,607 WARN  L188               SmtUtils]: Spent 477.00 ms on a formula simplification. DAG size of input: 215 DAG size of output: 207
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 04:48:13,855 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification. DAG size of input: 142 DAG size of output: 137
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
[2020-11-25 04:48:14,583 WARN  L188               SmtUtils]: Spent 648.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 195
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #8: 4943 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4943 to 9883
Garbage collection #9: 9883 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 9883 to 19763
[2020-11-25 04:48:17,052 WARN  L188               SmtUtils]: Spent 2.33 s on a formula simplification. DAG size of input: 159 DAG size of output: 141
[2020-11-25 04:48:19,470 WARN  L188               SmtUtils]: Spent 2.42 s on a formula simplification. DAG size of input: 282 DAG size of output: 268
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 04:48:25,156 WARN  L188               SmtUtils]: Spent 5.68 s on a formula simplification. DAG size of input: 260 DAG size of output: 246
[2020-11-25 04:48:30,146 WARN  L188               SmtUtils]: Spent 4.99 s on a formula simplification. DAG size of input: 308 DAG size of output: 278
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8053 to 16103
Garbage collection #9: 16103 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 16103 to 32203
[2020-11-25 04:48:36,277 WARN  L188               SmtUtils]: Spent 6.07 s on a formula simplification. DAG size of input: 249 DAG size of output: 204
[2020-11-25 04:48:39,319 WARN  L188               SmtUtils]: Spent 3.04 s on a formula simplification that was a NOOP. DAG size: 326
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
[2020-11-25 04:48:49,748 WARN  L188               SmtUtils]: Spent 10.35 s on a formula simplification. DAG size of input: 322 DAG size of output: 269
[2020-11-25 04:48:55,178 WARN  L188               SmtUtils]: Spent 5.43 s on a formula simplification that was a NOOP. DAG size: 269
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 18353 to 36697
Garbage collection #9: 36697 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 36697 to 73387
Garbage collection #10: 73387 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 73387 to 123379
Received shutdown request...
[2020-11-25 05:11:10,995 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3086)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3117)
	at net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3105)
[2020-11-25 05:11:10,997 INFO  L168              Benchmark]: Toolchain (without parser) took 1515644.80 ms. Allocated memory was 1.0 GB in the beginning and 10.0 GB in the end (delta: 9.0 GB). Free memory was 940.6 MB in the beginning and 9.9 GB in the end (delta: -8.9 GB). Peak memory consumption was 17.2 GB. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,998 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,998 INFO  L168              Benchmark]: Boogie Preprocessor took 59.72 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,998 INFO  L168              Benchmark]: UtopiaSpecLang took 54.86 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,998 INFO  L168              Benchmark]: Boogie Printer took 9.98 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,998 INFO  L168              Benchmark]: RCFGBuilder took 514.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,999 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.00 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,999 INFO  L168              Benchmark]: BÃ¼chi Program Product took 865.25 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 867.2 MB in the beginning and 917.4 MB in the end (delta: -50.2 MB). Peak memory consumption was 151.5 MB. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,999 INFO  L168              Benchmark]: BlockEncodingV2 took 88.81 ms. Allocated memory is still 1.1 GB. Free memory was 917.4 MB in the beginning and 878.9 MB in the end (delta: 38.5 MB). Peak memory consumption was 38.5 MB. Max. memory is 15.3 GB.
[2020-11-25 05:11:10,999 INFO  L168              Benchmark]: BuchiAutomizer took 1514007.73 ms. Allocated memory was 1.1 GB in the beginning and 10.0 GB in the end (delta: 8.9 GB). Free memory was 878.9 MB in the beginning and 9.9 GB in the end (delta: -9.0 GB). Peak memory consumption was 17.1 GB. Max. memory is 15.3 GB.
[2020-11-25 05:11:11,001 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1780 locations, 3022 edges
  - StatisticsResult: Encoded RCFG
    1742 locations, 2919 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 59.72 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.86 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 9.98 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 514.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.00 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 865.25 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 867.2 MB in the beginning and 917.4 MB in the end (delta: -50.2 MB). Peak memory consumption was 151.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 88.81 ms. Allocated memory is still 1.1 GB. Free memory was 917.4 MB in the beginning and 878.9 MB in the end (delta: 38.5 MB). Peak memory consumption was 38.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 1514007.73 ms. Allocated memory was 1.1 GB in the beginning and 10.0 GB in the end (delta: 8.9 GB). Free memory was 878.9 MB in the beginning and 9.9 GB in the end (delta: -9.0 GB). Peak memory consumption was 17.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    746 locations, 936 edges
  - StatisticsResult: BuchiProgram size
    1780 locations, 3022 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: OutOfMemoryError: GC overhead limit exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: OutOfMemoryError: GC overhead limit exceeded: net.sf.javabdd.JFactory.allsat_rec(JFactory.java:3086)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
